
F446_sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008158  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08008328  08008328  00018328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008934  08008934  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800893c  0800893c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd4  200001d8  08008b1c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eac  08008b1c  00020eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013059  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000329e  00000000  00000000  000332a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1c  00000000  00000000  00037648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002555c  00000000  00000000  00038364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017225  00000000  00000000  0005d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1213  00000000  00000000  00074ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005744  00000000  00000000  00155cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015b43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008310 	.word	0x08008310

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08008310 	.word	0x08008310

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000f98:	4a22      	ldr	r2, [pc, #136]	; (8001024 <MX_ADC1_Init+0xa0>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_ADC1_Init+0x9c>)
 8000fea:	f001 f88d 	bl	8002108 <HAL_ADC_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ff4:	f000 fd5e 	bl	8001ab4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_ADC1_Init+0x9c>)
 800100a:	f001 faf5 	bl	80025f8 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001014:	f000 fd4e 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200001f4 	.word	0x200001f4
 8001024:	40012000 	.word	0x40012000

08001028 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a33      	ldr	r2, [pc, #204]	; (8001114 <HAL_ADC_MspInit+0xec>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d15f      	bne.n	800110a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <HAL_ADC_MspInit+0xf0>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a31      	ldr	r2, [pc, #196]	; (8001118 <HAL_ADC_MspInit+0xf0>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <HAL_ADC_MspInit+0xf0>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_ADC_MspInit+0xf0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <HAL_ADC_MspInit+0xf0>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_ADC_MspInit+0xf0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001082:	2302      	movs	r3, #2
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4821      	ldr	r0, [pc, #132]	; (800111c <HAL_ADC_MspInit+0xf4>)
 8001096:	f002 fbd1 	bl	800383c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 800109c:	4a21      	ldr	r2, [pc, #132]	; (8001124 <HAL_ADC_MspInit+0xfc>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010de:	4810      	ldr	r0, [pc, #64]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010e0:	f002 f83c 	bl	800315c <HAL_DMA_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010ea:	f000 fce3 	bl	8001ab4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010f2:	639a      	str	r2, [r3, #56]	; 0x38
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_ADC_MspInit+0xf8>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2012      	movs	r0, #18
 8001100:	f001 fe0f 	bl	8002d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001104:	2012      	movs	r0, #18
 8001106:	f001 fe28 	bl	8002d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012000 	.word	0x40012000
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000
 8001120:	2000023c 	.word	0x2000023c
 8001124:	40026410 	.word	0x40026410

08001128 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_DAC_Init+0x4c>)
 8001138:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <MX_DAC_Init+0x50>)
 800113a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <MX_DAC_Init+0x4c>)
 800113e:	f001 fe26 	bl	8002d8e <HAL_DAC_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001148:	f000 fcb4 	bl	8001ab4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800114c:	2324      	movs	r3, #36	; 0x24
 800114e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <MX_DAC_Init+0x4c>)
 800115c:	f001 ff1a 	bl	8002f94 <HAL_DAC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001166:	f000 fca5 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000029c 	.word	0x2000029c
 8001178:	40007400 	.word	0x40007400

0800117c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_DAC_MspInit+0xdc>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d158      	bne.n	8001250 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a26      	ldr	r2, [pc, #152]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011d6:	2310      	movs	r3, #16
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	481d      	ldr	r0, [pc, #116]	; (8001260 <HAL_DAC_MspInit+0xe4>)
 80011ea:	f002 fb27 	bl	800383c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_DAC_MspInit+0xec>)
 80011f2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 80011f6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001216:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 800121a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001226:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001230:	2200      	movs	r2, #0
 8001232:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001236:	f001 ff91 	bl	800315c <HAL_DMA_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001240:	f000 fc38 	bl	8001ab4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40007400 	.word	0x40007400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000
 8001264:	200002b0 	.word	0x200002b0
 8001268:	40026088 	.word	0x40026088

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_DMA_Init+0x68>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <MX_DMA_Init+0x68>)
 800127c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_DMA_Init+0x68>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_DMA_Init+0x68>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <MX_DMA_Init+0x68>)
 8001298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_DMA_Init+0x68>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2010      	movs	r0, #16
 80012b0:	f001 fd37 	bl	8002d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012b4:	2010      	movs	r0, #16
 80012b6:	f001 fd50 	bl	8002d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2038      	movs	r0, #56	; 0x38
 80012c0:	f001 fd2f 	bl	8002d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012c4:	2038      	movs	r0, #56	; 0x38
 80012c6:	f001 fd48 	bl	8002d5a <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <MX_GPIO_Init+0xd0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <MX_GPIO_Init+0xd0>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <MX_GPIO_Init+0xd0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <MX_GPIO_Init+0xd0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <MX_GPIO_Init+0xd0>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_GPIO_Init+0xd0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2120      	movs	r1, #32
 8001362:	4812      	ldr	r0, [pc, #72]	; (80013ac <MX_GPIO_Init+0xd4>)
 8001364:	f002 fbfe 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_GPIO_Init+0xd8>)
 8001380:	f002 fa5c 	bl	800383c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001384:	2320      	movs	r3, #32
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_GPIO_Init+0xd4>)
 800139c:	f002 fa4e 	bl	800383c <HAL_GPIO_Init>

}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020800 	.word	0x40020800

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b090      	sub	sp, #64	; 0x40
 80013b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f000 fe33 	bl	8002024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f845 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c2:	f7ff ff89 	bl	80012d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c6:	f7ff ff51 	bl	800126c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ca:	f000 fd8f 	bl	8001eec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013ce:	f7ff fdd9 	bl	8000f84 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013d2:	f000 fd09 	bl	8001de8 <MX_TIM3_Init>
  MX_DAC_Init();
 80013d6:	f7ff fea7 	bl	8001128 <MX_DAC_Init>
  MX_TIM2_Init();
 80013da:	f000 fcb9 	bl	8001d50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  char buffer[50];
  sprintf(buffer, "TEST...\n\r");
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4912      	ldr	r1, [pc, #72]	; (800142c <main+0x78>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fe36 	bl	8006054 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7fe ff60 	bl	80002b0 <strlen>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	1d39      	adds	r1, r7, #4
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <main+0x7c>)
 80013fc:	f003 fd46 	bl	8004e8c <HAL_UART_Transmit>


  // start the ADC with IT
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, ADC_BUFFER_SIZE);
 8001400:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001404:	490b      	ldr	r1, [pc, #44]	; (8001434 <main+0x80>)
 8001406:	480c      	ldr	r0, [pc, #48]	; (8001438 <main+0x84>)
 8001408:	f000 ffd2 	bl	80023b0 <HAL_ADC_Start_DMA>

  // start the DAC channel 1 with DMA
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sineLookupTable, LookUpTableSize, DAC_ALIGN_12B_R);
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2364      	movs	r3, #100	; 0x64
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <main+0x88>)
 8001414:	2100      	movs	r1, #0
 8001416:	480a      	ldr	r0, [pc, #40]	; (8001440 <main+0x8c>)
 8001418:	f001 fcdc 	bl	8002dd4 <HAL_DAC_Start_DMA>


  //HAL_ADC_Start_IT(&hadc1);
    // start the timer 3
    HAL_TIM_Base_Start(&htim3);
 800141c:	4809      	ldr	r0, [pc, #36]	; (8001444 <main+0x90>)
 800141e:	f003 f9f3 	bl	8004808 <HAL_TIM_Base_Start>
    // start the timer 2
    HAL_TIM_Base_Start(&htim2);
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <main+0x94>)
 8001424:	f003 f9f0 	bl	8004808 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001428:	e7fe      	b.n	8001428 <main+0x74>
 800142a:	bf00      	nop
 800142c:	08008328 	.word	0x08008328
 8001430:	20000d14 	.word	0x20000d14
 8001434:	20000320 	.word	0x20000320
 8001438:	200001f4 	.word	0x200001f4
 800143c:	08008344 	.word	0x08008344
 8001440:	2000029c 	.word	0x2000029c
 8001444:	20000ccc 	.word	0x20000ccc
 8001448:	20000c84 	.word	0x20000c84

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	; 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2234      	movs	r2, #52	; 0x34
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fe5d 	bl	800611a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <SystemClock_Config+0xd4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a29      	ldr	r2, [pc, #164]	; (8001520 <SystemClock_Config+0xd4>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <SystemClock_Config+0xd4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800148c:	2300      	movs	r3, #0
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4b24      	ldr	r3, [pc, #144]	; (8001524 <SystemClock_Config+0xd8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001498:	4a22      	ldr	r2, [pc, #136]	; (8001524 <SystemClock_Config+0xd8>)
 800149a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <SystemClock_Config+0xd8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	2301      	movs	r3, #1
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b4:	2310      	movs	r3, #16
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014bc:	2300      	movs	r3, #0
 80014be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014c0:	2310      	movs	r3, #16
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014ca:	2304      	movs	r3, #4
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fea6 	bl	800422c <HAL_RCC_OscConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014e6:	f000 fae5 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2302      	movs	r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	2102      	movs	r1, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fb46 	bl	8003b98 <HAL_RCC_ClockConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001512:	f000 facf 	bl	8001ab4 <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	3750      	adds	r7, #80	; 0x50
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000

08001528 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// half transfer callback function for the ADC
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b092      	sub	sp, #72	; 0x48
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

    // prescale the ADC value to  range -3.3V to 3.3V and store it in the ADC_buffer_temp_float
    for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8001530:	2300      	movs	r3, #0
 8001532:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001536:	e01a      	b.n	800156e <HAL_ADC_ConvHalfCpltCallback+0x46>
    {
        ADC_buffer_temp_float[i] = (float)ADC_buffer1[i] * 1.0 / 4095.0;
 8001538:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <HAL_ADC_ConvHalfCpltCallback+0x210>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800154e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001552:	eddf 6a7a 	vldr	s13, [pc, #488]	; 800173c <HAL_ADC_ConvHalfCpltCallback+0x214>
 8001556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155a:	4a79      	ldr	r2, [pc, #484]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8001564:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001568:	3301      	adds	r3, #1
 800156a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800156e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001572:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001576:	d3df      	bcc.n	8001538 <HAL_ADC_ConvHalfCpltCallback+0x10>
    }

    // calculate the mean value of the ADC_buffer_temp_float
    float mean = calculata_mean_float(ADC_buffer_temp_float, ADC_BUFFER_SIZE/2);
 8001578:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800157c:	4870      	ldr	r0, [pc, #448]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 800157e:	f000 fa09 	bl	8001994 <calculata_mean_float>
 8001582:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    //     ADC_buffer_temp_float[i] = ADC_buffer_temp_float[i] - mean;
    // }


  // iterate over the first half of the buffer
  for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800158c:	e0bd      	b.n	800170a <HAL_ADC_ConvHalfCpltCallback+0x1e2>
  {

    // remove the DC offset
    ADC_buffer_temp_float[i] = ADC_buffer_temp_float[i] - mean;
 800158e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001592:	4a6b      	ldr	r2, [pc, #428]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80015a0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80015a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a8:	4a65      	ldr	r2, [pc, #404]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	edc3 7a00 	vstr	s15, [r3]
    // char buffer[50];
    // sprintf(buffer, "Signal2 = %f.\r\n",ADC_buffer_temp_float[i]);
    // HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    // multiply the ADC value with the sine wave value
    ADC_buffer_temp_float[i] = ADC_buffer_temp_float[i]*sineLookupTableFloat[i%100];
 80015b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80015b6:	4a62      	ldr	r2, [pc, #392]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80015c4:	4a5f      	ldr	r2, [pc, #380]	; (8001744 <HAL_ADC_ConvHalfCpltCallback+0x21c>)
 80015c6:	fba2 1203 	umull	r1, r2, r2, r3
 80015ca:	0952      	lsrs	r2, r2, #5
 80015cc:	2164      	movs	r1, #100	; 0x64
 80015ce:	fb01 f202 	mul.w	r2, r1, r2
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	4a5c      	ldr	r2, [pc, #368]	; (8001748 <HAL_ADC_ConvHalfCpltCallback+0x220>)
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	4a55      	ldr	r2, [pc, #340]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	edc3 7a00 	vstr	s15, [r3]

    // IIR filter
    xv[0] = xv[1]; 
 80015f2:	4b56      	ldr	r3, [pc, #344]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a55      	ldr	r2, [pc, #340]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 80015f8:	6013      	str	r3, [r2, #0]
    xv[1] = ADC_buffer_temp_float[i] / GAIN;
 80015fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80015fe:	4a50      	ldr	r2, [pc, #320]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffbe 	bl	8000588 <__aeabi_f2d>
 800160c:	a344      	add	r3, pc, #272	; (adr r3, 8001720 <HAL_ADC_ConvHalfCpltCallback+0x1f8>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff f93b 	bl	800088c <__aeabi_ddiv>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fae3 	bl	8000be8 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	4a49      	ldr	r2, [pc, #292]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001626:	6053      	str	r3, [r2, #4]
    yv[0] = yv[1]; 
 8001628:	4b49      	ldr	r3, [pc, #292]	; (8001750 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a48      	ldr	r2, [pc, #288]	; (8001750 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 800162e:	6013      	str	r3, [r2, #0]
    yv[1] =   (xv[0] + xv[1])
 8001630:	4b46      	ldr	r3, [pc, #280]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_ADC_ConvHalfCpltCallback+0x224>)
 8001638:	edd3 7a01 	vldr	s15, [r3, #4]
 800163c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001640:	ee17 0a90 	vmov	r0, s15
 8001644:	f7fe ffa0 	bl	8000588 <__aeabi_f2d>
 8001648:	4604      	mov	r4, r0
 800164a:	460d      	mov	r5, r1
                  + (  0.9995288721 * yv[0]);
 800164c:	4b40      	ldr	r3, [pc, #256]	; (8001750 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff99 	bl	8000588 <__aeabi_f2d>
 8001656:	a334      	add	r3, pc, #208	; (adr r3, 8001728 <HAL_ADC_ConvHalfCpltCallback+0x200>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe ffec 	bl	8000638 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4620      	mov	r0, r4
 8001666:	4629      	mov	r1, r5
 8001668:	f7fe fe30 	bl	80002cc <__adddf3>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fab8 	bl	8000be8 <__aeabi_d2f>
 8001678:	4603      	mov	r3, r0
    yv[1] =   (xv[0] + xv[1])
 800167a:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 800167c:	6053      	str	r3, [r2, #4]
    ADC_buffer_temp_float[i] = yv[1];
 800167e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001682:	4a33      	ldr	r2, [pc, #204]	; (8001750 <HAL_ADC_ConvHalfCpltCallback+0x228>)
 8001684:	6852      	ldr	r2, [r2, #4]
 8001686:	492e      	ldr	r1, [pc, #184]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	601a      	str	r2, [r3, #0]

    // multiply by the square root of 2
    ADC_buffer_temp_float[i] = ADC_buffer_temp_float[i] * 1.41421356237;
 800168e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001692:	4a2b      	ldr	r2, [pc, #172]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff74 	bl	8000588 <__aeabi_f2d>
 80016a0:	a323      	add	r3, pc, #140	; (adr r3, 8001730 <HAL_ADC_ConvHalfCpltCallback+0x208>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe ffc7 	bl	8000638 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	f8b7 4044 	ldrh.w	r4, [r7, #68]	; 0x44
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff fa97 	bl	8000be8 <__aeabi_d2f>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4920      	ldr	r1, [pc, #128]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 80016be:	00a3      	lsls	r3, r4, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	601a      	str	r2, [r3, #0]
//     sprintf(buffer, "Signal1 = %lu\r\n", ADC_buffer_temp[i]);
//     HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);


      char buffer[50];
      sprintf(buffer, "Signal2 = %f\r\n",ADC_buffer_temp_float[i]);
 80016c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_ADC_ConvHalfCpltCallback+0x218>)
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff59 	bl	8000588 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	f107 000c 	add.w	r0, r7, #12
 80016de:	491d      	ldr	r1, [pc, #116]	; (8001754 <HAL_ADC_ConvHalfCpltCallback+0x22c>)
 80016e0:	f004 fcb8 	bl	8006054 <siprintf>
      //replace_dot_with_comma(buffer);
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fde1 	bl	80002b0 <strlen>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	f107 010c 	add.w	r1, r7, #12
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	4817      	ldr	r0, [pc, #92]	; (8001758 <HAL_ADC_ConvHalfCpltCallback+0x230>)
 80016fc:	f003 fbc6 	bl	8004e8c <HAL_UART_Transmit>
  for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8001700:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001704:	3301      	adds	r3, #1
 8001706:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800170a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800170e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001712:	f4ff af3c 	bcc.w	800158e <HAL_ADC_ConvHalfCpltCallback+0x66>
  }
  // take whole ADC_buffer_temp and transmit it via UART by adding the "Signal1 = " string to every value using sprintf
  //HAL_UART_Transmit(&huart2, (uint8_t*)ADC_buffer_temp, ADC_BUFFER_SIZE/2, HAL_MAX_DELAY);


}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	3748      	adds	r7, #72	; 0x48
 800171c:	46bd      	mov	sp, r7
 800171e:	bdb0      	pop	{r4, r5, r7, pc}
 8001720:	b9841aac 	.word	0xb9841aac
 8001724:	40b09521 	.word	0x40b09521
 8001728:	f92278f8 	.word	0xf92278f8
 800172c:	3feffc23 	.word	0x3feffc23
 8001730:	667f055a 	.word	0x667f055a
 8001734:	3ff6a09e 	.word	0x3ff6a09e
 8001738:	20000000 	.word	0x20000000
 800173c:	457ff000 	.word	0x457ff000
 8001740:	200007d0 	.word	0x200007d0
 8001744:	51eb851f 	.word	0x51eb851f
 8001748:	08008410 	.word	0x08008410
 800174c:	20000310 	.word	0x20000310
 8001750:	20000318 	.word	0x20000318
 8001754:	08008334 	.word	0x08008334
 8001758:	20000d14 	.word	0x20000d14
 800175c:	00000000 	.word	0x00000000

08001760 <HAL_ADC_ConvCpltCallback>:


// callback function for the ADC conversion complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b092      	sub	sp, #72	; 0x48
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

    // prescale the ADC value to  range -3.3V to 3.3V and store it in the ADC_buffer_temp_float
    for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8001768:	2300      	movs	r3, #0
 800176a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800176e:	e01a      	b.n	80017a6 <HAL_ADC_ConvCpltCallback+0x46>
    {
        ADC_buffer_temp_float[i] = (float)ADC_buffer1[i] * 1.0 / 4095.0;
 8001770:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <HAL_ADC_ConvCpltCallback+0x210>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001786:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800178a:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001974 <HAL_ADC_ConvCpltCallback+0x214>
 800178e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001792:	4a79      	ldr	r2, [pc, #484]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 800179c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80017a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017ae:	d3df      	bcc.n	8001770 <HAL_ADC_ConvCpltCallback+0x10>
    }

    // calculate the mean value of the ADC_buffer_temp_float
    float mean = calculata_mean_float(ADC_buffer_temp_float, ADC_BUFFER_SIZE/2);
 80017b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017b4:	4870      	ldr	r0, [pc, #448]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 80017b6:	f000 f8ed 	bl	8001994 <calculata_mean_float>
 80017ba:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
    //     ADC_buffer_temp_float[i] = ADC_buffer_temp_float[i] - mean;
    // }


  // iterate over the first half of the buffer
  for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80017c4:	e0bd      	b.n	8001942 <HAL_ADC_ConvCpltCallback+0x1e2>
  {

    // remove the DC offset
    ADC_buffer_temp_float[i] = ADC_buffer_temp_float[i] - mean;
 80017c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80017ca:	4a6b      	ldr	r2, [pc, #428]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	ed93 7a00 	vldr	s14, [r3]
 80017d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80017d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e0:	4a65      	ldr	r2, [pc, #404]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	edc3 7a00 	vstr	s15, [r3]
    // char buffer[50];
    // sprintf(buffer, "Signal2 = %f.\r\n",ADC_buffer_temp_float[i]);
    // HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

    // multiply the ADC value with the sine wave value
    ADC_buffer_temp_float[i] = ADC_buffer_temp_float[i]*sineLookupTableFloat[i%100];
 80017ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80017ee:	4a62      	ldr	r2, [pc, #392]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80017fc:	4a5f      	ldr	r2, [pc, #380]	; (800197c <HAL_ADC_ConvCpltCallback+0x21c>)
 80017fe:	fba2 1203 	umull	r1, r2, r2, r3
 8001802:	0952      	lsrs	r2, r2, #5
 8001804:	2164      	movs	r1, #100	; 0x64
 8001806:	fb01 f202 	mul.w	r2, r1, r2
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	4a5c      	ldr	r2, [pc, #368]	; (8001980 <HAL_ADC_ConvCpltCallback+0x220>)
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	4a55      	ldr	r2, [pc, #340]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	edc3 7a00 	vstr	s15, [r3]

    // IIR filter
    xv[0] = xv[1]; 
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_ADC_ConvCpltCallback+0x224>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a55      	ldr	r2, [pc, #340]	; (8001984 <HAL_ADC_ConvCpltCallback+0x224>)
 8001830:	6013      	str	r3, [r2, #0]
    xv[1] = ADC_buffer_temp_float[i] / GAIN;
 8001832:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001836:	4a50      	ldr	r2, [pc, #320]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fea2 	bl	8000588 <__aeabi_f2d>
 8001844:	a344      	add	r3, pc, #272	; (adr r3, 8001958 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7ff f81f 	bl	800088c <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f9c7 	bl	8000be8 <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	4a49      	ldr	r2, [pc, #292]	; (8001984 <HAL_ADC_ConvCpltCallback+0x224>)
 800185e:	6053      	str	r3, [r2, #4]
    yv[0] = yv[1]; 
 8001860:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_ADC_ConvCpltCallback+0x228>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a48      	ldr	r2, [pc, #288]	; (8001988 <HAL_ADC_ConvCpltCallback+0x228>)
 8001866:	6013      	str	r3, [r2, #0]
    yv[1] =   (xv[0] + xv[1])
 8001868:	4b46      	ldr	r3, [pc, #280]	; (8001984 <HAL_ADC_ConvCpltCallback+0x224>)
 800186a:	ed93 7a00 	vldr	s14, [r3]
 800186e:	4b45      	ldr	r3, [pc, #276]	; (8001984 <HAL_ADC_ConvCpltCallback+0x224>)
 8001870:	edd3 7a01 	vldr	s15, [r3, #4]
 8001874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001878:	ee17 0a90 	vmov	r0, s15
 800187c:	f7fe fe84 	bl	8000588 <__aeabi_f2d>
 8001880:	4604      	mov	r4, r0
 8001882:	460d      	mov	r5, r1
                  + (  0.9995288721 * yv[0]);
 8001884:	4b40      	ldr	r3, [pc, #256]	; (8001988 <HAL_ADC_ConvCpltCallback+0x228>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe7d 	bl	8000588 <__aeabi_f2d>
 800188e:	a334      	add	r3, pc, #208	; (adr r3, 8001960 <HAL_ADC_ConvCpltCallback+0x200>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe fed0 	bl	8000638 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe fd14 	bl	80002cc <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f99c 	bl	8000be8 <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
    yv[1] =   (xv[0] + xv[1])
 80018b2:	4a35      	ldr	r2, [pc, #212]	; (8001988 <HAL_ADC_ConvCpltCallback+0x228>)
 80018b4:	6053      	str	r3, [r2, #4]
    ADC_buffer_temp_float[i] = yv[1];
 80018b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018ba:	4a33      	ldr	r2, [pc, #204]	; (8001988 <HAL_ADC_ConvCpltCallback+0x228>)
 80018bc:	6852      	ldr	r2, [r2, #4]
 80018be:	492e      	ldr	r1, [pc, #184]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	601a      	str	r2, [r3, #0]

    // multiply by the square root of 2
    ADC_buffer_temp_float[i] = ADC_buffer_temp_float[i] * 1.41421356237;
 80018c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018ca:	4a2b      	ldr	r2, [pc, #172]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe58 	bl	8000588 <__aeabi_f2d>
 80018d8:	a323      	add	r3, pc, #140	; (adr r3, 8001968 <HAL_ADC_ConvCpltCallback+0x208>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe feab 	bl	8000638 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	f8b7 4044 	ldrh.w	r4, [r7, #68]	; 0x44
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff f97b 	bl	8000be8 <__aeabi_d2f>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4920      	ldr	r1, [pc, #128]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 80018f6:	00a3      	lsls	r3, r4, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	601a      	str	r2, [r3, #0]
//     sprintf(buffer, "Signal1 = %lu\r\n", ADC_buffer_temp[i]);
//     HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);


      char buffer[50];
      sprintf(buffer, "Signal2 = %f\r\n",ADC_buffer_temp_float[i]);
 80018fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_ADC_ConvCpltCallback+0x218>)
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe3d 	bl	8000588 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	f107 000c 	add.w	r0, r7, #12
 8001916:	491d      	ldr	r1, [pc, #116]	; (800198c <HAL_ADC_ConvCpltCallback+0x22c>)
 8001918:	f004 fb9c 	bl	8006054 <siprintf>
      //replace_dot_with_comma(buffer);
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fcc5 	bl	80002b0 <strlen>
 8001926:	4603      	mov	r3, r0
 8001928:	b29a      	uxth	r2, r3
 800192a:	f107 010c 	add.w	r1, r7, #12
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	4817      	ldr	r0, [pc, #92]	; (8001990 <HAL_ADC_ConvCpltCallback+0x230>)
 8001934:	f003 faaa 	bl	8004e8c <HAL_UART_Transmit>
  for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8001938:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800193c:	3301      	adds	r3, #1
 800193e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001942:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001946:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800194a:	f4ff af3c 	bcc.w	80017c6 <HAL_ADC_ConvCpltCallback+0x66>
  }
  // take whole ADC_buffer_temp and transmit it via UART by adding the "Signal1 = " string to every value using sprintf
  //HAL_UART_Transmit(&huart2, (uint8_t*)ADC_buffer_temp, ADC_BUFFER_SIZE/2, HAL_MAX_DELAY);


}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	3748      	adds	r7, #72	; 0x48
 8001954:	46bd      	mov	sp, r7
 8001956:	bdb0      	pop	{r4, r5, r7, pc}
 8001958:	b9841aac 	.word	0xb9841aac
 800195c:	40b09521 	.word	0x40b09521
 8001960:	f92278f8 	.word	0xf92278f8
 8001964:	3feffc23 	.word	0x3feffc23
 8001968:	667f055a 	.word	0x667f055a
 800196c:	3ff6a09e 	.word	0x3ff6a09e
 8001970:	20000000 	.word	0x20000000
 8001974:	457ff000 	.word	0x457ff000
 8001978:	200007d0 	.word	0x200007d0
 800197c:	51eb851f 	.word	0x51eb851f
 8001980:	08008410 	.word	0x08008410
 8001984:	20000310 	.word	0x20000310
 8001988:	20000318 	.word	0x20000318
 800198c:	08008334 	.word	0x08008334
 8001990:	20000d14 	.word	0x20000d14

08001994 <calculata_mean_float>:

    // Calculate mean
    return (uint16_t)(total_sum / num_samples);
}

float calculata_mean_float(float* samples, uint16_t num_samples) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b090      	sub	sp, #64	; 0x40
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
    float partial_sums[NUM_CHUNKS] = {0};
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	2228      	movs	r2, #40	; 0x28
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fbb6 	bl	800611a <memset>
    float total_sum = 0;
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint16_t chunk_size = num_samples / NUM_CHUNKS;
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	4a3e      	ldr	r2, [pc, #248]	; (8001ab0 <calculata_mean_float+0x11c>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	867b      	strh	r3, [r7, #50]	; 0x32

    // Calculate partial sums
    for (uint16_t i = 0; i < NUM_CHUNKS; i++) {
 80019c0:	2300      	movs	r3, #0
 80019c2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80019c4:	e027      	b.n	8001a16 <calculata_mean_float+0x82>
        for (uint16_t j = 0; j < chunk_size; j++) {
 80019c6:	2300      	movs	r3, #0
 80019c8:	873b      	strh	r3, [r7, #56]	; 0x38
 80019ca:	e01d      	b.n	8001a08 <calculata_mean_float+0x74>
            partial_sums[i] += samples[i * chunk_size + j];
 80019cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	3340      	adds	r3, #64	; 0x40
 80019d2:	443b      	add	r3, r7
 80019d4:	3b38      	subs	r3, #56	; 0x38
 80019d6:	ed93 7a00 	vldr	s14, [r3]
 80019da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80019dc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80019de:	fb03 f202 	mul.w	r2, r3, r2
 80019e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	4413      	add	r3, r2
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	3340      	adds	r3, #64	; 0x40
 80019fa:	443b      	add	r3, r7
 80019fc:	3b38      	subs	r3, #56	; 0x38
 80019fe:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t j = 0; j < chunk_size; j++) {
 8001a02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a04:	3301      	adds	r3, #1
 8001a06:	873b      	strh	r3, [r7, #56]	; 0x38
 8001a08:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001a0a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d3dd      	bcc.n	80019cc <calculata_mean_float+0x38>
    for (uint16_t i = 0; i < NUM_CHUNKS; i++) {
 8001a10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001a12:	3301      	adds	r3, #1
 8001a14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001a16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d9d4      	bls.n	80019c6 <calculata_mean_float+0x32>
        }
    }

    // Combine partial sums
    for (uint16_t i = 0; i < NUM_CHUNKS; i++) {
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a20:	e00f      	b.n	8001a42 <calculata_mean_float+0xae>
        total_sum += partial_sums[i];
 8001a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	3340      	adds	r3, #64	; 0x40
 8001a28:	443b      	add	r3, r7
 8001a2a:	3b38      	subs	r3, #56	; 0x38
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a38:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (uint16_t i = 0; i < NUM_CHUNKS; i++) {
 8001a3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a3e:	3301      	adds	r3, #1
 8001a40:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a44:	2b09      	cmp	r3, #9
 8001a46:	d9ec      	bls.n	8001a22 <calculata_mean_float+0x8e>
    }

    // Handle any remaining samples
    uint16_t remaining_samples = num_samples % NUM_CHUNKS;
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <calculata_mean_float+0x11c>)
 8001a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a50:	08d9      	lsrs	r1, r3, #3
 8001a52:	460b      	mov	r3, r1
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	863b      	strh	r3, [r7, #48]	; 0x30
    for (uint16_t i = num_samples - remaining_samples; i < num_samples; i++) {
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001a66:	e00e      	b.n	8001a86 <calculata_mean_float+0xf2>
        total_sum += samples[i];
 8001a68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for (uint16_t i = num_samples - remaining_samples; i < num_samples; i++) {
 8001a80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a82:	3301      	adds	r3, #1
 8001a84:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001a86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3ec      	bcc.n	8001a68 <calculata_mean_float+0xd4>
    }

    // Calculate mean
    return total_sum / num_samples;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001a9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001aa0:	eef0 7a66 	vmov.f32	s15, s13
}
 8001aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa8:	3740      	adds	r7, #64	; 0x40
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	cccccccd 	.word	0xcccccccd

08001ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001abc:	e7fe      	b.n	8001abc <Error_Handler+0x8>
	...

08001ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <HAL_MspInit+0x4c>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_MspInit+0x4c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <HAL_MspInit+0x4c>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_MspInit+0x4c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001afe:	2007      	movs	r0, #7
 8001b00:	f001 f904 	bl	8002d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800

08001b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler+0x4>

08001b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <MemManage_Handler+0x4>

08001b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5c:	f000 fab4 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA1_Stream5_IRQHandler+0x10>)
 8001b6a:	f001 fbfd 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002b0 	.word	0x200002b0

08001b78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <ADC_IRQHandler+0x10>)
 8001b7e:	f000 fb06 	bl	800218e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200001f4 	.word	0x200001f4

08001b8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA2_Stream0_IRQHandler+0x10>)
 8001b92:	f001 fbe9 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	2000023c 	.word	0x2000023c

08001ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return 1;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_kill>:

int _kill(int pid, int sig)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bba:	f004 fb01 	bl	80061c0 <__errno>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2216      	movs	r2, #22
 8001bc2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_exit>:

void _exit (int status)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffe7 	bl	8001bb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be2:	e7fe      	b.n	8001be2 <_exit+0x12>

08001be4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00a      	b.n	8001c0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bf6:	f3af 8000 	nop.w
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	b2ca      	uxtb	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbf0      	blt.n	8001bf6 <_read+0x12>
  }

  return len;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e009      	b.n	8001c44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60ba      	str	r2, [r7, #8]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbf1      	blt.n	8001c30 <_write+0x12>
  }
  return len;
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_close>:

int _close(int file)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_isatty>:

int _isatty(int file)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <_sbrk+0x5c>)
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <_sbrk+0x60>)
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <_sbrk+0x64>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <_sbrk+0x68>)
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d207      	bcs.n	8001d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf0:	f004 fa66 	bl	80061c0 <__errno>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	e009      	b.n	8001d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <_sbrk+0x64>)
 8001d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20020000 	.word	0x20020000
 8001d20:	00000400 	.word	0x00000400
 8001d24:	20000c80 	.word	0x20000c80
 8001d28:	20000eb0 	.word	0x20000eb0

08001d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <SystemInit+0x20>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <SystemInit+0x20>)
 8001d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001d76:	2229      	movs	r2, #41	; 0x29
 8001d78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2-1;
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001d94:	f002 fce8 	bl	8004768 <HAL_TIM_Base_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f7ff fe89 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	4619      	mov	r1, r3
 8001dae:	480d      	ldr	r0, [pc, #52]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001db0:	f002 fd92 	bl	80048d8 <HAL_TIM_ConfigClockSource>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001dba:	f7ff fe7b 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_TIM2_Init+0x94>)
 8001dcc:	f002 ff92 	bl	8004cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001dd6:	f7ff fe6d 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000c84 	.word	0x20000c84

08001de8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e06:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <MX_TIM3_Init+0x94>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e0c:	2229      	movs	r2, #41	; 0x29
 8001e0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2-1;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e2a:	f002 fc9d 	bl	8004768 <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001e34:	f7ff fe3e 	bl	8001ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	4619      	mov	r1, r3
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e46:	f002 fd47 	bl	80048d8 <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001e50:	f7ff fe30 	bl	8001ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e54:	2320      	movs	r3, #32
 8001e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_TIM3_Init+0x90>)
 8001e62:	f002 ff47 	bl	8004cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001e6c:	f7ff fe22 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000ccc 	.word	0x20000ccc
 8001e7c:	40000400 	.word	0x40000400

08001e80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_TIM_Base_MspInit+0x64>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <HAL_TIM_Base_MspInit+0x64>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_TIM_Base_MspInit+0x64>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001eae:	e012      	b.n	8001ed6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_TIM_Base_MspInit+0x68>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_TIM_Base_MspInit+0x64>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_TIM_Base_MspInit+0x64>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_TIM_Base_MspInit+0x64>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40000400 	.word	0x40000400

08001eec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <MX_USART2_UART_Init+0x50>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f24:	f002 ff62 	bl	8004dec <HAL_UART_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f2e:	f7ff fdc1 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000d14 	.word	0x20000d14
 8001f3c:	40004400 	.word	0x40004400

08001f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_UART_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12b      	bne.n	8001fba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001faa:	2307      	movs	r3, #7
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_UART_MspInit+0x8c>)
 8001fb6:	f001 fc41 	bl	800383c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40004400 	.word	0x40004400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fd4:	f7ff feaa 	bl	8001d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fda:	490d      	ldr	r1, [pc, #52]	; (8002010 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	; (800201c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f004 f8e5 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002002:	f7ff f9d7 	bl	80013b4 <main>
  bx  lr    
 8002006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002014:	08008944 	.word	0x08008944
  ldr r2, =_sbss
 8002018:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800201c:	20000eac 	.word	0x20000eac

08002020 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <CAN1_RX0_IRQHandler>
	...

08002024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_Init+0x40>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_Init+0x40>)
 800203a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_Init+0x40>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 fe5d 	bl	8002d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f808 	bl	8002068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff fd32 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x54>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x58>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	fbb2 f3f3 	udiv	r3, r2, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fe75 	bl	8002d76 <HAL_SYSTICK_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00e      	b.n	80020b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d80a      	bhi.n	80020b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800209c:	2200      	movs	r2, #0
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f000 fe3d 	bl	8002d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a8:	4a06      	ldr	r2, [pc, #24]	; (80020c4 <HAL_InitTick+0x5c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000004 	.word	0x20000004
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	20000008 	.word	0x20000008

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	20000d5c 	.word	0x20000d5c

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000d5c 	.word	0x20000d5c

08002108 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e033      	b.n	8002186 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe ff7e 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800214e:	f023 0302 	bic.w	r3, r3, #2
 8002152:	f043 0202 	orr.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fb7e 	bl	800285c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
 8002176:	e001      	b.n	800217c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d049      	beq.n	8002258 <HAL_ADC_IRQHandler+0xca>
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d046      	beq.n	8002258 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d12b      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d127      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002210:	2b00      	cmp	r3, #0
 8002212:	d119      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0220 	bic.w	r2, r2, #32
 8002222:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fa89 	bl	8001760 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0212 	mvn.w	r2, #18
 8002256:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d057      	beq.n	800231e <HAL_ADC_IRQHandler+0x190>
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d054      	beq.n	800231e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d139      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12b      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d124      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11d      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d119      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fc22 	bl	8002b58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 020c 	mvn.w	r2, #12
 800231c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10d      	bne.n	8002364 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f93b 	bl	80025d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f06f 0201 	mvn.w	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002372:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d015      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x218>
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f043 0202 	orr.w	r2, r3, #2
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0220 	mvn.w	r2, #32
 8002394:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f924 	bl	80025e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0220 	mvn.w	r2, #32
 80023a4:	601a      	str	r2, [r3, #0]
  }
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_Start_DMA+0x1e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e0e9      	b.n	80025a2 <HAL_ADC_Start_DMA+0x1f2>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d018      	beq.n	8002416 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023f4:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_ADC_Start_DMA+0x1fc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a6d      	ldr	r2, [pc, #436]	; (80025b0 <HAL_ADC_Start_DMA+0x200>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0c9a      	lsrs	r2, r3, #18
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002408:	e002      	b.n	8002410 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3b01      	subs	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f9      	bne.n	800240a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002424:	d107      	bne.n	8002436 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002434:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 80a1 	bne.w	8002588 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002470:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002484:	d106      	bne.n	8002494 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f023 0206 	bic.w	r2, r3, #6
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
 8002492:	e002      	b.n	800249a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024a2:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <HAL_ADC_Start_DMA+0x204>)
 80024a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <HAL_ADC_Start_DMA+0x208>)
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	4a42      	ldr	r2, [pc, #264]	; (80025bc <HAL_ADC_Start_DMA+0x20c>)
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	4a41      	ldr	r2, [pc, #260]	; (80025c0 <HAL_ADC_Start_DMA+0x210>)
 80024bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024d6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	334c      	adds	r3, #76	; 0x4c
 80024f2:	4619      	mov	r1, r3
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f000 fede 	bl	80032b8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	2b00      	cmp	r3, #0
 8002506:	d12a      	bne.n	800255e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2d      	ldr	r2, [pc, #180]	; (80025c4 <HAL_ADC_Start_DMA+0x214>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d015      	beq.n	800253e <HAL_ADC_Start_DMA+0x18e>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2c      	ldr	r2, [pc, #176]	; (80025c8 <HAL_ADC_Start_DMA+0x218>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d105      	bne.n	8002528 <HAL_ADC_Start_DMA+0x178>
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_ADC_Start_DMA+0x204>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a27      	ldr	r2, [pc, #156]	; (80025cc <HAL_ADC_Start_DMA+0x21c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d136      	bne.n	80025a0 <HAL_ADC_Start_DMA+0x1f0>
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_ADC_Start_DMA+0x204>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d130      	bne.n	80025a0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d129      	bne.n	80025a0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	e020      	b.n	80025a0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_ADC_Start_DMA+0x214>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d11b      	bne.n	80025a0 <HAL_ADC_Start_DMA+0x1f0>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d114      	bne.n	80025a0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	e00b      	b.n	80025a0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f043 0210 	orr.w	r2, r3, #16
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000004 	.word	0x20000004
 80025b0:	431bde83 	.word	0x431bde83
 80025b4:	40012300 	.word	0x40012300
 80025b8:	08002a55 	.word	0x08002a55
 80025bc:	08002b0f 	.word	0x08002b0f
 80025c0:	08002b2b 	.word	0x08002b2b
 80025c4:	40012000 	.word	0x40012000
 80025c8:	40012100 	.word	0x40012100
 80025cc:	40012200 	.word	0x40012200

080025d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1c>
 8002610:	2302      	movs	r3, #2
 8002612:	e113      	b.n	800283c <HAL_ADC_ConfigChannel+0x244>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d925      	bls.n	8002670 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	3b1e      	subs	r3, #30
 800263a:	2207      	movs	r2, #7
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43da      	mvns	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	400a      	ands	r2, r1
 8002648:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	4618      	mov	r0, r3
 800265c:	4603      	mov	r3, r0
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4403      	add	r3, r0
 8002662:	3b1e      	subs	r3, #30
 8002664:	409a      	lsls	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	e022      	b.n	80026b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6919      	ldr	r1, [r3, #16]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	2207      	movs	r2, #7
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	400a      	ands	r2, r1
 8002692:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6919      	ldr	r1, [r3, #16]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4618      	mov	r0, r3
 80026a6:	4603      	mov	r3, r0
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4403      	add	r3, r0
 80026ac:	409a      	lsls	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d824      	bhi.n	8002708 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	3b05      	subs	r3, #5
 80026d0:	221f      	movs	r2, #31
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	400a      	ands	r2, r1
 80026de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	4618      	mov	r0, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	3b05      	subs	r3, #5
 80026fa:	fa00 f203 	lsl.w	r2, r0, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	635a      	str	r2, [r3, #52]	; 0x34
 8002706:	e04c      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b0c      	cmp	r3, #12
 800270e:	d824      	bhi.n	800275a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	3b23      	subs	r3, #35	; 0x23
 8002722:	221f      	movs	r2, #31
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43da      	mvns	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	400a      	ands	r2, r1
 8002730:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	b29b      	uxth	r3, r3
 800273e:	4618      	mov	r0, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	3b23      	subs	r3, #35	; 0x23
 800274c:	fa00 f203 	lsl.w	r2, r0, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
 8002758:	e023      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3b41      	subs	r3, #65	; 0x41
 800276c:	221f      	movs	r2, #31
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	400a      	ands	r2, r1
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4618      	mov	r0, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	3b41      	subs	r3, #65	; 0x41
 8002796:	fa00 f203 	lsl.w	r2, r0, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a2:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_ADC_ConfigChannel+0x250>)
 80027a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a28      	ldr	r2, [pc, #160]	; (800284c <HAL_ADC_ConfigChannel+0x254>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d10f      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1d8>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b12      	cmp	r3, #18
 80027b6:	d10b      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_ADC_ConfigChannel+0x254>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d12b      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x23a>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_ADC_ConfigChannel+0x258>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x1f4>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b11      	cmp	r3, #17
 80027ea:	d122      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_ADC_ConfigChannel+0x258>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d111      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_ADC_ConfigChannel+0x25c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_ADC_ConfigChannel+0x260>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	0c9a      	lsrs	r2, r3, #18
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002824:	e002      	b.n	800282c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3b01      	subs	r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	40012300 	.word	0x40012300
 800284c:	40012000 	.word	0x40012000
 8002850:	10000012 	.word	0x10000012
 8002854:	20000004 	.word	0x20000004
 8002858:	431bde83 	.word	0x431bde83

0800285c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <ADC_Init+0x1f0>)
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002890:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <ADC_Init+0x1f4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002902:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002924:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6899      	ldr	r1, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e00f      	b.n	800295a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002948:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002958:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0202 	bic.w	r2, r2, #2
 8002968:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
 8002974:	005a      	lsls	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002996:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	3b01      	subs	r3, #1
 80029b4:	035a      	lsls	r2, r3, #13
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	e007      	b.n	80029d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	051a      	lsls	r2, r3, #20
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6899      	ldr	r1, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a12:	025a      	lsls	r2, r3, #9
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	029a      	lsls	r2, r3, #10
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40012300 	.word	0x40012300
 8002a50:	0f000001 	.word	0x0f000001

08002a54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d13c      	bne.n	8002ae8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d12b      	bne.n	8002ae0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d127      	bne.n	8002ae0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d119      	bne.n	8002ae0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0220 	bic.w	r2, r2, #32
 8002aba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7fe fe3d 	bl	8001760 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ae6:	e00e      	b.n	8002b06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff fd75 	bl	80025e4 <HAL_ADC_ErrorCallback>
}
 8002afa:	e004      	b.n	8002b06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7fe fd03 	bl	8001528 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2240      	movs	r2, #64	; 0x40
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff fd4a 	bl	80025e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	db0b      	blt.n	8002bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4907      	ldr	r1, [pc, #28]	; (8002c08 <__NVIC_EnableIRQ+0x38>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000e100 	.word	0xe000e100

08002c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db0a      	blt.n	8002c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	490c      	ldr	r1, [pc, #48]	; (8002c58 <__NVIC_SetPriority+0x4c>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	0112      	lsls	r2, r2, #4
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c34:	e00a      	b.n	8002c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <__NVIC_SetPriority+0x50>)
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	3b04      	subs	r3, #4
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	440b      	add	r3, r1
 8002c4a:	761a      	strb	r2, [r3, #24]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000e100 	.word	0xe000e100
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f1c3 0307 	rsb	r3, r3, #7
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf28      	it	cs
 8002c7e:	2304      	movcs	r3, #4
 8002c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3304      	adds	r3, #4
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d902      	bls.n	8002c90 <NVIC_EncodePriority+0x30>
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3b03      	subs	r3, #3
 8002c8e:	e000      	b.n	8002c92 <NVIC_EncodePriority+0x32>
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43d9      	mvns	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	4313      	orrs	r3, r2
         );
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3724      	adds	r7, #36	; 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd8:	d301      	bcc.n	8002cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e00f      	b.n	8002cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <SysTick_Config+0x40>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	f7ff ff8e 	bl	8002c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <SysTick_Config+0x40>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf6:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <SysTick_Config+0x40>)
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	e000e010 	.word	0xe000e010

08002d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff ff29 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d34:	f7ff ff3e 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f7ff ff8e 	bl	8002c60 <NVIC_EncodePriority>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff5d 	bl	8002c0c <__NVIC_SetPriority>
}
 8002d52:	bf00      	nop
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff31 	bl	8002bd0 <__NVIC_EnableIRQ>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff ffa2 	bl	8002cc8 <SysTick_Config>
 8002d84:	4603      	mov	r3, r0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e014      	b.n	8002dca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	791b      	ldrb	r3, [r3, #4]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7fe f9e3 	bl	800117c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0a2      	b.n	8002f36 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	795b      	ldrb	r3, [r3, #5]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_DAC_Start_DMA+0x28>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e09c      	b.n	8002f36 <HAL_DAC_Start_DMA+0x162>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2202      	movs	r2, #2
 8002e06:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d129      	bne.n	8002e62 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <HAL_DAC_Start_DMA+0x16c>)
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	; (8002f44 <HAL_DAC_Start_DMA+0x170>)
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	4a49      	ldr	r2, [pc, #292]	; (8002f48 <HAL_DAC_Start_DMA+0x174>)
 8002e24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e34:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_DAC_Start_DMA+0x70>
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d005      	beq.n	8002e4e <HAL_DAC_Start_DMA+0x7a>
 8002e42:	e009      	b.n	8002e58 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3308      	adds	r3, #8
 8002e4a:	613b      	str	r3, [r7, #16]
        break;
 8002e4c:	e033      	b.n	8002eb6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	613b      	str	r3, [r7, #16]
        break;
 8002e56:	e02e      	b.n	8002eb6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	613b      	str	r3, [r7, #16]
        break;
 8002e60:	e029      	b.n	8002eb6 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a39      	ldr	r2, [pc, #228]	; (8002f4c <HAL_DAC_Start_DMA+0x178>)
 8002e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	4a38      	ldr	r2, [pc, #224]	; (8002f50 <HAL_DAC_Start_DMA+0x17c>)
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a37      	ldr	r2, [pc, #220]	; (8002f54 <HAL_DAC_Start_DMA+0x180>)
 8002e78:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e88:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_DAC_Start_DMA+0xc4>
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d005      	beq.n	8002ea2 <HAL_DAC_Start_DMA+0xce>
 8002e96:	e009      	b.n	8002eac <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3314      	adds	r3, #20
 8002e9e:	613b      	str	r3, [r7, #16]
        break;
 8002ea0:	e009      	b.n	8002eb6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	613b      	str	r3, [r7, #16]
        break;
 8002eaa:	e004      	b.n	8002eb6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	331c      	adds	r3, #28
 8002eb2:	613b      	str	r3, [r7, #16]
        break;
 8002eb4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6898      	ldr	r0, [r3, #8]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	f000 f9ef 	bl	80032b8 <HAL_DMA_Start_IT>
 8002eda:	4603      	mov	r3, r0
 8002edc:	75fb      	strb	r3, [r7, #23]
 8002ede:	e010      	b.n	8002f02 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002eee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68d8      	ldr	r0, [r3, #12]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	f000 f9dd 	bl	80032b8 <HAL_DMA_Start_IT>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002f08:	7dfb      	ldrb	r3, [r7, #23]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e005      	b.n	8002f34 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	08003047 	.word	0x08003047
 8002f44:	08003069 	.word	0x08003069
 8002f48:	08003085 	.word	0x08003085
 8002f4c:	080030ef 	.word	0x080030ef
 8002f50:	08003111 	.word	0x08003111
 8002f54:	0800312d 	.word	0x0800312d

08002f58 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b089      	sub	sp, #36	; 0x24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_DAC_ConfigChannel+0x1c>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e042      	b.n	800303a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	795b      	ldrb	r3, [r3, #5]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_DAC_ConfigChannel+0x2c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e03c      	b.n	800303a <HAL_DAC_ConfigChannel+0xa6>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	22c0      	movs	r2, #192	; 0xc0
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	400a      	ands	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003038:	7ffb      	ldrb	r3, [r7, #31]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff ff7f 	bl	8002f58 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	711a      	strb	r2, [r3, #4]
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff ff78 	bl	8002f6c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff ff6e 	bl	8002f80 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	711a      	strb	r2, [r3, #4]
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff ffd8 	bl	80030b2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	711a      	strb	r2, [r3, #4]
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff ffd1 	bl	80030c6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff ffc7 	bl	80030da <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	711a      	strb	r2, [r3, #4]
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003168:	f7fe ffc2 	bl	80020f0 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e099      	b.n	80032ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003198:	e00f      	b.n	80031ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800319a:	f7fe ffa9 	bl	80020f0 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d908      	bls.n	80031ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2203      	movs	r2, #3
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e078      	b.n	80032ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e8      	bne.n	800319a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <HAL_DMA_Init+0x158>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2b04      	cmp	r3, #4
 8003212:	d107      	bne.n	8003224 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4313      	orrs	r3, r2
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0307 	bic.w	r3, r3, #7
 800323a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b04      	cmp	r3, #4
 800324c:	d117      	bne.n	800327e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00e      	beq.n	800327e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fa6f 	bl	8003744 <DMA_CheckFifoParam>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2240      	movs	r2, #64	; 0x40
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800327a:	2301      	movs	r3, #1
 800327c:	e016      	b.n	80032ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fa26 	bl	80036d8 <DMA_CalcBaseAndBitshift>
 800328c:	4603      	mov	r3, r0
 800328e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	223f      	movs	r2, #63	; 0x3f
 8003296:	409a      	lsls	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	f010803f 	.word	0xf010803f

080032b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_DMA_Start_IT+0x26>
 80032da:	2302      	movs	r3, #2
 80032dc:	e040      	b.n	8003360 <HAL_DMA_Start_IT+0xa8>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d12f      	bne.n	8003352 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f9b8 	bl	800367c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	223f      	movs	r2, #63	; 0x3f
 8003312:	409a      	lsls	r2, r3
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0216 	orr.w	r2, r2, #22
 8003326:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e005      	b.n	800335e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800335a:	2302      	movs	r3, #2
 800335c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800335e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003374:	4b8e      	ldr	r3, [pc, #568]	; (80035b0 <HAL_DMA_IRQHandler+0x248>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a8e      	ldr	r2, [pc, #568]	; (80035b4 <HAL_DMA_IRQHandler+0x24c>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2208      	movs	r2, #8
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01a      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	2208      	movs	r2, #8
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f043 0201 	orr.w	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	2201      	movs	r2, #1
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	2201      	movs	r2, #1
 80033f8:	409a      	lsls	r2, r3
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	2204      	movs	r2, #4
 8003410:	409a      	lsls	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	2204      	movs	r2, #4
 800342e:	409a      	lsls	r2, r3
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003444:	2210      	movs	r2, #16
 8003446:	409a      	lsls	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d043      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03c      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003462:	2210      	movs	r2, #16
 8003464:	409a      	lsls	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d018      	beq.n	80034aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d108      	bne.n	8003498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d024      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
 8003496:	e01f      	b.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01b      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e016      	b.n	80034d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0208 	bic.w	r2, r2, #8
 80034c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2220      	movs	r2, #32
 80034de:	409a      	lsls	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 808f 	beq.w	8003608 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8087 	beq.w	8003608 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	2220      	movs	r2, #32
 8003500:	409a      	lsls	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b05      	cmp	r3, #5
 8003510:	d136      	bne.n	8003580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0216 	bic.w	r2, r2, #22
 8003520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695a      	ldr	r2, [r3, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_DMA_IRQHandler+0x1da>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	223f      	movs	r2, #63	; 0x3f
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	d07e      	beq.n	8003674 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
        }
        return;
 800357e:	e079      	b.n	8003674 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10d      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d031      	beq.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	4798      	blx	r3
 80035ac:	e02c      	b.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
 80035ae:	bf00      	nop
 80035b0:	20000004 	.word	0x20000004
 80035b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d023      	beq.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
 80035c8:	e01e      	b.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10f      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0210 	bic.w	r2, r2, #16
 80035e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	2b00      	cmp	r3, #0
 800360e:	d032      	beq.n	8003676 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d022      	beq.n	8003662 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2205      	movs	r2, #5
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3301      	adds	r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	d307      	bcc.n	8003650 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f2      	bne.n	8003634 <HAL_DMA_IRQHandler+0x2cc>
 800364e:	e000      	b.n	8003652 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003650:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	e000      	b.n	8003676 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003674:	bf00      	nop
    }
  }
}
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003698:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d108      	bne.n	80036bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036ba:	e007      	b.n	80036cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	3b10      	subs	r3, #16
 80036e8:	4a14      	ldr	r2, [pc, #80]	; (800373c <DMA_CalcBaseAndBitshift+0x64>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f2:	4a13      	ldr	r2, [pc, #76]	; (8003740 <DMA_CalcBaseAndBitshift+0x68>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b03      	cmp	r3, #3
 8003704:	d909      	bls.n	800371a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800370e:	f023 0303 	bic.w	r3, r3, #3
 8003712:	1d1a      	adds	r2, r3, #4
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	659a      	str	r2, [r3, #88]	; 0x58
 8003718:	e007      	b.n	800372a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003722:	f023 0303 	bic.w	r3, r3, #3
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	aaaaaaab 	.word	0xaaaaaaab
 8003740:	080085b8 	.word	0x080085b8

08003744 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d11f      	bne.n	800379e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d856      	bhi.n	8003812 <DMA_CheckFifoParam+0xce>
 8003764:	a201      	add	r2, pc, #4	; (adr r2, 800376c <DMA_CheckFifoParam+0x28>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	0800377d 	.word	0x0800377d
 8003770:	0800378f 	.word	0x0800378f
 8003774:	0800377d 	.word	0x0800377d
 8003778:	08003813 	.word	0x08003813
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d046      	beq.n	8003816 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e043      	b.n	8003816 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003796:	d140      	bne.n	800381a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379c:	e03d      	b.n	800381a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a6:	d121      	bne.n	80037ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d837      	bhi.n	800381e <DMA_CheckFifoParam+0xda>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <DMA_CheckFifoParam+0x70>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037cb 	.word	0x080037cb
 80037bc:	080037c5 	.word	0x080037c5
 80037c0:	080037dd 	.word	0x080037dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      break;
 80037c8:	e030      	b.n	800382c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d025      	beq.n	8003822 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037da:	e022      	b.n	8003822 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037e4:	d11f      	bne.n	8003826 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037ea:	e01c      	b.n	8003826 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d903      	bls.n	80037fa <DMA_CheckFifoParam+0xb6>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d003      	beq.n	8003800 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037f8:	e018      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      break;
 80037fe:	e015      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
      break;
 8003810:	e00b      	b.n	800382a <DMA_CheckFifoParam+0xe6>
      break;
 8003812:	bf00      	nop
 8003814:	e00a      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
 8003818:	e008      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e006      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800381e:	bf00      	nop
 8003820:	e004      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;   
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
    }
  } 
  
  return status; 
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop

0800383c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	e165      	b.n	8003b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003858:	2201      	movs	r2, #1
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	429a      	cmp	r2, r3
 8003872:	f040 8154 	bne.w	8003b1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d005      	beq.n	800388e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388a:	2b02      	cmp	r3, #2
 800388c:	d130      	bne.n	80038f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c4:	2201      	movs	r2, #1
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 0201 	and.w	r2, r3, #1
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d017      	beq.n	800392c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d123      	bne.n	8003980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	08da      	lsrs	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3208      	adds	r2, #8
 8003940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	220f      	movs	r2, #15
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	08da      	lsrs	r2, r3, #3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3208      	adds	r2, #8
 800397a:	69b9      	ldr	r1, [r7, #24]
 800397c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	2203      	movs	r2, #3
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0203 	and.w	r2, r3, #3
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80ae 	beq.w	8003b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <HAL_GPIO_Init+0x300>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	4a5c      	ldr	r2, [pc, #368]	; (8003b3c <HAL_GPIO_Init+0x300>)
 80039cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d0:	6453      	str	r3, [r2, #68]	; 0x44
 80039d2:	4b5a      	ldr	r3, [pc, #360]	; (8003b3c <HAL_GPIO_Init+0x300>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039de:	4a58      	ldr	r2, [pc, #352]	; (8003b40 <HAL_GPIO_Init+0x304>)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	089b      	lsrs	r3, r3, #2
 80039e4:	3302      	adds	r3, #2
 80039e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	220f      	movs	r2, #15
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a4f      	ldr	r2, [pc, #316]	; (8003b44 <HAL_GPIO_Init+0x308>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d025      	beq.n	8003a56 <HAL_GPIO_Init+0x21a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4e      	ldr	r2, [pc, #312]	; (8003b48 <HAL_GPIO_Init+0x30c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01f      	beq.n	8003a52 <HAL_GPIO_Init+0x216>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4d      	ldr	r2, [pc, #308]	; (8003b4c <HAL_GPIO_Init+0x310>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d019      	beq.n	8003a4e <HAL_GPIO_Init+0x212>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4c      	ldr	r2, [pc, #304]	; (8003b50 <HAL_GPIO_Init+0x314>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_GPIO_Init+0x20e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4b      	ldr	r2, [pc, #300]	; (8003b54 <HAL_GPIO_Init+0x318>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00d      	beq.n	8003a46 <HAL_GPIO_Init+0x20a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4a      	ldr	r2, [pc, #296]	; (8003b58 <HAL_GPIO_Init+0x31c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <HAL_GPIO_Init+0x206>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a49      	ldr	r2, [pc, #292]	; (8003b5c <HAL_GPIO_Init+0x320>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_GPIO_Init+0x202>
 8003a3a:	2306      	movs	r3, #6
 8003a3c:	e00c      	b.n	8003a58 <HAL_GPIO_Init+0x21c>
 8003a3e:	2307      	movs	r3, #7
 8003a40:	e00a      	b.n	8003a58 <HAL_GPIO_Init+0x21c>
 8003a42:	2305      	movs	r3, #5
 8003a44:	e008      	b.n	8003a58 <HAL_GPIO_Init+0x21c>
 8003a46:	2304      	movs	r3, #4
 8003a48:	e006      	b.n	8003a58 <HAL_GPIO_Init+0x21c>
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e004      	b.n	8003a58 <HAL_GPIO_Init+0x21c>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e002      	b.n	8003a58 <HAL_GPIO_Init+0x21c>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_GPIO_Init+0x21c>
 8003a56:	2300      	movs	r3, #0
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f002 0203 	and.w	r2, r2, #3
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	4093      	lsls	r3, r2
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a68:	4935      	ldr	r1, [pc, #212]	; (8003b40 <HAL_GPIO_Init+0x304>)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	3302      	adds	r3, #2
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a76:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <HAL_GPIO_Init+0x324>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a9a:	4a31      	ldr	r2, [pc, #196]	; (8003b60 <HAL_GPIO_Init+0x324>)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_GPIO_Init+0x324>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac4:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <HAL_GPIO_Init+0x324>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aca:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <HAL_GPIO_Init+0x324>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aee:	4a1c      	ldr	r2, [pc, #112]	; (8003b60 <HAL_GPIO_Init+0x324>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af4:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <HAL_GPIO_Init+0x324>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b18:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <HAL_GPIO_Init+0x324>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	f67f ae96 	bls.w	8003858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3724      	adds	r7, #36	; 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020c00 	.word	0x40020c00
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40021400 	.word	0x40021400
 8003b5c:	40021800 	.word	0x40021800
 8003b60:	40013c00 	.word	0x40013c00

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0cc      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d90c      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b65      	ldr	r3, [pc, #404]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b63      	ldr	r3, [pc, #396]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0b8      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a58      	ldr	r2, [pc, #352]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c04:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b50      	ldr	r3, [pc, #320]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d044      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c36:	4b47      	ldr	r3, [pc, #284]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d119      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b3f      	ldr	r3, [pc, #252]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e067      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c76:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4934      	ldr	r1, [pc, #208]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7fe fa32 	bl	80020f0 <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7fe fa2e 	bl	80020f0 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e04f      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 020c 	and.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1eb      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d20c      	bcs.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e032      	b.n	8003d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	490e      	ldr	r1, [pc, #56]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1e:	f000 f855 	bl	8003dcc <HAL_RCC_GetSysClockFreq>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	490a      	ldr	r1, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003d30:	5ccb      	ldrb	r3, [r1, r3]
 8003d32:	fa22 f303 	lsr.w	r3, r2, r3
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe f992 	bl	8002068 <HAL_InitTick>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023c00 	.word	0x40023c00
 8003d54:	40023800 	.word	0x40023800
 8003d58:	080085a0 	.word	0x080085a0
 8003d5c:	20000004 	.word	0x20000004
 8003d60:	20000008 	.word	0x20000008

08003d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000004 	.word	0x20000004

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	080085b0 	.word	0x080085b0

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffdc 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0b5b      	lsrs	r3, r3, #13
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	080085b0 	.word	0x080085b0

08003dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b0ae      	sub	sp, #184	; 0xb8
 8003dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df2:	4bcb      	ldr	r3, [pc, #812]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	f200 8206 	bhi.w	800420c <HAL_RCC_GetSysClockFreq+0x440>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e3d 	.word	0x08003e3d
 8003e0c:	0800420d 	.word	0x0800420d
 8003e10:	0800420d 	.word	0x0800420d
 8003e14:	0800420d 	.word	0x0800420d
 8003e18:	08003e45 	.word	0x08003e45
 8003e1c:	0800420d 	.word	0x0800420d
 8003e20:	0800420d 	.word	0x0800420d
 8003e24:	0800420d 	.word	0x0800420d
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	0800420d 	.word	0x0800420d
 8003e30:	0800420d 	.word	0x0800420d
 8003e34:	0800420d 	.word	0x0800420d
 8003e38:	0800403d 	.word	0x0800403d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4bb9      	ldr	r3, [pc, #740]	; (8004124 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e42:	e1e7      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e44:	4bb8      	ldr	r3, [pc, #736]	; (8004128 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e4a:	e1e3      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e4c:	4bb4      	ldr	r3, [pc, #720]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e58:	4bb1      	ldr	r3, [pc, #708]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d071      	beq.n	8003f48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e64:	4bae      	ldr	r3, [pc, #696]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	099b      	lsrs	r3, r3, #6
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e70:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	f04f 0000 	mov.w	r0, #0
 8003e92:	f04f 0100 	mov.w	r1, #0
 8003e96:	0159      	lsls	r1, r3, #5
 8003e98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e9c:	0150      	lsls	r0, r2, #5
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	1a51      	subs	r1, r2, r1
 8003ea6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	eb63 0301 	sbc.w	r3, r3, r1
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	018b      	lsls	r3, r1, #6
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	018a      	lsls	r2, r1, #6
 8003eca:	4641      	mov	r1, r8
 8003ecc:	1a51      	subs	r1, r2, r1
 8003ece:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	00cb      	lsls	r3, r1, #3
 8003ee8:	4641      	mov	r1, r8
 8003eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eee:	4641      	mov	r1, r8
 8003ef0:	00ca      	lsls	r2, r1, #3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4622      	mov	r2, r4
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	633b      	str	r3, [r7, #48]	; 0x30
 8003efe:	462b      	mov	r3, r5
 8003f00:	460a      	mov	r2, r1
 8003f02:	eb42 0303 	adc.w	r3, r2, r3
 8003f06:	637b      	str	r3, [r7, #52]	; 0x34
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f14:	4629      	mov	r1, r5
 8003f16:	024b      	lsls	r3, r1, #9
 8003f18:	4621      	mov	r1, r4
 8003f1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f1e:	4621      	mov	r1, r4
 8003f20:	024a      	lsls	r2, r1, #9
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f38:	f7fc fea6 	bl	8000c88 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4613      	mov	r3, r2
 8003f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f46:	e067      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f48:	4b75      	ldr	r3, [pc, #468]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f62:	2300      	movs	r3, #0
 8003f64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	f04f 0000 	mov.w	r0, #0
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	0159      	lsls	r1, r3, #5
 8003f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f7c:	0150      	lsls	r0, r2, #5
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4621      	mov	r1, r4
 8003f84:	1a51      	subs	r1, r2, r1
 8003f86:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f88:	4629      	mov	r1, r5
 8003f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	018b      	lsls	r3, r1, #6
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fa6:	4641      	mov	r1, r8
 8003fa8:	018a      	lsls	r2, r1, #6
 8003faa:	4641      	mov	r1, r8
 8003fac:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fca:	4692      	mov	sl, r2
 8003fcc:	469b      	mov	fp, r3
 8003fce:	4623      	mov	r3, r4
 8003fd0:	eb1a 0303 	adds.w	r3, sl, r3
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003fea:	4629      	mov	r1, r5
 8003fec:	028b      	lsls	r3, r1, #10
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	028a      	lsls	r2, r1, #10
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004000:	2200      	movs	r2, #0
 8004002:	673b      	str	r3, [r7, #112]	; 0x70
 8004004:	677a      	str	r2, [r7, #116]	; 0x74
 8004006:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800400a:	f7fc fe3d 	bl	8000c88 <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4613      	mov	r3, r2
 8004014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004018:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800402a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800402e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004032:	fbb2 f3f3 	udiv	r3, r2, r3
 8004036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800403a:	e0eb      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800403c:	4b38      	ldr	r3, [pc, #224]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004048:	4b35      	ldr	r3, [pc, #212]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d06b      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004054:	4b32      	ldr	r3, [pc, #200]	; (8004120 <HAL_RCC_GetSysClockFreq+0x354>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	2200      	movs	r2, #0
 800405c:	66bb      	str	r3, [r7, #104]	; 0x68
 800405e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	663b      	str	r3, [r7, #96]	; 0x60
 8004068:	2300      	movs	r3, #0
 800406a:	667b      	str	r3, [r7, #100]	; 0x64
 800406c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004070:	4622      	mov	r2, r4
 8004072:	462b      	mov	r3, r5
 8004074:	f04f 0000 	mov.w	r0, #0
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	0159      	lsls	r1, r3, #5
 800407e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004082:	0150      	lsls	r0, r2, #5
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4621      	mov	r1, r4
 800408a:	1a51      	subs	r1, r2, r1
 800408c:	61b9      	str	r1, [r7, #24]
 800408e:	4629      	mov	r1, r5
 8004090:	eb63 0301 	sbc.w	r3, r3, r1
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040a2:	4659      	mov	r1, fp
 80040a4:	018b      	lsls	r3, r1, #6
 80040a6:	4651      	mov	r1, sl
 80040a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ac:	4651      	mov	r1, sl
 80040ae:	018a      	lsls	r2, r1, #6
 80040b0:	4651      	mov	r1, sl
 80040b2:	ebb2 0801 	subs.w	r8, r2, r1
 80040b6:	4659      	mov	r1, fp
 80040b8:	eb63 0901 	sbc.w	r9, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040d0:	4690      	mov	r8, r2
 80040d2:	4699      	mov	r9, r3
 80040d4:	4623      	mov	r3, r4
 80040d6:	eb18 0303 	adds.w	r3, r8, r3
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	462b      	mov	r3, r5
 80040de:	eb49 0303 	adc.w	r3, r9, r3
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80040f0:	4629      	mov	r1, r5
 80040f2:	024b      	lsls	r3, r1, #9
 80040f4:	4621      	mov	r1, r4
 80040f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040fa:	4621      	mov	r1, r4
 80040fc:	024a      	lsls	r2, r1, #9
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004106:	2200      	movs	r2, #0
 8004108:	65bb      	str	r3, [r7, #88]	; 0x58
 800410a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800410c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004110:	f7fc fdba 	bl	8000c88 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4613      	mov	r3, r2
 800411a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800411e:	e065      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x420>
 8004120:	40023800 	.word	0x40023800
 8004124:	00f42400 	.word	0x00f42400
 8004128:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412c:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_RCC_GetSysClockFreq+0x458>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	099b      	lsrs	r3, r3, #6
 8004132:	2200      	movs	r2, #0
 8004134:	4618      	mov	r0, r3
 8004136:	4611      	mov	r1, r2
 8004138:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800413c:	653b      	str	r3, [r7, #80]	; 0x50
 800413e:	2300      	movs	r3, #0
 8004140:	657b      	str	r3, [r7, #84]	; 0x54
 8004142:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004146:	4642      	mov	r2, r8
 8004148:	464b      	mov	r3, r9
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	0159      	lsls	r1, r3, #5
 8004154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004158:	0150      	lsls	r0, r2, #5
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4641      	mov	r1, r8
 8004160:	1a51      	subs	r1, r2, r1
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	4649      	mov	r1, r9
 8004166:	eb63 0301 	sbc.w	r3, r3, r1
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004178:	4659      	mov	r1, fp
 800417a:	018b      	lsls	r3, r1, #6
 800417c:	4651      	mov	r1, sl
 800417e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004182:	4651      	mov	r1, sl
 8004184:	018a      	lsls	r2, r1, #6
 8004186:	4651      	mov	r1, sl
 8004188:	1a54      	subs	r4, r2, r1
 800418a:	4659      	mov	r1, fp
 800418c:	eb63 0501 	sbc.w	r5, r3, r1
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	00eb      	lsls	r3, r5, #3
 800419a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419e:	00e2      	lsls	r2, r4, #3
 80041a0:	4614      	mov	r4, r2
 80041a2:	461d      	mov	r5, r3
 80041a4:	4643      	mov	r3, r8
 80041a6:	18e3      	adds	r3, r4, r3
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	464b      	mov	r3, r9
 80041ac:	eb45 0303 	adc.w	r3, r5, r3
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041be:	4629      	mov	r1, r5
 80041c0:	028b      	lsls	r3, r1, #10
 80041c2:	4621      	mov	r1, r4
 80041c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c8:	4621      	mov	r1, r4
 80041ca:	028a      	lsls	r2, r1, #10
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041d4:	2200      	movs	r2, #0
 80041d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041de:	f7fc fd53 	bl	8000c88 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4613      	mov	r3, r2
 80041e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041ec:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <HAL_RCC_GetSysClockFreq+0x458>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0f1b      	lsrs	r3, r3, #28
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80041fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800420a:	e003      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_GetSysClockFreq+0x45c>)
 800420e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004212:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004218:	4618      	mov	r0, r3
 800421a:	37b8      	adds	r7, #184	; 0xb8
 800421c:	46bd      	mov	sp, r7
 800421e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	00f42400 	.word	0x00f42400

0800422c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e28d      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8083 	beq.w	8004352 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800424c:	4b94      	ldr	r3, [pc, #592]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b04      	cmp	r3, #4
 8004256:	d019      	beq.n	800428c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004258:	4b91      	ldr	r3, [pc, #580]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004260:	2b08      	cmp	r3, #8
 8004262:	d106      	bne.n	8004272 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004264:	4b8e      	ldr	r3, [pc, #568]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004270:	d00c      	beq.n	800428c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004272:	4b8b      	ldr	r3, [pc, #556]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800427a:	2b0c      	cmp	r3, #12
 800427c:	d112      	bne.n	80042a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427e:	4b88      	ldr	r3, [pc, #544]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428a:	d10b      	bne.n	80042a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	4b84      	ldr	r3, [pc, #528]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d05b      	beq.n	8004350 <HAL_RCC_OscConfig+0x124>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d157      	bne.n	8004350 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e25a      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x90>
 80042ae:	4b7c      	ldr	r3, [pc, #496]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a7b      	ldr	r2, [pc, #492]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e01d      	b.n	80042f8 <HAL_RCC_OscConfig+0xcc>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0xb4>
 80042c6:	4b76      	ldr	r3, [pc, #472]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a75      	ldr	r2, [pc, #468]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a72      	ldr	r2, [pc, #456]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0xcc>
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6e      	ldr	r2, [pc, #440]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b6c      	ldr	r3, [pc, #432]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6b      	ldr	r2, [pc, #428]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80042f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fd fef6 	bl	80020f0 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004308:	f7fd fef2 	bl	80020f0 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e21f      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0xdc>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fee2 	bl	80020f0 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004330:	f7fd fede 	bl	80020f0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e20b      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	4b57      	ldr	r3, [pc, #348]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x104>
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d06f      	beq.n	800443e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800435e:	4b50      	ldr	r3, [pc, #320]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b00      	cmp	r3, #0
 8004368:	d017      	beq.n	800439a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800436a:	4b4d      	ldr	r3, [pc, #308]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004372:	2b08      	cmp	r3, #8
 8004374:	d105      	bne.n	8004382 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004376:	4b4a      	ldr	r3, [pc, #296]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00b      	beq.n	800439a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004382:	4b47      	ldr	r3, [pc, #284]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800438a:	2b0c      	cmp	r3, #12
 800438c:	d11c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800438e:	4b44      	ldr	r3, [pc, #272]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d116      	bne.n	80043c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439a:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_RCC_OscConfig+0x186>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d001      	beq.n	80043b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e1d3      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	4b3b      	ldr	r3, [pc, #236]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4937      	ldr	r1, [pc, #220]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	e03a      	b.n	800443e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d0:	4b34      	ldr	r3, [pc, #208]	; (80044a4 <HAL_RCC_OscConfig+0x278>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d6:	f7fd fe8b 	bl	80020f0 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043de:	f7fd fe87 	bl	80020f0 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e1b4      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4925      	ldr	r1, [pc, #148]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
 8004410:	e015      	b.n	800443e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004412:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <HAL_RCC_OscConfig+0x278>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd fe6a 	bl	80020f0 <HAL_GetTick>
 800441c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004420:	f7fd fe66 	bl	80020f0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e193      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d036      	beq.n	80044b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d016      	beq.n	8004480 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004452:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004458:	f7fd fe4a 	bl	80020f0 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004460:	f7fd fe46 	bl	80020f0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e173      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_RCC_OscConfig+0x274>)
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x234>
 800447e:	e01b      	b.n	80044b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_OscConfig+0x27c>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fd fe33 	bl	80020f0 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448c:	e00e      	b.n	80044ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800448e:	f7fd fe2f 	bl	80020f0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d907      	bls.n	80044ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e15c      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
 80044a0:	40023800 	.word	0x40023800
 80044a4:	42470000 	.word	0x42470000
 80044a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ac:	4b8a      	ldr	r3, [pc, #552]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1ea      	bne.n	800448e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8097 	beq.w	80045f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ca:	4b83      	ldr	r3, [pc, #524]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10f      	bne.n	80044f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	4b7f      	ldr	r3, [pc, #508]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	4a7e      	ldr	r2, [pc, #504]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6413      	str	r3, [r2, #64]	; 0x40
 80044e6:	4b7c      	ldr	r3, [pc, #496]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f6:	4b79      	ldr	r3, [pc, #484]	; (80046dc <HAL_RCC_OscConfig+0x4b0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d118      	bne.n	8004534 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004502:	4b76      	ldr	r3, [pc, #472]	; (80046dc <HAL_RCC_OscConfig+0x4b0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a75      	ldr	r2, [pc, #468]	; (80046dc <HAL_RCC_OscConfig+0x4b0>)
 8004508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450e:	f7fd fdef 	bl	80020f0 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004516:	f7fd fdeb 	bl	80020f0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e118      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	4b6c      	ldr	r3, [pc, #432]	; (80046dc <HAL_RCC_OscConfig+0x4b0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d106      	bne.n	800454a <HAL_RCC_OscConfig+0x31e>
 800453c:	4b66      	ldr	r3, [pc, #408]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	4a65      	ldr	r2, [pc, #404]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6713      	str	r3, [r2, #112]	; 0x70
 8004548:	e01c      	b.n	8004584 <HAL_RCC_OscConfig+0x358>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b05      	cmp	r3, #5
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x340>
 8004552:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a60      	ldr	r2, [pc, #384]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004558:	f043 0304 	orr.w	r3, r3, #4
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
 800455e:	4b5e      	ldr	r3, [pc, #376]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a5d      	ldr	r2, [pc, #372]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0x358>
 800456c:	4b5a      	ldr	r3, [pc, #360]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a59      	ldr	r2, [pc, #356]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
 8004578:	4b57      	ldr	r3, [pc, #348]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a56      	ldr	r2, [pc, #344]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 800457e:	f023 0304 	bic.w	r3, r3, #4
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd fdb0 	bl	80020f0 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004592:	e00a      	b.n	80045aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004594:	f7fd fdac 	bl	80020f0 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e0d7      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ee      	beq.n	8004594 <HAL_RCC_OscConfig+0x368>
 80045b6:	e014      	b.n	80045e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fd fd9a 	bl	80020f0 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fd fd96 	bl	80020f0 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0c1      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1ee      	bne.n	80045c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d105      	bne.n	80045f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e8:	4b3b      	ldr	r3, [pc, #236]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	4a3a      	ldr	r2, [pc, #232]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80045ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80ad 	beq.w	8004758 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045fe:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b08      	cmp	r3, #8
 8004608:	d060      	beq.n	80046cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d145      	bne.n	800469e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <HAL_RCC_OscConfig+0x4b4>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fd fd6a 	bl	80020f0 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd fd66 	bl	80020f0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e093      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69da      	ldr	r2, [r3, #28]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	085b      	lsrs	r3, r3, #1
 8004656:	3b01      	subs	r3, #1
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	071b      	lsls	r3, r3, #28
 800466a:	491b      	ldr	r1, [pc, #108]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCC_OscConfig+0x4b4>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd fd3b 	bl	80020f0 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467e:	f7fd fd37 	bl	80020f0 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e064      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x452>
 800469c:	e05c      	b.n	8004758 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCC_OscConfig+0x4b4>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fd24 	bl	80020f0 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd fd20 	bl	80020f0 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e04d      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x480>
 80046ca:	e045      	b.n	8004758 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e040      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046e4:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <HAL_RCC_OscConfig+0x538>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d030      	beq.n	8004754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d129      	bne.n	8004754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d122      	bne.n	8004754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004714:	4013      	ands	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800471a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471c:	4293      	cmp	r3, r2
 800471e:	d119      	bne.n	8004754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	3b01      	subs	r3, #1
 800472e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d10f      	bne.n	8004754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d107      	bne.n	8004754 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d001      	beq.n	8004758 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40023800 	.word	0x40023800

08004768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e041      	b.n	80047fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd fb76 	bl	8001e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f000 f95e 	bl	8004a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d001      	beq.n	8004820 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e046      	b.n	80048ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a23      	ldr	r2, [pc, #140]	; (80048bc <HAL_TIM_Base_Start+0xb4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483a:	d01d      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <HAL_TIM_Base_Start+0xb8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1e      	ldr	r2, [pc, #120]	; (80048c4 <HAL_TIM_Base_Start+0xbc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <HAL_TIM_Base_Start+0xc0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <HAL_TIM_Base_Start+0xc4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_TIM_Base_Start+0xc8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIM_Base_Start+0x70>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_TIM_Base_Start+0xcc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d010      	beq.n	80048ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0201 	orr.w	r2, r2, #1
 8004898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	e007      	b.n	80048ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40010400 	.word	0x40010400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40001800 	.word	0x40001800

080048d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_TIM_ConfigClockSource+0x1c>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e0b4      	b.n	8004a5e <HAL_TIM_ConfigClockSource+0x186>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	d03e      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0xd4>
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004932:	f200 8087 	bhi.w	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493a:	f000 8086 	beq.w	8004a4a <HAL_TIM_ConfigClockSource+0x172>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004942:	d87f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004944:	2b70      	cmp	r3, #112	; 0x70
 8004946:	d01a      	beq.n	800497e <HAL_TIM_ConfigClockSource+0xa6>
 8004948:	2b70      	cmp	r3, #112	; 0x70
 800494a:	d87b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800494c:	2b60      	cmp	r3, #96	; 0x60
 800494e:	d050      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004950:	2b60      	cmp	r3, #96	; 0x60
 8004952:	d877      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004954:	2b50      	cmp	r3, #80	; 0x50
 8004956:	d03c      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004958:	2b50      	cmp	r3, #80	; 0x50
 800495a:	d873      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	d058      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x13a>
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d86f      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d064      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004968:	2b30      	cmp	r3, #48	; 0x30
 800496a:	d86b      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d060      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004970:	2b20      	cmp	r3, #32
 8004972:	d867      	bhi.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d05c      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 8004978:	2b10      	cmp	r3, #16
 800497a:	d05a      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x15a>
 800497c:	e062      	b.n	8004a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800498e:	f000 f991 	bl	8004cb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	609a      	str	r2, [r3, #8]
      break;
 80049aa:	e04f      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049bc:	f000 f97a 	bl	8004cb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ce:	609a      	str	r2, [r3, #8]
      break;
 80049d0:	e03c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049de:	461a      	mov	r2, r3
 80049e0:	f000 f8ee 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2150      	movs	r1, #80	; 0x50
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f947 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 80049f0:	e02c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 f90d 	bl	8004c1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2160      	movs	r1, #96	; 0x60
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f937 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004a10:	e01c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 f8ce 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2140      	movs	r1, #64	; 0x40
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f927 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004a30:	e00c      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f000 f91e 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004a42:	e003      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e000      	b.n	8004a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a46      	ldr	r2, [pc, #280]	; (8004b94 <TIM_Base_SetConfig+0x12c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a86:	d00f      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a43      	ldr	r2, [pc, #268]	; (8004b98 <TIM_Base_SetConfig+0x130>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a42      	ldr	r2, [pc, #264]	; (8004b9c <TIM_Base_SetConfig+0x134>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d007      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a41      	ldr	r2, [pc, #260]	; (8004ba0 <TIM_Base_SetConfig+0x138>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d003      	beq.n	8004aa8 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a40      	ldr	r2, [pc, #256]	; (8004ba4 <TIM_Base_SetConfig+0x13c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d108      	bne.n	8004aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a35      	ldr	r2, [pc, #212]	; (8004b94 <TIM_Base_SetConfig+0x12c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d02b      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d027      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <TIM_Base_SetConfig+0x130>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d023      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a31      	ldr	r2, [pc, #196]	; (8004b9c <TIM_Base_SetConfig+0x134>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01f      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a30      	ldr	r2, [pc, #192]	; (8004ba0 <TIM_Base_SetConfig+0x138>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d01b      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a2f      	ldr	r2, [pc, #188]	; (8004ba4 <TIM_Base_SetConfig+0x13c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d017      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <TIM_Base_SetConfig+0x140>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <TIM_Base_SetConfig+0x144>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00f      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2c      	ldr	r2, [pc, #176]	; (8004bb0 <TIM_Base_SetConfig+0x148>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00b      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2b      	ldr	r2, [pc, #172]	; (8004bb4 <TIM_Base_SetConfig+0x14c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <TIM_Base_SetConfig+0x150>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <TIM_Base_SetConfig+0x154>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d108      	bne.n	8004b2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <TIM_Base_SetConfig+0x12c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_Base_SetConfig+0xf8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <TIM_Base_SetConfig+0x13c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d103      	bne.n	8004b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d105      	bne.n	8004b86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]
  }
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40010400 	.word	0x40010400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800
 8004bb4:	40001800 	.word	0x40001800
 8004bb8:	40001c00 	.word	0x40001c00
 8004bbc:	40002000 	.word	0x40002000

08004bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 030a 	bic.w	r3, r3, #10
 8004bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b087      	sub	sp, #28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f023 0210 	bic.w	r2, r3, #16
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f043 0307 	orr.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e05a      	b.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d01d      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d10c      	bne.n	8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40001800 	.word	0x40001800

08004dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e042      	b.n	8004e84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fd f894 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	; 0x24
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f973 	bl	800511c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695a      	ldr	r2, [r3, #20]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d175      	bne.n	8004f98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_UART_Transmit+0x2c>
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e06e      	b.n	8004f9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2221      	movs	r2, #33	; 0x21
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eca:	f7fd f911 	bl	80020f0 <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d108      	bne.n	8004ef8 <HAL_UART_Transmit+0x6c>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	e003      	b.n	8004f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f00:	e02e      	b.n	8004f60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f848 	bl	8004fa2 <UART_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e03a      	b.n	8004f9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e007      	b.n	8004f52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1cb      	bne.n	8004f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f814 	bl	8004fa2 <UART_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e006      	b.n	8004f9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e000      	b.n	8004f9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
  }
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b086      	sub	sp, #24
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb2:	e03b      	b.n	800502c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d037      	beq.n	800502c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7fd f898 	bl	80020f0 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e03a      	b.n	800504c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d023      	beq.n	800502c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b80      	cmp	r3, #128	; 0x80
 8004fe8:	d020      	beq.n	800502c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d01d      	beq.n	800502c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d116      	bne.n	800502c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f81d 	bl	8005054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2208      	movs	r2, #8
 800501e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e00f      	b.n	800504c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4013      	ands	r3, r2
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	429a      	cmp	r2, r3
 8005048:	d0b4      	beq.n	8004fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b095      	sub	sp, #84	; 0x54
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800507c:	643a      	str	r2, [r7, #64]	; 0x40
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e5      	bne.n	800505c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3314      	adds	r3, #20
 8005096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e5      	bne.n	8005090 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d119      	bne.n	8005100 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	60bb      	str	r3, [r7, #8]
   return(result);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	647b      	str	r3, [r7, #68]	; 0x44
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	330c      	adds	r3, #12
 80050ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ec:	61ba      	str	r2, [r7, #24]
 80050ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6979      	ldr	r1, [r7, #20]
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	613b      	str	r3, [r7, #16]
   return(result);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800510e:	bf00      	nop
 8005110:	3754      	adds	r7, #84	; 0x54
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
	...

0800511c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005120:	b0c0      	sub	sp, #256	; 0x100
 8005122:	af00      	add	r7, sp, #0
 8005124:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	68d9      	ldr	r1, [r3, #12]
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	ea40 0301 	orr.w	r3, r0, r1
 8005144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	431a      	orrs	r2, r3
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005174:	f021 010c 	bic.w	r1, r1, #12
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005182:	430b      	orrs	r3, r1
 8005184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005196:	6999      	ldr	r1, [r3, #24]
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	ea40 0301 	orr.w	r3, r0, r1
 80051a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b8f      	ldr	r3, [pc, #572]	; (80053e8 <UART_SetConfig+0x2cc>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d005      	beq.n	80051bc <UART_SetConfig+0xa0>
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b8d      	ldr	r3, [pc, #564]	; (80053ec <UART_SetConfig+0x2d0>)
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d104      	bne.n	80051c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7fe fdf2 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 80051c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051c4:	e003      	b.n	80051ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c6:	f7fe fdd9 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 80051ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d8:	f040 810c 	bne.w	80053f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051ee:	4622      	mov	r2, r4
 80051f0:	462b      	mov	r3, r5
 80051f2:	1891      	adds	r1, r2, r2
 80051f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80051f6:	415b      	adcs	r3, r3
 80051f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051fe:	4621      	mov	r1, r4
 8005200:	eb12 0801 	adds.w	r8, r2, r1
 8005204:	4629      	mov	r1, r5
 8005206:	eb43 0901 	adc.w	r9, r3, r1
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800521a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800521e:	4690      	mov	r8, r2
 8005220:	4699      	mov	r9, r3
 8005222:	4623      	mov	r3, r4
 8005224:	eb18 0303 	adds.w	r3, r8, r3
 8005228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800522c:	462b      	mov	r3, r5
 800522e:	eb49 0303 	adc.w	r3, r9, r3
 8005232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005242:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800524a:	460b      	mov	r3, r1
 800524c:	18db      	adds	r3, r3, r3
 800524e:	653b      	str	r3, [r7, #80]	; 0x50
 8005250:	4613      	mov	r3, r2
 8005252:	eb42 0303 	adc.w	r3, r2, r3
 8005256:	657b      	str	r3, [r7, #84]	; 0x54
 8005258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800525c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005260:	f7fb fd12 	bl	8000c88 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4b61      	ldr	r3, [pc, #388]	; (80053f0 <UART_SetConfig+0x2d4>)
 800526a:	fba3 2302 	umull	r2, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	011c      	lsls	r4, r3, #4
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800527c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	64b9      	str	r1, [r7, #72]	; 0x48
 800528c:	415b      	adcs	r3, r3
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005294:	4641      	mov	r1, r8
 8005296:	eb12 0a01 	adds.w	sl, r2, r1
 800529a:	4649      	mov	r1, r9
 800529c:	eb43 0b01 	adc.w	fp, r3, r1
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b4:	4692      	mov	sl, r2
 80052b6:	469b      	mov	fp, r3
 80052b8:	4643      	mov	r3, r8
 80052ba:	eb1a 0303 	adds.w	r3, sl, r3
 80052be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052c2:	464b      	mov	r3, r9
 80052c4:	eb4b 0303 	adc.w	r3, fp, r3
 80052c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052e0:	460b      	mov	r3, r1
 80052e2:	18db      	adds	r3, r3, r3
 80052e4:	643b      	str	r3, [r7, #64]	; 0x40
 80052e6:	4613      	mov	r3, r2
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	647b      	str	r3, [r7, #68]	; 0x44
 80052ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052f6:	f7fb fcc7 	bl	8000c88 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	4b3b      	ldr	r3, [pc, #236]	; (80053f0 <UART_SetConfig+0x2d4>)
 8005302:	fba3 2301 	umull	r2, r3, r3, r1
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2264      	movs	r2, #100	; 0x64
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	1acb      	subs	r3, r1, r3
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005316:	4b36      	ldr	r3, [pc, #216]	; (80053f0 <UART_SetConfig+0x2d4>)
 8005318:	fba3 2302 	umull	r2, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005324:	441c      	add	r4, r3
 8005326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800532a:	2200      	movs	r2, #0
 800532c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005330:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005338:	4642      	mov	r2, r8
 800533a:	464b      	mov	r3, r9
 800533c:	1891      	adds	r1, r2, r2
 800533e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005340:	415b      	adcs	r3, r3
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005348:	4641      	mov	r1, r8
 800534a:	1851      	adds	r1, r2, r1
 800534c:	6339      	str	r1, [r7, #48]	; 0x30
 800534e:	4649      	mov	r1, r9
 8005350:	414b      	adcs	r3, r1
 8005352:	637b      	str	r3, [r7, #52]	; 0x34
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005360:	4659      	mov	r1, fp
 8005362:	00cb      	lsls	r3, r1, #3
 8005364:	4651      	mov	r1, sl
 8005366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800536a:	4651      	mov	r1, sl
 800536c:	00ca      	lsls	r2, r1, #3
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	4603      	mov	r3, r0
 8005374:	4642      	mov	r2, r8
 8005376:	189b      	adds	r3, r3, r2
 8005378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800537c:	464b      	mov	r3, r9
 800537e:	460a      	mov	r2, r1
 8005380:	eb42 0303 	adc.w	r3, r2, r3
 8005384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005394:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800539c:	460b      	mov	r3, r1
 800539e:	18db      	adds	r3, r3, r3
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a2:	4613      	mov	r3, r2
 80053a4:	eb42 0303 	adc.w	r3, r2, r3
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053b2:	f7fb fc69 	bl	8000c88 <__aeabi_uldivmod>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <UART_SetConfig+0x2d4>)
 80053bc:	fba3 1302 	umull	r1, r3, r3, r2
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	2164      	movs	r1, #100	; 0x64
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	3332      	adds	r3, #50	; 0x32
 80053ce:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <UART_SetConfig+0x2d4>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	f003 0207 	and.w	r2, r3, #7
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4422      	add	r2, r4
 80053e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e4:	e106      	b.n	80055f4 <UART_SetConfig+0x4d8>
 80053e6:	bf00      	nop
 80053e8:	40011000 	.word	0x40011000
 80053ec:	40011400 	.word	0x40011400
 80053f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005406:	4642      	mov	r2, r8
 8005408:	464b      	mov	r3, r9
 800540a:	1891      	adds	r1, r2, r2
 800540c:	6239      	str	r1, [r7, #32]
 800540e:	415b      	adcs	r3, r3
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005416:	4641      	mov	r1, r8
 8005418:	1854      	adds	r4, r2, r1
 800541a:	4649      	mov	r1, r9
 800541c:	eb43 0501 	adc.w	r5, r3, r1
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	00eb      	lsls	r3, r5, #3
 800542a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800542e:	00e2      	lsls	r2, r4, #3
 8005430:	4614      	mov	r4, r2
 8005432:	461d      	mov	r5, r3
 8005434:	4643      	mov	r3, r8
 8005436:	18e3      	adds	r3, r4, r3
 8005438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800543c:	464b      	mov	r3, r9
 800543e:	eb45 0303 	adc.w	r3, r5, r3
 8005442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005462:	4629      	mov	r1, r5
 8005464:	008b      	lsls	r3, r1, #2
 8005466:	4621      	mov	r1, r4
 8005468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800546c:	4621      	mov	r1, r4
 800546e:	008a      	lsls	r2, r1, #2
 8005470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005474:	f7fb fc08 	bl	8000c88 <__aeabi_uldivmod>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4b60      	ldr	r3, [pc, #384]	; (8005600 <UART_SetConfig+0x4e4>)
 800547e:	fba3 2302 	umull	r2, r3, r3, r2
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	011c      	lsls	r4, r3, #4
 8005486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005490:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	1891      	adds	r1, r2, r2
 800549e:	61b9      	str	r1, [r7, #24]
 80054a0:	415b      	adcs	r3, r3
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a8:	4641      	mov	r1, r8
 80054aa:	1851      	adds	r1, r2, r1
 80054ac:	6139      	str	r1, [r7, #16]
 80054ae:	4649      	mov	r1, r9
 80054b0:	414b      	adcs	r3, r1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054c0:	4659      	mov	r1, fp
 80054c2:	00cb      	lsls	r3, r1, #3
 80054c4:	4651      	mov	r1, sl
 80054c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ca:	4651      	mov	r1, sl
 80054cc:	00ca      	lsls	r2, r1, #3
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	4642      	mov	r2, r8
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054dc:	464b      	mov	r3, r9
 80054de:	460a      	mov	r2, r1
 80054e0:	eb42 0303 	adc.w	r3, r2, r3
 80054e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80054f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005500:	4649      	mov	r1, r9
 8005502:	008b      	lsls	r3, r1, #2
 8005504:	4641      	mov	r1, r8
 8005506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800550a:	4641      	mov	r1, r8
 800550c:	008a      	lsls	r2, r1, #2
 800550e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005512:	f7fb fbb9 	bl	8000c88 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4611      	mov	r1, r2
 800551c:	4b38      	ldr	r3, [pc, #224]	; (8005600 <UART_SetConfig+0x4e4>)
 800551e:	fba3 2301 	umull	r2, r3, r3, r1
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	2264      	movs	r2, #100	; 0x64
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	1acb      	subs	r3, r1, r3
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	3332      	adds	r3, #50	; 0x32
 8005530:	4a33      	ldr	r2, [pc, #204]	; (8005600 <UART_SetConfig+0x4e4>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800553c:	441c      	add	r4, r3
 800553e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005542:	2200      	movs	r2, #0
 8005544:	673b      	str	r3, [r7, #112]	; 0x70
 8005546:	677a      	str	r2, [r7, #116]	; 0x74
 8005548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	1891      	adds	r1, r2, r2
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	415b      	adcs	r3, r3
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800555c:	4641      	mov	r1, r8
 800555e:	1851      	adds	r1, r2, r1
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	4649      	mov	r1, r9
 8005564:	414b      	adcs	r3, r1
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005574:	4659      	mov	r1, fp
 8005576:	00cb      	lsls	r3, r1, #3
 8005578:	4651      	mov	r1, sl
 800557a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800557e:	4651      	mov	r1, sl
 8005580:	00ca      	lsls	r2, r1, #3
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	4603      	mov	r3, r0
 8005588:	4642      	mov	r2, r8
 800558a:	189b      	adds	r3, r3, r2
 800558c:	66bb      	str	r3, [r7, #104]	; 0x68
 800558e:	464b      	mov	r3, r9
 8005590:	460a      	mov	r2, r1
 8005592:	eb42 0303 	adc.w	r3, r2, r3
 8005596:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	663b      	str	r3, [r7, #96]	; 0x60
 80055a2:	667a      	str	r2, [r7, #100]	; 0x64
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055b0:	4649      	mov	r1, r9
 80055b2:	008b      	lsls	r3, r1, #2
 80055b4:	4641      	mov	r1, r8
 80055b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ba:	4641      	mov	r1, r8
 80055bc:	008a      	lsls	r2, r1, #2
 80055be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055c2:	f7fb fb61 	bl	8000c88 <__aeabi_uldivmod>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <UART_SetConfig+0x4e4>)
 80055cc:	fba3 1302 	umull	r1, r3, r3, r2
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	2164      	movs	r1, #100	; 0x64
 80055d4:	fb01 f303 	mul.w	r3, r1, r3
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	3332      	adds	r3, #50	; 0x32
 80055de:	4a08      	ldr	r2, [pc, #32]	; (8005600 <UART_SetConfig+0x4e4>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4422      	add	r2, r4
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055fa:	46bd      	mov	sp, r7
 80055fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005600:	51eb851f 	.word	0x51eb851f

08005604 <__cvt>:
 8005604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005608:	ec55 4b10 	vmov	r4, r5, d0
 800560c:	2d00      	cmp	r5, #0
 800560e:	460e      	mov	r6, r1
 8005610:	4619      	mov	r1, r3
 8005612:	462b      	mov	r3, r5
 8005614:	bfbb      	ittet	lt
 8005616:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800561a:	461d      	movlt	r5, r3
 800561c:	2300      	movge	r3, #0
 800561e:	232d      	movlt	r3, #45	; 0x2d
 8005620:	700b      	strb	r3, [r1, #0]
 8005622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005624:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005628:	4691      	mov	r9, r2
 800562a:	f023 0820 	bic.w	r8, r3, #32
 800562e:	bfbc      	itt	lt
 8005630:	4622      	movlt	r2, r4
 8005632:	4614      	movlt	r4, r2
 8005634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005638:	d005      	beq.n	8005646 <__cvt+0x42>
 800563a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800563e:	d100      	bne.n	8005642 <__cvt+0x3e>
 8005640:	3601      	adds	r6, #1
 8005642:	2102      	movs	r1, #2
 8005644:	e000      	b.n	8005648 <__cvt+0x44>
 8005646:	2103      	movs	r1, #3
 8005648:	ab03      	add	r3, sp, #12
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	ab02      	add	r3, sp, #8
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	ec45 4b10 	vmov	d0, r4, r5
 8005654:	4653      	mov	r3, sl
 8005656:	4632      	mov	r2, r6
 8005658:	f000 fe6a 	bl	8006330 <_dtoa_r>
 800565c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005660:	4607      	mov	r7, r0
 8005662:	d102      	bne.n	800566a <__cvt+0x66>
 8005664:	f019 0f01 	tst.w	r9, #1
 8005668:	d022      	beq.n	80056b0 <__cvt+0xac>
 800566a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800566e:	eb07 0906 	add.w	r9, r7, r6
 8005672:	d110      	bne.n	8005696 <__cvt+0x92>
 8005674:	783b      	ldrb	r3, [r7, #0]
 8005676:	2b30      	cmp	r3, #48	; 0x30
 8005678:	d10a      	bne.n	8005690 <__cvt+0x8c>
 800567a:	2200      	movs	r2, #0
 800567c:	2300      	movs	r3, #0
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	f7fb fa41 	bl	8000b08 <__aeabi_dcmpeq>
 8005686:	b918      	cbnz	r0, 8005690 <__cvt+0x8c>
 8005688:	f1c6 0601 	rsb	r6, r6, #1
 800568c:	f8ca 6000 	str.w	r6, [sl]
 8005690:	f8da 3000 	ldr.w	r3, [sl]
 8005694:	4499      	add	r9, r3
 8005696:	2200      	movs	r2, #0
 8005698:	2300      	movs	r3, #0
 800569a:	4620      	mov	r0, r4
 800569c:	4629      	mov	r1, r5
 800569e:	f7fb fa33 	bl	8000b08 <__aeabi_dcmpeq>
 80056a2:	b108      	cbz	r0, 80056a8 <__cvt+0xa4>
 80056a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80056a8:	2230      	movs	r2, #48	; 0x30
 80056aa:	9b03      	ldr	r3, [sp, #12]
 80056ac:	454b      	cmp	r3, r9
 80056ae:	d307      	bcc.n	80056c0 <__cvt+0xbc>
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056b4:	1bdb      	subs	r3, r3, r7
 80056b6:	4638      	mov	r0, r7
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	b004      	add	sp, #16
 80056bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c0:	1c59      	adds	r1, r3, #1
 80056c2:	9103      	str	r1, [sp, #12]
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e7f0      	b.n	80056aa <__cvt+0xa6>

080056c8 <__exponent>:
 80056c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ca:	4603      	mov	r3, r0
 80056cc:	2900      	cmp	r1, #0
 80056ce:	bfb8      	it	lt
 80056d0:	4249      	neglt	r1, r1
 80056d2:	f803 2b02 	strb.w	r2, [r3], #2
 80056d6:	bfb4      	ite	lt
 80056d8:	222d      	movlt	r2, #45	; 0x2d
 80056da:	222b      	movge	r2, #43	; 0x2b
 80056dc:	2909      	cmp	r1, #9
 80056de:	7042      	strb	r2, [r0, #1]
 80056e0:	dd2a      	ble.n	8005738 <__exponent+0x70>
 80056e2:	f10d 0207 	add.w	r2, sp, #7
 80056e6:	4617      	mov	r7, r2
 80056e8:	260a      	movs	r6, #10
 80056ea:	4694      	mov	ip, r2
 80056ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80056f0:	fb06 1415 	mls	r4, r6, r5, r1
 80056f4:	3430      	adds	r4, #48	; 0x30
 80056f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80056fa:	460c      	mov	r4, r1
 80056fc:	2c63      	cmp	r4, #99	; 0x63
 80056fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8005702:	4629      	mov	r1, r5
 8005704:	dcf1      	bgt.n	80056ea <__exponent+0x22>
 8005706:	3130      	adds	r1, #48	; 0x30
 8005708:	f1ac 0402 	sub.w	r4, ip, #2
 800570c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005710:	1c41      	adds	r1, r0, #1
 8005712:	4622      	mov	r2, r4
 8005714:	42ba      	cmp	r2, r7
 8005716:	d30a      	bcc.n	800572e <__exponent+0x66>
 8005718:	f10d 0209 	add.w	r2, sp, #9
 800571c:	eba2 020c 	sub.w	r2, r2, ip
 8005720:	42bc      	cmp	r4, r7
 8005722:	bf88      	it	hi
 8005724:	2200      	movhi	r2, #0
 8005726:	4413      	add	r3, r2
 8005728:	1a18      	subs	r0, r3, r0
 800572a:	b003      	add	sp, #12
 800572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800572e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005732:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005736:	e7ed      	b.n	8005714 <__exponent+0x4c>
 8005738:	2330      	movs	r3, #48	; 0x30
 800573a:	3130      	adds	r1, #48	; 0x30
 800573c:	7083      	strb	r3, [r0, #2]
 800573e:	70c1      	strb	r1, [r0, #3]
 8005740:	1d03      	adds	r3, r0, #4
 8005742:	e7f1      	b.n	8005728 <__exponent+0x60>

08005744 <_printf_float>:
 8005744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005748:	ed2d 8b02 	vpush	{d8}
 800574c:	b08d      	sub	sp, #52	; 0x34
 800574e:	460c      	mov	r4, r1
 8005750:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005754:	4616      	mov	r6, r2
 8005756:	461f      	mov	r7, r3
 8005758:	4605      	mov	r5, r0
 800575a:	f000 fce7 	bl	800612c <_localeconv_r>
 800575e:	f8d0 a000 	ldr.w	sl, [r0]
 8005762:	4650      	mov	r0, sl
 8005764:	f7fa fda4 	bl	80002b0 <strlen>
 8005768:	2300      	movs	r3, #0
 800576a:	930a      	str	r3, [sp, #40]	; 0x28
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	9305      	str	r3, [sp, #20]
 8005770:	f8d8 3000 	ldr.w	r3, [r8]
 8005774:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005778:	3307      	adds	r3, #7
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	f103 0208 	add.w	r2, r3, #8
 8005782:	f8c8 2000 	str.w	r2, [r8]
 8005786:	e9d3 8900 	ldrd	r8, r9, [r3]
 800578a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800578e:	9307      	str	r3, [sp, #28]
 8005790:	f8cd 8018 	str.w	r8, [sp, #24]
 8005794:	ee08 0a10 	vmov	s16, r0
 8005798:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800579c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057a0:	4b9e      	ldr	r3, [pc, #632]	; (8005a1c <_printf_float+0x2d8>)
 80057a2:	f04f 32ff 	mov.w	r2, #4294967295
 80057a6:	f7fb f9e1 	bl	8000b6c <__aeabi_dcmpun>
 80057aa:	bb88      	cbnz	r0, 8005810 <_printf_float+0xcc>
 80057ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057b0:	4b9a      	ldr	r3, [pc, #616]	; (8005a1c <_printf_float+0x2d8>)
 80057b2:	f04f 32ff 	mov.w	r2, #4294967295
 80057b6:	f7fb f9bb 	bl	8000b30 <__aeabi_dcmple>
 80057ba:	bb48      	cbnz	r0, 8005810 <_printf_float+0xcc>
 80057bc:	2200      	movs	r2, #0
 80057be:	2300      	movs	r3, #0
 80057c0:	4640      	mov	r0, r8
 80057c2:	4649      	mov	r1, r9
 80057c4:	f7fb f9aa 	bl	8000b1c <__aeabi_dcmplt>
 80057c8:	b110      	cbz	r0, 80057d0 <_printf_float+0x8c>
 80057ca:	232d      	movs	r3, #45	; 0x2d
 80057cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d0:	4a93      	ldr	r2, [pc, #588]	; (8005a20 <_printf_float+0x2dc>)
 80057d2:	4b94      	ldr	r3, [pc, #592]	; (8005a24 <_printf_float+0x2e0>)
 80057d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057d8:	bf94      	ite	ls
 80057da:	4690      	movls	r8, r2
 80057dc:	4698      	movhi	r8, r3
 80057de:	2303      	movs	r3, #3
 80057e0:	6123      	str	r3, [r4, #16]
 80057e2:	9b05      	ldr	r3, [sp, #20]
 80057e4:	f023 0304 	bic.w	r3, r3, #4
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	f04f 0900 	mov.w	r9, #0
 80057ee:	9700      	str	r7, [sp, #0]
 80057f0:	4633      	mov	r3, r6
 80057f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80057f4:	4621      	mov	r1, r4
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 f9da 	bl	8005bb0 <_printf_common>
 80057fc:	3001      	adds	r0, #1
 80057fe:	f040 8090 	bne.w	8005922 <_printf_float+0x1de>
 8005802:	f04f 30ff 	mov.w	r0, #4294967295
 8005806:	b00d      	add	sp, #52	; 0x34
 8005808:	ecbd 8b02 	vpop	{d8}
 800580c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	4640      	mov	r0, r8
 8005816:	4649      	mov	r1, r9
 8005818:	f7fb f9a8 	bl	8000b6c <__aeabi_dcmpun>
 800581c:	b140      	cbz	r0, 8005830 <_printf_float+0xec>
 800581e:	464b      	mov	r3, r9
 8005820:	2b00      	cmp	r3, #0
 8005822:	bfbc      	itt	lt
 8005824:	232d      	movlt	r3, #45	; 0x2d
 8005826:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800582a:	4a7f      	ldr	r2, [pc, #508]	; (8005a28 <_printf_float+0x2e4>)
 800582c:	4b7f      	ldr	r3, [pc, #508]	; (8005a2c <_printf_float+0x2e8>)
 800582e:	e7d1      	b.n	80057d4 <_printf_float+0x90>
 8005830:	6863      	ldr	r3, [r4, #4]
 8005832:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005836:	9206      	str	r2, [sp, #24]
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	d13f      	bne.n	80058bc <_printf_float+0x178>
 800583c:	2306      	movs	r3, #6
 800583e:	6063      	str	r3, [r4, #4]
 8005840:	9b05      	ldr	r3, [sp, #20]
 8005842:	6861      	ldr	r1, [r4, #4]
 8005844:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005848:	2300      	movs	r3, #0
 800584a:	9303      	str	r3, [sp, #12]
 800584c:	ab0a      	add	r3, sp, #40	; 0x28
 800584e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005852:	ab09      	add	r3, sp, #36	; 0x24
 8005854:	ec49 8b10 	vmov	d0, r8, r9
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	6022      	str	r2, [r4, #0]
 800585c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005860:	4628      	mov	r0, r5
 8005862:	f7ff fecf 	bl	8005604 <__cvt>
 8005866:	9b06      	ldr	r3, [sp, #24]
 8005868:	9909      	ldr	r1, [sp, #36]	; 0x24
 800586a:	2b47      	cmp	r3, #71	; 0x47
 800586c:	4680      	mov	r8, r0
 800586e:	d108      	bne.n	8005882 <_printf_float+0x13e>
 8005870:	1cc8      	adds	r0, r1, #3
 8005872:	db02      	blt.n	800587a <_printf_float+0x136>
 8005874:	6863      	ldr	r3, [r4, #4]
 8005876:	4299      	cmp	r1, r3
 8005878:	dd41      	ble.n	80058fe <_printf_float+0x1ba>
 800587a:	f1ab 0302 	sub.w	r3, fp, #2
 800587e:	fa5f fb83 	uxtb.w	fp, r3
 8005882:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005886:	d820      	bhi.n	80058ca <_printf_float+0x186>
 8005888:	3901      	subs	r1, #1
 800588a:	465a      	mov	r2, fp
 800588c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005890:	9109      	str	r1, [sp, #36]	; 0x24
 8005892:	f7ff ff19 	bl	80056c8 <__exponent>
 8005896:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005898:	1813      	adds	r3, r2, r0
 800589a:	2a01      	cmp	r2, #1
 800589c:	4681      	mov	r9, r0
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	dc02      	bgt.n	80058a8 <_printf_float+0x164>
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	07d2      	lsls	r2, r2, #31
 80058a6:	d501      	bpl.n	80058ac <_printf_float+0x168>
 80058a8:	3301      	adds	r3, #1
 80058aa:	6123      	str	r3, [r4, #16]
 80058ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d09c      	beq.n	80057ee <_printf_float+0xaa>
 80058b4:	232d      	movs	r3, #45	; 0x2d
 80058b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ba:	e798      	b.n	80057ee <_printf_float+0xaa>
 80058bc:	9a06      	ldr	r2, [sp, #24]
 80058be:	2a47      	cmp	r2, #71	; 0x47
 80058c0:	d1be      	bne.n	8005840 <_printf_float+0xfc>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1bc      	bne.n	8005840 <_printf_float+0xfc>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e7b9      	b.n	800583e <_printf_float+0xfa>
 80058ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058ce:	d118      	bne.n	8005902 <_printf_float+0x1be>
 80058d0:	2900      	cmp	r1, #0
 80058d2:	6863      	ldr	r3, [r4, #4]
 80058d4:	dd0b      	ble.n	80058ee <_printf_float+0x1aa>
 80058d6:	6121      	str	r1, [r4, #16]
 80058d8:	b913      	cbnz	r3, 80058e0 <_printf_float+0x19c>
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	07d0      	lsls	r0, r2, #31
 80058de:	d502      	bpl.n	80058e6 <_printf_float+0x1a2>
 80058e0:	3301      	adds	r3, #1
 80058e2:	440b      	add	r3, r1
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80058e8:	f04f 0900 	mov.w	r9, #0
 80058ec:	e7de      	b.n	80058ac <_printf_float+0x168>
 80058ee:	b913      	cbnz	r3, 80058f6 <_printf_float+0x1b2>
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	07d2      	lsls	r2, r2, #31
 80058f4:	d501      	bpl.n	80058fa <_printf_float+0x1b6>
 80058f6:	3302      	adds	r3, #2
 80058f8:	e7f4      	b.n	80058e4 <_printf_float+0x1a0>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e7f2      	b.n	80058e4 <_printf_float+0x1a0>
 80058fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005904:	4299      	cmp	r1, r3
 8005906:	db05      	blt.n	8005914 <_printf_float+0x1d0>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	6121      	str	r1, [r4, #16]
 800590c:	07d8      	lsls	r0, r3, #31
 800590e:	d5ea      	bpl.n	80058e6 <_printf_float+0x1a2>
 8005910:	1c4b      	adds	r3, r1, #1
 8005912:	e7e7      	b.n	80058e4 <_printf_float+0x1a0>
 8005914:	2900      	cmp	r1, #0
 8005916:	bfd4      	ite	le
 8005918:	f1c1 0202 	rsble	r2, r1, #2
 800591c:	2201      	movgt	r2, #1
 800591e:	4413      	add	r3, r2
 8005920:	e7e0      	b.n	80058e4 <_printf_float+0x1a0>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	055a      	lsls	r2, r3, #21
 8005926:	d407      	bmi.n	8005938 <_printf_float+0x1f4>
 8005928:	6923      	ldr	r3, [r4, #16]
 800592a:	4642      	mov	r2, r8
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	d12c      	bne.n	8005990 <_printf_float+0x24c>
 8005936:	e764      	b.n	8005802 <_printf_float+0xbe>
 8005938:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800593c:	f240 80e0 	bls.w	8005b00 <_printf_float+0x3bc>
 8005940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005944:	2200      	movs	r2, #0
 8005946:	2300      	movs	r3, #0
 8005948:	f7fb f8de 	bl	8000b08 <__aeabi_dcmpeq>
 800594c:	2800      	cmp	r0, #0
 800594e:	d034      	beq.n	80059ba <_printf_float+0x276>
 8005950:	4a37      	ldr	r2, [pc, #220]	; (8005a30 <_printf_float+0x2ec>)
 8005952:	2301      	movs	r3, #1
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	47b8      	blx	r7
 800595a:	3001      	adds	r0, #1
 800595c:	f43f af51 	beq.w	8005802 <_printf_float+0xbe>
 8005960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005964:	429a      	cmp	r2, r3
 8005966:	db02      	blt.n	800596e <_printf_float+0x22a>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07d8      	lsls	r0, r3, #31
 800596c:	d510      	bpl.n	8005990 <_printf_float+0x24c>
 800596e:	ee18 3a10 	vmov	r3, s16
 8005972:	4652      	mov	r2, sl
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f af41 	beq.w	8005802 <_printf_float+0xbe>
 8005980:	f04f 0800 	mov.w	r8, #0
 8005984:	f104 091a 	add.w	r9, r4, #26
 8005988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598a:	3b01      	subs	r3, #1
 800598c:	4543      	cmp	r3, r8
 800598e:	dc09      	bgt.n	80059a4 <_printf_float+0x260>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	079b      	lsls	r3, r3, #30
 8005994:	f100 8107 	bmi.w	8005ba6 <_printf_float+0x462>
 8005998:	68e0      	ldr	r0, [r4, #12]
 800599a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800599c:	4298      	cmp	r0, r3
 800599e:	bfb8      	it	lt
 80059a0:	4618      	movlt	r0, r3
 80059a2:	e730      	b.n	8005806 <_printf_float+0xc2>
 80059a4:	2301      	movs	r3, #1
 80059a6:	464a      	mov	r2, r9
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	f43f af27 	beq.w	8005802 <_printf_float+0xbe>
 80059b4:	f108 0801 	add.w	r8, r8, #1
 80059b8:	e7e6      	b.n	8005988 <_printf_float+0x244>
 80059ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dc39      	bgt.n	8005a34 <_printf_float+0x2f0>
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <_printf_float+0x2ec>)
 80059c2:	2301      	movs	r3, #1
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	f43f af19 	beq.w	8005802 <_printf_float+0xbe>
 80059d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059d4:	4313      	orrs	r3, r2
 80059d6:	d102      	bne.n	80059de <_printf_float+0x29a>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	07d9      	lsls	r1, r3, #31
 80059dc:	d5d8      	bpl.n	8005990 <_printf_float+0x24c>
 80059de:	ee18 3a10 	vmov	r3, s16
 80059e2:	4652      	mov	r2, sl
 80059e4:	4631      	mov	r1, r6
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	f43f af09 	beq.w	8005802 <_printf_float+0xbe>
 80059f0:	f04f 0900 	mov.w	r9, #0
 80059f4:	f104 0a1a 	add.w	sl, r4, #26
 80059f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fa:	425b      	negs	r3, r3
 80059fc:	454b      	cmp	r3, r9
 80059fe:	dc01      	bgt.n	8005a04 <_printf_float+0x2c0>
 8005a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a02:	e792      	b.n	800592a <_printf_float+0x1e6>
 8005a04:	2301      	movs	r3, #1
 8005a06:	4652      	mov	r2, sl
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	47b8      	blx	r7
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f aef7 	beq.w	8005802 <_printf_float+0xbe>
 8005a14:	f109 0901 	add.w	r9, r9, #1
 8005a18:	e7ee      	b.n	80059f8 <_printf_float+0x2b4>
 8005a1a:	bf00      	nop
 8005a1c:	7fefffff 	.word	0x7fefffff
 8005a20:	080085c0 	.word	0x080085c0
 8005a24:	080085c4 	.word	0x080085c4
 8005a28:	080085c8 	.word	0x080085c8
 8005a2c:	080085cc 	.word	0x080085cc
 8005a30:	080085d0 	.word	0x080085d0
 8005a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	bfa8      	it	ge
 8005a3c:	461a      	movge	r2, r3
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	4691      	mov	r9, r2
 8005a42:	dc37      	bgt.n	8005ab4 <_printf_float+0x370>
 8005a44:	f04f 0b00 	mov.w	fp, #0
 8005a48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a4c:	f104 021a 	add.w	r2, r4, #26
 8005a50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a52:	9305      	str	r3, [sp, #20]
 8005a54:	eba3 0309 	sub.w	r3, r3, r9
 8005a58:	455b      	cmp	r3, fp
 8005a5a:	dc33      	bgt.n	8005ac4 <_printf_float+0x380>
 8005a5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a60:	429a      	cmp	r2, r3
 8005a62:	db3b      	blt.n	8005adc <_printf_float+0x398>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	07da      	lsls	r2, r3, #31
 8005a68:	d438      	bmi.n	8005adc <_printf_float+0x398>
 8005a6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a6e:	eba2 0903 	sub.w	r9, r2, r3
 8005a72:	9b05      	ldr	r3, [sp, #20]
 8005a74:	1ad2      	subs	r2, r2, r3
 8005a76:	4591      	cmp	r9, r2
 8005a78:	bfa8      	it	ge
 8005a7a:	4691      	movge	r9, r2
 8005a7c:	f1b9 0f00 	cmp.w	r9, #0
 8005a80:	dc35      	bgt.n	8005aee <_printf_float+0x3aa>
 8005a82:	f04f 0800 	mov.w	r8, #0
 8005a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a8a:	f104 0a1a 	add.w	sl, r4, #26
 8005a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	eba3 0309 	sub.w	r3, r3, r9
 8005a98:	4543      	cmp	r3, r8
 8005a9a:	f77f af79 	ble.w	8005990 <_printf_float+0x24c>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f43f aeaa 	beq.w	8005802 <_printf_float+0xbe>
 8005aae:	f108 0801 	add.w	r8, r8, #1
 8005ab2:	e7ec      	b.n	8005a8e <_printf_float+0x34a>
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4642      	mov	r2, r8
 8005aba:	4628      	mov	r0, r5
 8005abc:	47b8      	blx	r7
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d1c0      	bne.n	8005a44 <_printf_float+0x300>
 8005ac2:	e69e      	b.n	8005802 <_printf_float+0xbe>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	9205      	str	r2, [sp, #20]
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f ae97 	beq.w	8005802 <_printf_float+0xbe>
 8005ad4:	9a05      	ldr	r2, [sp, #20]
 8005ad6:	f10b 0b01 	add.w	fp, fp, #1
 8005ada:	e7b9      	b.n	8005a50 <_printf_float+0x30c>
 8005adc:	ee18 3a10 	vmov	r3, s16
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d1be      	bne.n	8005a6a <_printf_float+0x326>
 8005aec:	e689      	b.n	8005802 <_printf_float+0xbe>
 8005aee:	9a05      	ldr	r2, [sp, #20]
 8005af0:	464b      	mov	r3, r9
 8005af2:	4442      	add	r2, r8
 8005af4:	4631      	mov	r1, r6
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b8      	blx	r7
 8005afa:	3001      	adds	r0, #1
 8005afc:	d1c1      	bne.n	8005a82 <_printf_float+0x33e>
 8005afe:	e680      	b.n	8005802 <_printf_float+0xbe>
 8005b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b02:	2a01      	cmp	r2, #1
 8005b04:	dc01      	bgt.n	8005b0a <_printf_float+0x3c6>
 8005b06:	07db      	lsls	r3, r3, #31
 8005b08:	d53a      	bpl.n	8005b80 <_printf_float+0x43c>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	f43f ae74 	beq.w	8005802 <_printf_float+0xbe>
 8005b1a:	ee18 3a10 	vmov	r3, s16
 8005b1e:	4652      	mov	r2, sl
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f ae6b 	beq.w	8005802 <_printf_float+0xbe>
 8005b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b30:	2200      	movs	r2, #0
 8005b32:	2300      	movs	r3, #0
 8005b34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b38:	f7fa ffe6 	bl	8000b08 <__aeabi_dcmpeq>
 8005b3c:	b9d8      	cbnz	r0, 8005b76 <_printf_float+0x432>
 8005b3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b42:	f108 0201 	add.w	r2, r8, #1
 8005b46:	4631      	mov	r1, r6
 8005b48:	4628      	mov	r0, r5
 8005b4a:	47b8      	blx	r7
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d10e      	bne.n	8005b6e <_printf_float+0x42a>
 8005b50:	e657      	b.n	8005802 <_printf_float+0xbe>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4652      	mov	r2, sl
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	f43f ae50 	beq.w	8005802 <_printf_float+0xbe>
 8005b62:	f108 0801 	add.w	r8, r8, #1
 8005b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	4543      	cmp	r3, r8
 8005b6c:	dcf1      	bgt.n	8005b52 <_printf_float+0x40e>
 8005b6e:	464b      	mov	r3, r9
 8005b70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b74:	e6da      	b.n	800592c <_printf_float+0x1e8>
 8005b76:	f04f 0800 	mov.w	r8, #0
 8005b7a:	f104 0a1a 	add.w	sl, r4, #26
 8005b7e:	e7f2      	b.n	8005b66 <_printf_float+0x422>
 8005b80:	2301      	movs	r3, #1
 8005b82:	4642      	mov	r2, r8
 8005b84:	e7df      	b.n	8005b46 <_printf_float+0x402>
 8005b86:	2301      	movs	r3, #1
 8005b88:	464a      	mov	r2, r9
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	47b8      	blx	r7
 8005b90:	3001      	adds	r0, #1
 8005b92:	f43f ae36 	beq.w	8005802 <_printf_float+0xbe>
 8005b96:	f108 0801 	add.w	r8, r8, #1
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b9e:	1a5b      	subs	r3, r3, r1
 8005ba0:	4543      	cmp	r3, r8
 8005ba2:	dcf0      	bgt.n	8005b86 <_printf_float+0x442>
 8005ba4:	e6f8      	b.n	8005998 <_printf_float+0x254>
 8005ba6:	f04f 0800 	mov.w	r8, #0
 8005baa:	f104 0919 	add.w	r9, r4, #25
 8005bae:	e7f4      	b.n	8005b9a <_printf_float+0x456>

08005bb0 <_printf_common>:
 8005bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb4:	4616      	mov	r6, r2
 8005bb6:	4699      	mov	r9, r3
 8005bb8:	688a      	ldr	r2, [r1, #8]
 8005bba:	690b      	ldr	r3, [r1, #16]
 8005bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	bfb8      	it	lt
 8005bc4:	4613      	movlt	r3, r2
 8005bc6:	6033      	str	r3, [r6, #0]
 8005bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bcc:	4607      	mov	r7, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	b10a      	cbz	r2, 8005bd6 <_printf_common+0x26>
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	6033      	str	r3, [r6, #0]
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	0699      	lsls	r1, r3, #26
 8005bda:	bf42      	ittt	mi
 8005bdc:	6833      	ldrmi	r3, [r6, #0]
 8005bde:	3302      	addmi	r3, #2
 8005be0:	6033      	strmi	r3, [r6, #0]
 8005be2:	6825      	ldr	r5, [r4, #0]
 8005be4:	f015 0506 	ands.w	r5, r5, #6
 8005be8:	d106      	bne.n	8005bf8 <_printf_common+0x48>
 8005bea:	f104 0a19 	add.w	sl, r4, #25
 8005bee:	68e3      	ldr	r3, [r4, #12]
 8005bf0:	6832      	ldr	r2, [r6, #0]
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	42ab      	cmp	r3, r5
 8005bf6:	dc26      	bgt.n	8005c46 <_printf_common+0x96>
 8005bf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bfc:	1e13      	subs	r3, r2, #0
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	bf18      	it	ne
 8005c02:	2301      	movne	r3, #1
 8005c04:	0692      	lsls	r2, r2, #26
 8005c06:	d42b      	bmi.n	8005c60 <_printf_common+0xb0>
 8005c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	4638      	mov	r0, r7
 8005c10:	47c0      	blx	r8
 8005c12:	3001      	adds	r0, #1
 8005c14:	d01e      	beq.n	8005c54 <_printf_common+0xa4>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	6922      	ldr	r2, [r4, #16]
 8005c1a:	f003 0306 	and.w	r3, r3, #6
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	bf02      	ittt	eq
 8005c22:	68e5      	ldreq	r5, [r4, #12]
 8005c24:	6833      	ldreq	r3, [r6, #0]
 8005c26:	1aed      	subeq	r5, r5, r3
 8005c28:	68a3      	ldr	r3, [r4, #8]
 8005c2a:	bf0c      	ite	eq
 8005c2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c30:	2500      	movne	r5, #0
 8005c32:	4293      	cmp	r3, r2
 8005c34:	bfc4      	itt	gt
 8005c36:	1a9b      	subgt	r3, r3, r2
 8005c38:	18ed      	addgt	r5, r5, r3
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	341a      	adds	r4, #26
 8005c3e:	42b5      	cmp	r5, r6
 8005c40:	d11a      	bne.n	8005c78 <_printf_common+0xc8>
 8005c42:	2000      	movs	r0, #0
 8005c44:	e008      	b.n	8005c58 <_printf_common+0xa8>
 8005c46:	2301      	movs	r3, #1
 8005c48:	4652      	mov	r2, sl
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	47c0      	blx	r8
 8005c50:	3001      	adds	r0, #1
 8005c52:	d103      	bne.n	8005c5c <_printf_common+0xac>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	e7c6      	b.n	8005bee <_printf_common+0x3e>
 8005c60:	18e1      	adds	r1, r4, r3
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	2030      	movs	r0, #48	; 0x30
 8005c66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c6a:	4422      	add	r2, r4
 8005c6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c74:	3302      	adds	r3, #2
 8005c76:	e7c7      	b.n	8005c08 <_printf_common+0x58>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	4638      	mov	r0, r7
 8005c80:	47c0      	blx	r8
 8005c82:	3001      	adds	r0, #1
 8005c84:	d0e6      	beq.n	8005c54 <_printf_common+0xa4>
 8005c86:	3601      	adds	r6, #1
 8005c88:	e7d9      	b.n	8005c3e <_printf_common+0x8e>
	...

08005c8c <_printf_i>:
 8005c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	7e0f      	ldrb	r7, [r1, #24]
 8005c92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c94:	2f78      	cmp	r7, #120	; 0x78
 8005c96:	4691      	mov	r9, r2
 8005c98:	4680      	mov	r8, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	469a      	mov	sl, r3
 8005c9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ca2:	d807      	bhi.n	8005cb4 <_printf_i+0x28>
 8005ca4:	2f62      	cmp	r7, #98	; 0x62
 8005ca6:	d80a      	bhi.n	8005cbe <_printf_i+0x32>
 8005ca8:	2f00      	cmp	r7, #0
 8005caa:	f000 80d4 	beq.w	8005e56 <_printf_i+0x1ca>
 8005cae:	2f58      	cmp	r7, #88	; 0x58
 8005cb0:	f000 80c0 	beq.w	8005e34 <_printf_i+0x1a8>
 8005cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cbc:	e03a      	b.n	8005d34 <_printf_i+0xa8>
 8005cbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cc2:	2b15      	cmp	r3, #21
 8005cc4:	d8f6      	bhi.n	8005cb4 <_printf_i+0x28>
 8005cc6:	a101      	add	r1, pc, #4	; (adr r1, 8005ccc <_printf_i+0x40>)
 8005cc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ccc:	08005d25 	.word	0x08005d25
 8005cd0:	08005d39 	.word	0x08005d39
 8005cd4:	08005cb5 	.word	0x08005cb5
 8005cd8:	08005cb5 	.word	0x08005cb5
 8005cdc:	08005cb5 	.word	0x08005cb5
 8005ce0:	08005cb5 	.word	0x08005cb5
 8005ce4:	08005d39 	.word	0x08005d39
 8005ce8:	08005cb5 	.word	0x08005cb5
 8005cec:	08005cb5 	.word	0x08005cb5
 8005cf0:	08005cb5 	.word	0x08005cb5
 8005cf4:	08005cb5 	.word	0x08005cb5
 8005cf8:	08005e3d 	.word	0x08005e3d
 8005cfc:	08005d65 	.word	0x08005d65
 8005d00:	08005df7 	.word	0x08005df7
 8005d04:	08005cb5 	.word	0x08005cb5
 8005d08:	08005cb5 	.word	0x08005cb5
 8005d0c:	08005e5f 	.word	0x08005e5f
 8005d10:	08005cb5 	.word	0x08005cb5
 8005d14:	08005d65 	.word	0x08005d65
 8005d18:	08005cb5 	.word	0x08005cb5
 8005d1c:	08005cb5 	.word	0x08005cb5
 8005d20:	08005dff 	.word	0x08005dff
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	1d1a      	adds	r2, r3, #4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	602a      	str	r2, [r5, #0]
 8005d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d34:	2301      	movs	r3, #1
 8005d36:	e09f      	b.n	8005e78 <_printf_i+0x1ec>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	682b      	ldr	r3, [r5, #0]
 8005d3c:	0607      	lsls	r7, r0, #24
 8005d3e:	f103 0104 	add.w	r1, r3, #4
 8005d42:	6029      	str	r1, [r5, #0]
 8005d44:	d501      	bpl.n	8005d4a <_printf_i+0xbe>
 8005d46:	681e      	ldr	r6, [r3, #0]
 8005d48:	e003      	b.n	8005d52 <_printf_i+0xc6>
 8005d4a:	0646      	lsls	r6, r0, #25
 8005d4c:	d5fb      	bpl.n	8005d46 <_printf_i+0xba>
 8005d4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	da03      	bge.n	8005d5e <_printf_i+0xd2>
 8005d56:	232d      	movs	r3, #45	; 0x2d
 8005d58:	4276      	negs	r6, r6
 8005d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d5e:	485a      	ldr	r0, [pc, #360]	; (8005ec8 <_printf_i+0x23c>)
 8005d60:	230a      	movs	r3, #10
 8005d62:	e012      	b.n	8005d8a <_printf_i+0xfe>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	1d19      	adds	r1, r3, #4
 8005d6a:	6029      	str	r1, [r5, #0]
 8005d6c:	0605      	lsls	r5, r0, #24
 8005d6e:	d501      	bpl.n	8005d74 <_printf_i+0xe8>
 8005d70:	681e      	ldr	r6, [r3, #0]
 8005d72:	e002      	b.n	8005d7a <_printf_i+0xee>
 8005d74:	0641      	lsls	r1, r0, #25
 8005d76:	d5fb      	bpl.n	8005d70 <_printf_i+0xe4>
 8005d78:	881e      	ldrh	r6, [r3, #0]
 8005d7a:	4853      	ldr	r0, [pc, #332]	; (8005ec8 <_printf_i+0x23c>)
 8005d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d7e:	bf0c      	ite	eq
 8005d80:	2308      	moveq	r3, #8
 8005d82:	230a      	movne	r3, #10
 8005d84:	2100      	movs	r1, #0
 8005d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d8a:	6865      	ldr	r5, [r4, #4]
 8005d8c:	60a5      	str	r5, [r4, #8]
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	bfa2      	ittt	ge
 8005d92:	6821      	ldrge	r1, [r4, #0]
 8005d94:	f021 0104 	bicge.w	r1, r1, #4
 8005d98:	6021      	strge	r1, [r4, #0]
 8005d9a:	b90e      	cbnz	r6, 8005da0 <_printf_i+0x114>
 8005d9c:	2d00      	cmp	r5, #0
 8005d9e:	d04b      	beq.n	8005e38 <_printf_i+0x1ac>
 8005da0:	4615      	mov	r5, r2
 8005da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005da6:	fb03 6711 	mls	r7, r3, r1, r6
 8005daa:	5dc7      	ldrb	r7, [r0, r7]
 8005dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005db0:	4637      	mov	r7, r6
 8005db2:	42bb      	cmp	r3, r7
 8005db4:	460e      	mov	r6, r1
 8005db6:	d9f4      	bls.n	8005da2 <_printf_i+0x116>
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d10b      	bne.n	8005dd4 <_printf_i+0x148>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	07de      	lsls	r6, r3, #31
 8005dc0:	d508      	bpl.n	8005dd4 <_printf_i+0x148>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	6861      	ldr	r1, [r4, #4]
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	bfde      	ittt	le
 8005dca:	2330      	movle	r3, #48	; 0x30
 8005dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dd4:	1b52      	subs	r2, r2, r5
 8005dd6:	6122      	str	r2, [r4, #16]
 8005dd8:	f8cd a000 	str.w	sl, [sp]
 8005ddc:	464b      	mov	r3, r9
 8005dde:	aa03      	add	r2, sp, #12
 8005de0:	4621      	mov	r1, r4
 8005de2:	4640      	mov	r0, r8
 8005de4:	f7ff fee4 	bl	8005bb0 <_printf_common>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d14a      	bne.n	8005e82 <_printf_i+0x1f6>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	b004      	add	sp, #16
 8005df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	f043 0320 	orr.w	r3, r3, #32
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	4833      	ldr	r0, [pc, #204]	; (8005ecc <_printf_i+0x240>)
 8005e00:	2778      	movs	r7, #120	; 0x78
 8005e02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	6829      	ldr	r1, [r5, #0]
 8005e0a:	061f      	lsls	r7, r3, #24
 8005e0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e10:	d402      	bmi.n	8005e18 <_printf_i+0x18c>
 8005e12:	065f      	lsls	r7, r3, #25
 8005e14:	bf48      	it	mi
 8005e16:	b2b6      	uxthmi	r6, r6
 8005e18:	07df      	lsls	r7, r3, #31
 8005e1a:	bf48      	it	mi
 8005e1c:	f043 0320 	orrmi.w	r3, r3, #32
 8005e20:	6029      	str	r1, [r5, #0]
 8005e22:	bf48      	it	mi
 8005e24:	6023      	strmi	r3, [r4, #0]
 8005e26:	b91e      	cbnz	r6, 8005e30 <_printf_i+0x1a4>
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	f023 0320 	bic.w	r3, r3, #32
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	2310      	movs	r3, #16
 8005e32:	e7a7      	b.n	8005d84 <_printf_i+0xf8>
 8005e34:	4824      	ldr	r0, [pc, #144]	; (8005ec8 <_printf_i+0x23c>)
 8005e36:	e7e4      	b.n	8005e02 <_printf_i+0x176>
 8005e38:	4615      	mov	r5, r2
 8005e3a:	e7bd      	b.n	8005db8 <_printf_i+0x12c>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	6826      	ldr	r6, [r4, #0]
 8005e40:	6961      	ldr	r1, [r4, #20]
 8005e42:	1d18      	adds	r0, r3, #4
 8005e44:	6028      	str	r0, [r5, #0]
 8005e46:	0635      	lsls	r5, r6, #24
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	d501      	bpl.n	8005e50 <_printf_i+0x1c4>
 8005e4c:	6019      	str	r1, [r3, #0]
 8005e4e:	e002      	b.n	8005e56 <_printf_i+0x1ca>
 8005e50:	0670      	lsls	r0, r6, #25
 8005e52:	d5fb      	bpl.n	8005e4c <_printf_i+0x1c0>
 8005e54:	8019      	strh	r1, [r3, #0]
 8005e56:	2300      	movs	r3, #0
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	4615      	mov	r5, r2
 8005e5c:	e7bc      	b.n	8005dd8 <_printf_i+0x14c>
 8005e5e:	682b      	ldr	r3, [r5, #0]
 8005e60:	1d1a      	adds	r2, r3, #4
 8005e62:	602a      	str	r2, [r5, #0]
 8005e64:	681d      	ldr	r5, [r3, #0]
 8005e66:	6862      	ldr	r2, [r4, #4]
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f7fa f9d0 	bl	8000210 <memchr>
 8005e70:	b108      	cbz	r0, 8005e76 <_printf_i+0x1ea>
 8005e72:	1b40      	subs	r0, r0, r5
 8005e74:	6060      	str	r0, [r4, #4]
 8005e76:	6863      	ldr	r3, [r4, #4]
 8005e78:	6123      	str	r3, [r4, #16]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e80:	e7aa      	b.n	8005dd8 <_printf_i+0x14c>
 8005e82:	6923      	ldr	r3, [r4, #16]
 8005e84:	462a      	mov	r2, r5
 8005e86:	4649      	mov	r1, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	47d0      	blx	sl
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d0ad      	beq.n	8005dec <_printf_i+0x160>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	079b      	lsls	r3, r3, #30
 8005e94:	d413      	bmi.n	8005ebe <_printf_i+0x232>
 8005e96:	68e0      	ldr	r0, [r4, #12]
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	4298      	cmp	r0, r3
 8005e9c:	bfb8      	it	lt
 8005e9e:	4618      	movlt	r0, r3
 8005ea0:	e7a6      	b.n	8005df0 <_printf_i+0x164>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4632      	mov	r2, r6
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	47d0      	blx	sl
 8005eac:	3001      	adds	r0, #1
 8005eae:	d09d      	beq.n	8005dec <_printf_i+0x160>
 8005eb0:	3501      	adds	r5, #1
 8005eb2:	68e3      	ldr	r3, [r4, #12]
 8005eb4:	9903      	ldr	r1, [sp, #12]
 8005eb6:	1a5b      	subs	r3, r3, r1
 8005eb8:	42ab      	cmp	r3, r5
 8005eba:	dcf2      	bgt.n	8005ea2 <_printf_i+0x216>
 8005ebc:	e7eb      	b.n	8005e96 <_printf_i+0x20a>
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	f104 0619 	add.w	r6, r4, #25
 8005ec4:	e7f5      	b.n	8005eb2 <_printf_i+0x226>
 8005ec6:	bf00      	nop
 8005ec8:	080085d2 	.word	0x080085d2
 8005ecc:	080085e3 	.word	0x080085e3

08005ed0 <std>:
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ede:	6083      	str	r3, [r0, #8]
 8005ee0:	8181      	strh	r1, [r0, #12]
 8005ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ee4:	81c2      	strh	r2, [r0, #14]
 8005ee6:	6183      	str	r3, [r0, #24]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2208      	movs	r2, #8
 8005eec:	305c      	adds	r0, #92	; 0x5c
 8005eee:	f000 f914 	bl	800611a <memset>
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <std+0x58>)
 8005ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <std+0x5c>)
 8005ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <std+0x60>)
 8005efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005efe:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <std+0x64>)
 8005f00:	6323      	str	r3, [r4, #48]	; 0x30
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <std+0x68>)
 8005f04:	6224      	str	r4, [r4, #32]
 8005f06:	429c      	cmp	r4, r3
 8005f08:	d006      	beq.n	8005f18 <std+0x48>
 8005f0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005f0e:	4294      	cmp	r4, r2
 8005f10:	d002      	beq.n	8005f18 <std+0x48>
 8005f12:	33d0      	adds	r3, #208	; 0xd0
 8005f14:	429c      	cmp	r4, r3
 8005f16:	d105      	bne.n	8005f24 <std+0x54>
 8005f18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f20:	f000 b978 	b.w	8006214 <__retarget_lock_init_recursive>
 8005f24:	bd10      	pop	{r4, pc}
 8005f26:	bf00      	nop
 8005f28:	08006095 	.word	0x08006095
 8005f2c:	080060b7 	.word	0x080060b7
 8005f30:	080060ef 	.word	0x080060ef
 8005f34:	08006113 	.word	0x08006113
 8005f38:	20000d60 	.word	0x20000d60

08005f3c <stdio_exit_handler>:
 8005f3c:	4a02      	ldr	r2, [pc, #8]	; (8005f48 <stdio_exit_handler+0xc>)
 8005f3e:	4903      	ldr	r1, [pc, #12]	; (8005f4c <stdio_exit_handler+0x10>)
 8005f40:	4803      	ldr	r0, [pc, #12]	; (8005f50 <stdio_exit_handler+0x14>)
 8005f42:	f000 b869 	b.w	8006018 <_fwalk_sglue>
 8005f46:	bf00      	nop
 8005f48:	20000010 	.word	0x20000010
 8005f4c:	08007bc9 	.word	0x08007bc9
 8005f50:	2000001c 	.word	0x2000001c

08005f54 <cleanup_stdio>:
 8005f54:	6841      	ldr	r1, [r0, #4]
 8005f56:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <cleanup_stdio+0x34>)
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	b510      	push	{r4, lr}
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	d001      	beq.n	8005f64 <cleanup_stdio+0x10>
 8005f60:	f001 fe32 	bl	8007bc8 <_fflush_r>
 8005f64:	68a1      	ldr	r1, [r4, #8]
 8005f66:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <cleanup_stdio+0x38>)
 8005f68:	4299      	cmp	r1, r3
 8005f6a:	d002      	beq.n	8005f72 <cleanup_stdio+0x1e>
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f001 fe2b 	bl	8007bc8 <_fflush_r>
 8005f72:	68e1      	ldr	r1, [r4, #12]
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <cleanup_stdio+0x3c>)
 8005f76:	4299      	cmp	r1, r3
 8005f78:	d004      	beq.n	8005f84 <cleanup_stdio+0x30>
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f80:	f001 be22 	b.w	8007bc8 <_fflush_r>
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	bf00      	nop
 8005f88:	20000d60 	.word	0x20000d60
 8005f8c:	20000dc8 	.word	0x20000dc8
 8005f90:	20000e30 	.word	0x20000e30

08005f94 <global_stdio_init.part.0>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <global_stdio_init.part.0+0x30>)
 8005f98:	4c0b      	ldr	r4, [pc, #44]	; (8005fc8 <global_stdio_init.part.0+0x34>)
 8005f9a:	4a0c      	ldr	r2, [pc, #48]	; (8005fcc <global_stdio_init.part.0+0x38>)
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2104      	movs	r1, #4
 8005fa4:	f7ff ff94 	bl	8005ed0 <std>
 8005fa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005fac:	2201      	movs	r2, #1
 8005fae:	2109      	movs	r1, #9
 8005fb0:	f7ff ff8e 	bl	8005ed0 <std>
 8005fb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005fb8:	2202      	movs	r2, #2
 8005fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fbe:	2112      	movs	r1, #18
 8005fc0:	f7ff bf86 	b.w	8005ed0 <std>
 8005fc4:	20000e98 	.word	0x20000e98
 8005fc8:	20000d60 	.word	0x20000d60
 8005fcc:	08005f3d 	.word	0x08005f3d

08005fd0 <__sfp_lock_acquire>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	; (8005fd8 <__sfp_lock_acquire+0x8>)
 8005fd2:	f000 b920 	b.w	8006216 <__retarget_lock_acquire_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	20000ea1 	.word	0x20000ea1

08005fdc <__sfp_lock_release>:
 8005fdc:	4801      	ldr	r0, [pc, #4]	; (8005fe4 <__sfp_lock_release+0x8>)
 8005fde:	f000 b91b 	b.w	8006218 <__retarget_lock_release_recursive>
 8005fe2:	bf00      	nop
 8005fe4:	20000ea1 	.word	0x20000ea1

08005fe8 <__sinit>:
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	4604      	mov	r4, r0
 8005fec:	f7ff fff0 	bl	8005fd0 <__sfp_lock_acquire>
 8005ff0:	6a23      	ldr	r3, [r4, #32]
 8005ff2:	b11b      	cbz	r3, 8005ffc <__sinit+0x14>
 8005ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff8:	f7ff bff0 	b.w	8005fdc <__sfp_lock_release>
 8005ffc:	4b04      	ldr	r3, [pc, #16]	; (8006010 <__sinit+0x28>)
 8005ffe:	6223      	str	r3, [r4, #32]
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <__sinit+0x2c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1f5      	bne.n	8005ff4 <__sinit+0xc>
 8006008:	f7ff ffc4 	bl	8005f94 <global_stdio_init.part.0>
 800600c:	e7f2      	b.n	8005ff4 <__sinit+0xc>
 800600e:	bf00      	nop
 8006010:	08005f55 	.word	0x08005f55
 8006014:	20000e98 	.word	0x20000e98

08006018 <_fwalk_sglue>:
 8006018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800601c:	4607      	mov	r7, r0
 800601e:	4688      	mov	r8, r1
 8006020:	4614      	mov	r4, r2
 8006022:	2600      	movs	r6, #0
 8006024:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006028:	f1b9 0901 	subs.w	r9, r9, #1
 800602c:	d505      	bpl.n	800603a <_fwalk_sglue+0x22>
 800602e:	6824      	ldr	r4, [r4, #0]
 8006030:	2c00      	cmp	r4, #0
 8006032:	d1f7      	bne.n	8006024 <_fwalk_sglue+0xc>
 8006034:	4630      	mov	r0, r6
 8006036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603a:	89ab      	ldrh	r3, [r5, #12]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d907      	bls.n	8006050 <_fwalk_sglue+0x38>
 8006040:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006044:	3301      	adds	r3, #1
 8006046:	d003      	beq.n	8006050 <_fwalk_sglue+0x38>
 8006048:	4629      	mov	r1, r5
 800604a:	4638      	mov	r0, r7
 800604c:	47c0      	blx	r8
 800604e:	4306      	orrs	r6, r0
 8006050:	3568      	adds	r5, #104	; 0x68
 8006052:	e7e9      	b.n	8006028 <_fwalk_sglue+0x10>

08006054 <siprintf>:
 8006054:	b40e      	push	{r1, r2, r3}
 8006056:	b500      	push	{lr}
 8006058:	b09c      	sub	sp, #112	; 0x70
 800605a:	ab1d      	add	r3, sp, #116	; 0x74
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	9006      	str	r0, [sp, #24]
 8006060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006064:	4809      	ldr	r0, [pc, #36]	; (800608c <siprintf+0x38>)
 8006066:	9107      	str	r1, [sp, #28]
 8006068:	9104      	str	r1, [sp, #16]
 800606a:	4909      	ldr	r1, [pc, #36]	; (8006090 <siprintf+0x3c>)
 800606c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006070:	9105      	str	r1, [sp, #20]
 8006072:	6800      	ldr	r0, [r0, #0]
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	a902      	add	r1, sp, #8
 8006078:	f001 fc22 	bl	80078c0 <_svfiprintf_r>
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	2200      	movs	r2, #0
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	b01c      	add	sp, #112	; 0x70
 8006084:	f85d eb04 	ldr.w	lr, [sp], #4
 8006088:	b003      	add	sp, #12
 800608a:	4770      	bx	lr
 800608c:	20000068 	.word	0x20000068
 8006090:	ffff0208 	.word	0xffff0208

08006094 <__sread>:
 8006094:	b510      	push	{r4, lr}
 8006096:	460c      	mov	r4, r1
 8006098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800609c:	f000 f86c 	bl	8006178 <_read_r>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	bfab      	itete	ge
 80060a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060a6:	89a3      	ldrhlt	r3, [r4, #12]
 80060a8:	181b      	addge	r3, r3, r0
 80060aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ae:	bfac      	ite	ge
 80060b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80060b2:	81a3      	strhlt	r3, [r4, #12]
 80060b4:	bd10      	pop	{r4, pc}

080060b6 <__swrite>:
 80060b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ba:	461f      	mov	r7, r3
 80060bc:	898b      	ldrh	r3, [r1, #12]
 80060be:	05db      	lsls	r3, r3, #23
 80060c0:	4605      	mov	r5, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	4616      	mov	r6, r2
 80060c6:	d505      	bpl.n	80060d4 <__swrite+0x1e>
 80060c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060cc:	2302      	movs	r3, #2
 80060ce:	2200      	movs	r2, #0
 80060d0:	f000 f840 	bl	8006154 <_lseek_r>
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060de:	81a3      	strh	r3, [r4, #12]
 80060e0:	4632      	mov	r2, r6
 80060e2:	463b      	mov	r3, r7
 80060e4:	4628      	mov	r0, r5
 80060e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ea:	f000 b857 	b.w	800619c <_write_r>

080060ee <__sseek>:
 80060ee:	b510      	push	{r4, lr}
 80060f0:	460c      	mov	r4, r1
 80060f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f6:	f000 f82d 	bl	8006154 <_lseek_r>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	89a3      	ldrh	r3, [r4, #12]
 80060fe:	bf15      	itete	ne
 8006100:	6560      	strne	r0, [r4, #84]	; 0x54
 8006102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800610a:	81a3      	strheq	r3, [r4, #12]
 800610c:	bf18      	it	ne
 800610e:	81a3      	strhne	r3, [r4, #12]
 8006110:	bd10      	pop	{r4, pc}

08006112 <__sclose>:
 8006112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006116:	f000 b80d 	b.w	8006134 <_close_r>

0800611a <memset>:
 800611a:	4402      	add	r2, r0
 800611c:	4603      	mov	r3, r0
 800611e:	4293      	cmp	r3, r2
 8006120:	d100      	bne.n	8006124 <memset+0xa>
 8006122:	4770      	bx	lr
 8006124:	f803 1b01 	strb.w	r1, [r3], #1
 8006128:	e7f9      	b.n	800611e <memset+0x4>
	...

0800612c <_localeconv_r>:
 800612c:	4800      	ldr	r0, [pc, #0]	; (8006130 <_localeconv_r+0x4>)
 800612e:	4770      	bx	lr
 8006130:	2000015c 	.word	0x2000015c

08006134 <_close_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d06      	ldr	r5, [pc, #24]	; (8006150 <_close_r+0x1c>)
 8006138:	2300      	movs	r3, #0
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fb fd89 	bl	8001c56 <_close>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_close_r+0x1a>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_close_r+0x1a>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20000e9c 	.word	0x20000e9c

08006154 <_lseek_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d07      	ldr	r5, [pc, #28]	; (8006174 <_lseek_r+0x20>)
 8006158:	4604      	mov	r4, r0
 800615a:	4608      	mov	r0, r1
 800615c:	4611      	mov	r1, r2
 800615e:	2200      	movs	r2, #0
 8006160:	602a      	str	r2, [r5, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	f7fb fd9e 	bl	8001ca4 <_lseek>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_lseek_r+0x1e>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_lseek_r+0x1e>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000e9c 	.word	0x20000e9c

08006178 <_read_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d07      	ldr	r5, [pc, #28]	; (8006198 <_read_r+0x20>)
 800617c:	4604      	mov	r4, r0
 800617e:	4608      	mov	r0, r1
 8006180:	4611      	mov	r1, r2
 8006182:	2200      	movs	r2, #0
 8006184:	602a      	str	r2, [r5, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	f7fb fd2c 	bl	8001be4 <_read>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_read_r+0x1e>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_read_r+0x1e>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20000e9c 	.word	0x20000e9c

0800619c <_write_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d07      	ldr	r5, [pc, #28]	; (80061bc <_write_r+0x20>)
 80061a0:	4604      	mov	r4, r0
 80061a2:	4608      	mov	r0, r1
 80061a4:	4611      	mov	r1, r2
 80061a6:	2200      	movs	r2, #0
 80061a8:	602a      	str	r2, [r5, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f7fb fd37 	bl	8001c1e <_write>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_write_r+0x1e>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_write_r+0x1e>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20000e9c 	.word	0x20000e9c

080061c0 <__errno>:
 80061c0:	4b01      	ldr	r3, [pc, #4]	; (80061c8 <__errno+0x8>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000068 	.word	0x20000068

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	4d0d      	ldr	r5, [pc, #52]	; (8006204 <__libc_init_array+0x38>)
 80061d0:	4c0d      	ldr	r4, [pc, #52]	; (8006208 <__libc_init_array+0x3c>)
 80061d2:	1b64      	subs	r4, r4, r5
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	2600      	movs	r6, #0
 80061d8:	42a6      	cmp	r6, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	4d0b      	ldr	r5, [pc, #44]	; (800620c <__libc_init_array+0x40>)
 80061de:	4c0c      	ldr	r4, [pc, #48]	; (8006210 <__libc_init_array+0x44>)
 80061e0:	f002 f896 	bl	8008310 <_init>
 80061e4:	1b64      	subs	r4, r4, r5
 80061e6:	10a4      	asrs	r4, r4, #2
 80061e8:	2600      	movs	r6, #0
 80061ea:	42a6      	cmp	r6, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f4:	4798      	blx	r3
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fe:	4798      	blx	r3
 8006200:	3601      	adds	r6, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	0800893c 	.word	0x0800893c
 8006208:	0800893c 	.word	0x0800893c
 800620c:	0800893c 	.word	0x0800893c
 8006210:	08008940 	.word	0x08008940

08006214 <__retarget_lock_init_recursive>:
 8006214:	4770      	bx	lr

08006216 <__retarget_lock_acquire_recursive>:
 8006216:	4770      	bx	lr

08006218 <__retarget_lock_release_recursive>:
 8006218:	4770      	bx	lr

0800621a <quorem>:
 800621a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621e:	6903      	ldr	r3, [r0, #16]
 8006220:	690c      	ldr	r4, [r1, #16]
 8006222:	42a3      	cmp	r3, r4
 8006224:	4607      	mov	r7, r0
 8006226:	db7e      	blt.n	8006326 <quorem+0x10c>
 8006228:	3c01      	subs	r4, #1
 800622a:	f101 0814 	add.w	r8, r1, #20
 800622e:	f100 0514 	add.w	r5, r0, #20
 8006232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800623c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006240:	3301      	adds	r3, #1
 8006242:	429a      	cmp	r2, r3
 8006244:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006248:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800624c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006250:	d331      	bcc.n	80062b6 <quorem+0x9c>
 8006252:	f04f 0e00 	mov.w	lr, #0
 8006256:	4640      	mov	r0, r8
 8006258:	46ac      	mov	ip, r5
 800625a:	46f2      	mov	sl, lr
 800625c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006260:	b293      	uxth	r3, r2
 8006262:	fb06 e303 	mla	r3, r6, r3, lr
 8006266:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800626a:	0c1a      	lsrs	r2, r3, #16
 800626c:	b29b      	uxth	r3, r3
 800626e:	ebaa 0303 	sub.w	r3, sl, r3
 8006272:	f8dc a000 	ldr.w	sl, [ip]
 8006276:	fa13 f38a 	uxtah	r3, r3, sl
 800627a:	fb06 220e 	mla	r2, r6, lr, r2
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	9b00      	ldr	r3, [sp, #0]
 8006282:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006286:	b292      	uxth	r2, r2
 8006288:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800628c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006290:	f8bd 3000 	ldrh.w	r3, [sp]
 8006294:	4581      	cmp	r9, r0
 8006296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800629a:	f84c 3b04 	str.w	r3, [ip], #4
 800629e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062a2:	d2db      	bcs.n	800625c <quorem+0x42>
 80062a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80062a8:	b92b      	cbnz	r3, 80062b6 <quorem+0x9c>
 80062aa:	9b01      	ldr	r3, [sp, #4]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	429d      	cmp	r5, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	d32c      	bcc.n	800630e <quorem+0xf4>
 80062b4:	613c      	str	r4, [r7, #16]
 80062b6:	4638      	mov	r0, r7
 80062b8:	f001 f9a8 	bl	800760c <__mcmp>
 80062bc:	2800      	cmp	r0, #0
 80062be:	db22      	blt.n	8006306 <quorem+0xec>
 80062c0:	3601      	adds	r6, #1
 80062c2:	4629      	mov	r1, r5
 80062c4:	2000      	movs	r0, #0
 80062c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80062ca:	f8d1 c000 	ldr.w	ip, [r1]
 80062ce:	b293      	uxth	r3, r2
 80062d0:	1ac3      	subs	r3, r0, r3
 80062d2:	0c12      	lsrs	r2, r2, #16
 80062d4:	fa13 f38c 	uxtah	r3, r3, ip
 80062d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80062dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062e6:	45c1      	cmp	r9, r8
 80062e8:	f841 3b04 	str.w	r3, [r1], #4
 80062ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062f0:	d2e9      	bcs.n	80062c6 <quorem+0xac>
 80062f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062fa:	b922      	cbnz	r2, 8006306 <quorem+0xec>
 80062fc:	3b04      	subs	r3, #4
 80062fe:	429d      	cmp	r5, r3
 8006300:	461a      	mov	r2, r3
 8006302:	d30a      	bcc.n	800631a <quorem+0x100>
 8006304:	613c      	str	r4, [r7, #16]
 8006306:	4630      	mov	r0, r6
 8006308:	b003      	add	sp, #12
 800630a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	3b04      	subs	r3, #4
 8006312:	2a00      	cmp	r2, #0
 8006314:	d1ce      	bne.n	80062b4 <quorem+0x9a>
 8006316:	3c01      	subs	r4, #1
 8006318:	e7c9      	b.n	80062ae <quorem+0x94>
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	3b04      	subs	r3, #4
 800631e:	2a00      	cmp	r2, #0
 8006320:	d1f0      	bne.n	8006304 <quorem+0xea>
 8006322:	3c01      	subs	r4, #1
 8006324:	e7eb      	b.n	80062fe <quorem+0xe4>
 8006326:	2000      	movs	r0, #0
 8006328:	e7ee      	b.n	8006308 <quorem+0xee>
 800632a:	0000      	movs	r0, r0
 800632c:	0000      	movs	r0, r0
	...

08006330 <_dtoa_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	ed2d 8b04 	vpush	{d8-d9}
 8006338:	69c5      	ldr	r5, [r0, #28]
 800633a:	b093      	sub	sp, #76	; 0x4c
 800633c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006340:	ec57 6b10 	vmov	r6, r7, d0
 8006344:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006348:	9107      	str	r1, [sp, #28]
 800634a:	4604      	mov	r4, r0
 800634c:	920a      	str	r2, [sp, #40]	; 0x28
 800634e:	930d      	str	r3, [sp, #52]	; 0x34
 8006350:	b975      	cbnz	r5, 8006370 <_dtoa_r+0x40>
 8006352:	2010      	movs	r0, #16
 8006354:	f000 fe2a 	bl	8006fac <malloc>
 8006358:	4602      	mov	r2, r0
 800635a:	61e0      	str	r0, [r4, #28]
 800635c:	b920      	cbnz	r0, 8006368 <_dtoa_r+0x38>
 800635e:	4bae      	ldr	r3, [pc, #696]	; (8006618 <_dtoa_r+0x2e8>)
 8006360:	21ef      	movs	r1, #239	; 0xef
 8006362:	48ae      	ldr	r0, [pc, #696]	; (800661c <_dtoa_r+0x2ec>)
 8006364:	f001 fc90 	bl	8007c88 <__assert_func>
 8006368:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800636c:	6005      	str	r5, [r0, #0]
 800636e:	60c5      	str	r5, [r0, #12]
 8006370:	69e3      	ldr	r3, [r4, #28]
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	b151      	cbz	r1, 800638c <_dtoa_r+0x5c>
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	604a      	str	r2, [r1, #4]
 800637a:	2301      	movs	r3, #1
 800637c:	4093      	lsls	r3, r2
 800637e:	608b      	str	r3, [r1, #8]
 8006380:	4620      	mov	r0, r4
 8006382:	f000 ff07 	bl	8007194 <_Bfree>
 8006386:	69e3      	ldr	r3, [r4, #28]
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	1e3b      	subs	r3, r7, #0
 800638e:	bfbb      	ittet	lt
 8006390:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006394:	9303      	strlt	r3, [sp, #12]
 8006396:	2300      	movge	r3, #0
 8006398:	2201      	movlt	r2, #1
 800639a:	bfac      	ite	ge
 800639c:	f8c8 3000 	strge.w	r3, [r8]
 80063a0:	f8c8 2000 	strlt.w	r2, [r8]
 80063a4:	4b9e      	ldr	r3, [pc, #632]	; (8006620 <_dtoa_r+0x2f0>)
 80063a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063aa:	ea33 0308 	bics.w	r3, r3, r8
 80063ae:	d11b      	bne.n	80063e8 <_dtoa_r+0xb8>
 80063b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80063bc:	4333      	orrs	r3, r6
 80063be:	f000 8593 	beq.w	8006ee8 <_dtoa_r+0xbb8>
 80063c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063c4:	b963      	cbnz	r3, 80063e0 <_dtoa_r+0xb0>
 80063c6:	4b97      	ldr	r3, [pc, #604]	; (8006624 <_dtoa_r+0x2f4>)
 80063c8:	e027      	b.n	800641a <_dtoa_r+0xea>
 80063ca:	4b97      	ldr	r3, [pc, #604]	; (8006628 <_dtoa_r+0x2f8>)
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	3308      	adds	r3, #8
 80063d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	9800      	ldr	r0, [sp, #0]
 80063d6:	b013      	add	sp, #76	; 0x4c
 80063d8:	ecbd 8b04 	vpop	{d8-d9}
 80063dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	4b90      	ldr	r3, [pc, #576]	; (8006624 <_dtoa_r+0x2f4>)
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	3303      	adds	r3, #3
 80063e6:	e7f3      	b.n	80063d0 <_dtoa_r+0xa0>
 80063e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063ec:	2200      	movs	r2, #0
 80063ee:	ec51 0b17 	vmov	r0, r1, d7
 80063f2:	eeb0 8a47 	vmov.f32	s16, s14
 80063f6:	eef0 8a67 	vmov.f32	s17, s15
 80063fa:	2300      	movs	r3, #0
 80063fc:	f7fa fb84 	bl	8000b08 <__aeabi_dcmpeq>
 8006400:	4681      	mov	r9, r0
 8006402:	b160      	cbz	r0, 800641e <_dtoa_r+0xee>
 8006404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006406:	2301      	movs	r3, #1
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 8568 	beq.w	8006ee2 <_dtoa_r+0xbb2>
 8006412:	4b86      	ldr	r3, [pc, #536]	; (800662c <_dtoa_r+0x2fc>)
 8006414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	3b01      	subs	r3, #1
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	e7da      	b.n	80063d4 <_dtoa_r+0xa4>
 800641e:	aa10      	add	r2, sp, #64	; 0x40
 8006420:	a911      	add	r1, sp, #68	; 0x44
 8006422:	4620      	mov	r0, r4
 8006424:	eeb0 0a48 	vmov.f32	s0, s16
 8006428:	eef0 0a68 	vmov.f32	s1, s17
 800642c:	f001 f994 	bl	8007758 <__d2b>
 8006430:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006434:	4682      	mov	sl, r0
 8006436:	2d00      	cmp	r5, #0
 8006438:	d07f      	beq.n	800653a <_dtoa_r+0x20a>
 800643a:	ee18 3a90 	vmov	r3, s17
 800643e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006442:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006446:	ec51 0b18 	vmov	r0, r1, d8
 800644a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800644e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006452:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006456:	4619      	mov	r1, r3
 8006458:	2200      	movs	r2, #0
 800645a:	4b75      	ldr	r3, [pc, #468]	; (8006630 <_dtoa_r+0x300>)
 800645c:	f7f9 ff34 	bl	80002c8 <__aeabi_dsub>
 8006460:	a367      	add	r3, pc, #412	; (adr r3, 8006600 <_dtoa_r+0x2d0>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	f7fa f8e7 	bl	8000638 <__aeabi_dmul>
 800646a:	a367      	add	r3, pc, #412	; (adr r3, 8006608 <_dtoa_r+0x2d8>)
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f7f9 ff2c 	bl	80002cc <__adddf3>
 8006474:	4606      	mov	r6, r0
 8006476:	4628      	mov	r0, r5
 8006478:	460f      	mov	r7, r1
 800647a:	f7fa f873 	bl	8000564 <__aeabi_i2d>
 800647e:	a364      	add	r3, pc, #400	; (adr r3, 8006610 <_dtoa_r+0x2e0>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f7fa f8d8 	bl	8000638 <__aeabi_dmul>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7f9 ff1c 	bl	80002cc <__adddf3>
 8006494:	4606      	mov	r6, r0
 8006496:	460f      	mov	r7, r1
 8006498:	f7fa fb7e 	bl	8000b98 <__aeabi_d2iz>
 800649c:	2200      	movs	r2, #0
 800649e:	4683      	mov	fp, r0
 80064a0:	2300      	movs	r3, #0
 80064a2:	4630      	mov	r0, r6
 80064a4:	4639      	mov	r1, r7
 80064a6:	f7fa fb39 	bl	8000b1c <__aeabi_dcmplt>
 80064aa:	b148      	cbz	r0, 80064c0 <_dtoa_r+0x190>
 80064ac:	4658      	mov	r0, fp
 80064ae:	f7fa f859 	bl	8000564 <__aeabi_i2d>
 80064b2:	4632      	mov	r2, r6
 80064b4:	463b      	mov	r3, r7
 80064b6:	f7fa fb27 	bl	8000b08 <__aeabi_dcmpeq>
 80064ba:	b908      	cbnz	r0, 80064c0 <_dtoa_r+0x190>
 80064bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064c0:	f1bb 0f16 	cmp.w	fp, #22
 80064c4:	d857      	bhi.n	8006576 <_dtoa_r+0x246>
 80064c6:	4b5b      	ldr	r3, [pc, #364]	; (8006634 <_dtoa_r+0x304>)
 80064c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d0:	ec51 0b18 	vmov	r0, r1, d8
 80064d4:	f7fa fb22 	bl	8000b1c <__aeabi_dcmplt>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d04e      	beq.n	800657a <_dtoa_r+0x24a>
 80064dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064e0:	2300      	movs	r3, #0
 80064e2:	930c      	str	r3, [sp, #48]	; 0x30
 80064e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064e6:	1b5b      	subs	r3, r3, r5
 80064e8:	1e5a      	subs	r2, r3, #1
 80064ea:	bf45      	ittet	mi
 80064ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80064f0:	9305      	strmi	r3, [sp, #20]
 80064f2:	2300      	movpl	r3, #0
 80064f4:	2300      	movmi	r3, #0
 80064f6:	9206      	str	r2, [sp, #24]
 80064f8:	bf54      	ite	pl
 80064fa:	9305      	strpl	r3, [sp, #20]
 80064fc:	9306      	strmi	r3, [sp, #24]
 80064fe:	f1bb 0f00 	cmp.w	fp, #0
 8006502:	db3c      	blt.n	800657e <_dtoa_r+0x24e>
 8006504:	9b06      	ldr	r3, [sp, #24]
 8006506:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800650a:	445b      	add	r3, fp
 800650c:	9306      	str	r3, [sp, #24]
 800650e:	2300      	movs	r3, #0
 8006510:	9308      	str	r3, [sp, #32]
 8006512:	9b07      	ldr	r3, [sp, #28]
 8006514:	2b09      	cmp	r3, #9
 8006516:	d868      	bhi.n	80065ea <_dtoa_r+0x2ba>
 8006518:	2b05      	cmp	r3, #5
 800651a:	bfc4      	itt	gt
 800651c:	3b04      	subgt	r3, #4
 800651e:	9307      	strgt	r3, [sp, #28]
 8006520:	9b07      	ldr	r3, [sp, #28]
 8006522:	f1a3 0302 	sub.w	r3, r3, #2
 8006526:	bfcc      	ite	gt
 8006528:	2500      	movgt	r5, #0
 800652a:	2501      	movle	r5, #1
 800652c:	2b03      	cmp	r3, #3
 800652e:	f200 8085 	bhi.w	800663c <_dtoa_r+0x30c>
 8006532:	e8df f003 	tbb	[pc, r3]
 8006536:	3b2e      	.short	0x3b2e
 8006538:	5839      	.short	0x5839
 800653a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800653e:	441d      	add	r5, r3
 8006540:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006544:	2b20      	cmp	r3, #32
 8006546:	bfc1      	itttt	gt
 8006548:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800654c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006550:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006554:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006558:	bfd6      	itet	le
 800655a:	f1c3 0320 	rsble	r3, r3, #32
 800655e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006562:	fa06 f003 	lslle.w	r0, r6, r3
 8006566:	f7f9 ffed 	bl	8000544 <__aeabi_ui2d>
 800656a:	2201      	movs	r2, #1
 800656c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006570:	3d01      	subs	r5, #1
 8006572:	920e      	str	r2, [sp, #56]	; 0x38
 8006574:	e76f      	b.n	8006456 <_dtoa_r+0x126>
 8006576:	2301      	movs	r3, #1
 8006578:	e7b3      	b.n	80064e2 <_dtoa_r+0x1b2>
 800657a:	900c      	str	r0, [sp, #48]	; 0x30
 800657c:	e7b2      	b.n	80064e4 <_dtoa_r+0x1b4>
 800657e:	9b05      	ldr	r3, [sp, #20]
 8006580:	eba3 030b 	sub.w	r3, r3, fp
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	f1cb 0300 	rsb	r3, fp, #0
 800658a:	9308      	str	r3, [sp, #32]
 800658c:	2300      	movs	r3, #0
 800658e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006590:	e7bf      	b.n	8006512 <_dtoa_r+0x1e2>
 8006592:	2300      	movs	r3, #0
 8006594:	9309      	str	r3, [sp, #36]	; 0x24
 8006596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	dc52      	bgt.n	8006642 <_dtoa_r+0x312>
 800659c:	2301      	movs	r3, #1
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	461a      	mov	r2, r3
 80065a4:	920a      	str	r2, [sp, #40]	; 0x28
 80065a6:	e00b      	b.n	80065c0 <_dtoa_r+0x290>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e7f3      	b.n	8006594 <_dtoa_r+0x264>
 80065ac:	2300      	movs	r3, #0
 80065ae:	9309      	str	r3, [sp, #36]	; 0x24
 80065b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b2:	445b      	add	r3, fp
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	3301      	adds	r3, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	9304      	str	r3, [sp, #16]
 80065bc:	bfb8      	it	lt
 80065be:	2301      	movlt	r3, #1
 80065c0:	69e0      	ldr	r0, [r4, #28]
 80065c2:	2100      	movs	r1, #0
 80065c4:	2204      	movs	r2, #4
 80065c6:	f102 0614 	add.w	r6, r2, #20
 80065ca:	429e      	cmp	r6, r3
 80065cc:	d93d      	bls.n	800664a <_dtoa_r+0x31a>
 80065ce:	6041      	str	r1, [r0, #4]
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fd9f 	bl	8007114 <_Balloc>
 80065d6:	9000      	str	r0, [sp, #0]
 80065d8:	2800      	cmp	r0, #0
 80065da:	d139      	bne.n	8006650 <_dtoa_r+0x320>
 80065dc:	4b16      	ldr	r3, [pc, #88]	; (8006638 <_dtoa_r+0x308>)
 80065de:	4602      	mov	r2, r0
 80065e0:	f240 11af 	movw	r1, #431	; 0x1af
 80065e4:	e6bd      	b.n	8006362 <_dtoa_r+0x32>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e7e1      	b.n	80065ae <_dtoa_r+0x27e>
 80065ea:	2501      	movs	r5, #1
 80065ec:	2300      	movs	r3, #0
 80065ee:	9307      	str	r3, [sp, #28]
 80065f0:	9509      	str	r5, [sp, #36]	; 0x24
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295
 80065f6:	9301      	str	r3, [sp, #4]
 80065f8:	9304      	str	r3, [sp, #16]
 80065fa:	2200      	movs	r2, #0
 80065fc:	2312      	movs	r3, #18
 80065fe:	e7d1      	b.n	80065a4 <_dtoa_r+0x274>
 8006600:	636f4361 	.word	0x636f4361
 8006604:	3fd287a7 	.word	0x3fd287a7
 8006608:	8b60c8b3 	.word	0x8b60c8b3
 800660c:	3fc68a28 	.word	0x3fc68a28
 8006610:	509f79fb 	.word	0x509f79fb
 8006614:	3fd34413 	.word	0x3fd34413
 8006618:	08008601 	.word	0x08008601
 800661c:	08008618 	.word	0x08008618
 8006620:	7ff00000 	.word	0x7ff00000
 8006624:	080085fd 	.word	0x080085fd
 8006628:	080085f4 	.word	0x080085f4
 800662c:	080085d1 	.word	0x080085d1
 8006630:	3ff80000 	.word	0x3ff80000
 8006634:	08008708 	.word	0x08008708
 8006638:	08008670 	.word	0x08008670
 800663c:	2301      	movs	r3, #1
 800663e:	9309      	str	r3, [sp, #36]	; 0x24
 8006640:	e7d7      	b.n	80065f2 <_dtoa_r+0x2c2>
 8006642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	9304      	str	r3, [sp, #16]
 8006648:	e7ba      	b.n	80065c0 <_dtoa_r+0x290>
 800664a:	3101      	adds	r1, #1
 800664c:	0052      	lsls	r2, r2, #1
 800664e:	e7ba      	b.n	80065c6 <_dtoa_r+0x296>
 8006650:	69e3      	ldr	r3, [r4, #28]
 8006652:	9a00      	ldr	r2, [sp, #0]
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	2b0e      	cmp	r3, #14
 800665a:	f200 80a8 	bhi.w	80067ae <_dtoa_r+0x47e>
 800665e:	2d00      	cmp	r5, #0
 8006660:	f000 80a5 	beq.w	80067ae <_dtoa_r+0x47e>
 8006664:	f1bb 0f00 	cmp.w	fp, #0
 8006668:	dd38      	ble.n	80066dc <_dtoa_r+0x3ac>
 800666a:	4bc0      	ldr	r3, [pc, #768]	; (800696c <_dtoa_r+0x63c>)
 800666c:	f00b 020f 	and.w	r2, fp, #15
 8006670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006674:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006678:	e9d3 6700 	ldrd	r6, r7, [r3]
 800667c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006680:	d019      	beq.n	80066b6 <_dtoa_r+0x386>
 8006682:	4bbb      	ldr	r3, [pc, #748]	; (8006970 <_dtoa_r+0x640>)
 8006684:	ec51 0b18 	vmov	r0, r1, d8
 8006688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800668c:	f7fa f8fe 	bl	800088c <__aeabi_ddiv>
 8006690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006694:	f008 080f 	and.w	r8, r8, #15
 8006698:	2503      	movs	r5, #3
 800669a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006970 <_dtoa_r+0x640>
 800669e:	f1b8 0f00 	cmp.w	r8, #0
 80066a2:	d10a      	bne.n	80066ba <_dtoa_r+0x38a>
 80066a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a8:	4632      	mov	r2, r6
 80066aa:	463b      	mov	r3, r7
 80066ac:	f7fa f8ee 	bl	800088c <__aeabi_ddiv>
 80066b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b4:	e02b      	b.n	800670e <_dtoa_r+0x3de>
 80066b6:	2502      	movs	r5, #2
 80066b8:	e7ef      	b.n	800669a <_dtoa_r+0x36a>
 80066ba:	f018 0f01 	tst.w	r8, #1
 80066be:	d008      	beq.n	80066d2 <_dtoa_r+0x3a2>
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80066c8:	f7f9 ffb6 	bl	8000638 <__aeabi_dmul>
 80066cc:	3501      	adds	r5, #1
 80066ce:	4606      	mov	r6, r0
 80066d0:	460f      	mov	r7, r1
 80066d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066d6:	f109 0908 	add.w	r9, r9, #8
 80066da:	e7e0      	b.n	800669e <_dtoa_r+0x36e>
 80066dc:	f000 809f 	beq.w	800681e <_dtoa_r+0x4ee>
 80066e0:	f1cb 0600 	rsb	r6, fp, #0
 80066e4:	4ba1      	ldr	r3, [pc, #644]	; (800696c <_dtoa_r+0x63c>)
 80066e6:	4fa2      	ldr	r7, [pc, #648]	; (8006970 <_dtoa_r+0x640>)
 80066e8:	f006 020f 	and.w	r2, r6, #15
 80066ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	ec51 0b18 	vmov	r0, r1, d8
 80066f8:	f7f9 ff9e 	bl	8000638 <__aeabi_dmul>
 80066fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006700:	1136      	asrs	r6, r6, #4
 8006702:	2300      	movs	r3, #0
 8006704:	2502      	movs	r5, #2
 8006706:	2e00      	cmp	r6, #0
 8006708:	d17e      	bne.n	8006808 <_dtoa_r+0x4d8>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1d0      	bne.n	80066b0 <_dtoa_r+0x380>
 800670e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006710:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8084 	beq.w	8006822 <_dtoa_r+0x4f2>
 800671a:	4b96      	ldr	r3, [pc, #600]	; (8006974 <_dtoa_r+0x644>)
 800671c:	2200      	movs	r2, #0
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7fa f9fb 	bl	8000b1c <__aeabi_dcmplt>
 8006726:	2800      	cmp	r0, #0
 8006728:	d07b      	beq.n	8006822 <_dtoa_r+0x4f2>
 800672a:	9b04      	ldr	r3, [sp, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d078      	beq.n	8006822 <_dtoa_r+0x4f2>
 8006730:	9b01      	ldr	r3, [sp, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	dd39      	ble.n	80067aa <_dtoa_r+0x47a>
 8006736:	4b90      	ldr	r3, [pc, #576]	; (8006978 <_dtoa_r+0x648>)
 8006738:	2200      	movs	r2, #0
 800673a:	4640      	mov	r0, r8
 800673c:	4649      	mov	r1, r9
 800673e:	f7f9 ff7b 	bl	8000638 <__aeabi_dmul>
 8006742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006746:	9e01      	ldr	r6, [sp, #4]
 8006748:	f10b 37ff 	add.w	r7, fp, #4294967295
 800674c:	3501      	adds	r5, #1
 800674e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006752:	4628      	mov	r0, r5
 8006754:	f7f9 ff06 	bl	8000564 <__aeabi_i2d>
 8006758:	4642      	mov	r2, r8
 800675a:	464b      	mov	r3, r9
 800675c:	f7f9 ff6c 	bl	8000638 <__aeabi_dmul>
 8006760:	4b86      	ldr	r3, [pc, #536]	; (800697c <_dtoa_r+0x64c>)
 8006762:	2200      	movs	r2, #0
 8006764:	f7f9 fdb2 	bl	80002cc <__adddf3>
 8006768:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800676c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006770:	9303      	str	r3, [sp, #12]
 8006772:	2e00      	cmp	r6, #0
 8006774:	d158      	bne.n	8006828 <_dtoa_r+0x4f8>
 8006776:	4b82      	ldr	r3, [pc, #520]	; (8006980 <_dtoa_r+0x650>)
 8006778:	2200      	movs	r2, #0
 800677a:	4640      	mov	r0, r8
 800677c:	4649      	mov	r1, r9
 800677e:	f7f9 fda3 	bl	80002c8 <__aeabi_dsub>
 8006782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006786:	4680      	mov	r8, r0
 8006788:	4689      	mov	r9, r1
 800678a:	f7fa f9e5 	bl	8000b58 <__aeabi_dcmpgt>
 800678e:	2800      	cmp	r0, #0
 8006790:	f040 8296 	bne.w	8006cc0 <_dtoa_r+0x990>
 8006794:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006798:	4640      	mov	r0, r8
 800679a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800679e:	4649      	mov	r1, r9
 80067a0:	f7fa f9bc 	bl	8000b1c <__aeabi_dcmplt>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	f040 8289 	bne.w	8006cbc <_dtoa_r+0x98c>
 80067aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80067ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f2c0 814e 	blt.w	8006a52 <_dtoa_r+0x722>
 80067b6:	f1bb 0f0e 	cmp.w	fp, #14
 80067ba:	f300 814a 	bgt.w	8006a52 <_dtoa_r+0x722>
 80067be:	4b6b      	ldr	r3, [pc, #428]	; (800696c <_dtoa_r+0x63c>)
 80067c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f280 80dc 	bge.w	8006988 <_dtoa_r+0x658>
 80067d0:	9b04      	ldr	r3, [sp, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f300 80d8 	bgt.w	8006988 <_dtoa_r+0x658>
 80067d8:	f040 826f 	bne.w	8006cba <_dtoa_r+0x98a>
 80067dc:	4b68      	ldr	r3, [pc, #416]	; (8006980 <_dtoa_r+0x650>)
 80067de:	2200      	movs	r2, #0
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7f9 ff28 	bl	8000638 <__aeabi_dmul>
 80067e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067ec:	f7fa f9aa 	bl	8000b44 <__aeabi_dcmpge>
 80067f0:	9e04      	ldr	r6, [sp, #16]
 80067f2:	4637      	mov	r7, r6
 80067f4:	2800      	cmp	r0, #0
 80067f6:	f040 8245 	bne.w	8006c84 <_dtoa_r+0x954>
 80067fa:	9d00      	ldr	r5, [sp, #0]
 80067fc:	2331      	movs	r3, #49	; 0x31
 80067fe:	f805 3b01 	strb.w	r3, [r5], #1
 8006802:	f10b 0b01 	add.w	fp, fp, #1
 8006806:	e241      	b.n	8006c8c <_dtoa_r+0x95c>
 8006808:	07f2      	lsls	r2, r6, #31
 800680a:	d505      	bpl.n	8006818 <_dtoa_r+0x4e8>
 800680c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006810:	f7f9 ff12 	bl	8000638 <__aeabi_dmul>
 8006814:	3501      	adds	r5, #1
 8006816:	2301      	movs	r3, #1
 8006818:	1076      	asrs	r6, r6, #1
 800681a:	3708      	adds	r7, #8
 800681c:	e773      	b.n	8006706 <_dtoa_r+0x3d6>
 800681e:	2502      	movs	r5, #2
 8006820:	e775      	b.n	800670e <_dtoa_r+0x3de>
 8006822:	9e04      	ldr	r6, [sp, #16]
 8006824:	465f      	mov	r7, fp
 8006826:	e792      	b.n	800674e <_dtoa_r+0x41e>
 8006828:	9900      	ldr	r1, [sp, #0]
 800682a:	4b50      	ldr	r3, [pc, #320]	; (800696c <_dtoa_r+0x63c>)
 800682c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006830:	4431      	add	r1, r6
 8006832:	9102      	str	r1, [sp, #8]
 8006834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006836:	eeb0 9a47 	vmov.f32	s18, s14
 800683a:	eef0 9a67 	vmov.f32	s19, s15
 800683e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006846:	2900      	cmp	r1, #0
 8006848:	d044      	beq.n	80068d4 <_dtoa_r+0x5a4>
 800684a:	494e      	ldr	r1, [pc, #312]	; (8006984 <_dtoa_r+0x654>)
 800684c:	2000      	movs	r0, #0
 800684e:	f7fa f81d 	bl	800088c <__aeabi_ddiv>
 8006852:	ec53 2b19 	vmov	r2, r3, d9
 8006856:	f7f9 fd37 	bl	80002c8 <__aeabi_dsub>
 800685a:	9d00      	ldr	r5, [sp, #0]
 800685c:	ec41 0b19 	vmov	d9, r0, r1
 8006860:	4649      	mov	r1, r9
 8006862:	4640      	mov	r0, r8
 8006864:	f7fa f998 	bl	8000b98 <__aeabi_d2iz>
 8006868:	4606      	mov	r6, r0
 800686a:	f7f9 fe7b 	bl	8000564 <__aeabi_i2d>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4640      	mov	r0, r8
 8006874:	4649      	mov	r1, r9
 8006876:	f7f9 fd27 	bl	80002c8 <__aeabi_dsub>
 800687a:	3630      	adds	r6, #48	; 0x30
 800687c:	f805 6b01 	strb.w	r6, [r5], #1
 8006880:	ec53 2b19 	vmov	r2, r3, d9
 8006884:	4680      	mov	r8, r0
 8006886:	4689      	mov	r9, r1
 8006888:	f7fa f948 	bl	8000b1c <__aeabi_dcmplt>
 800688c:	2800      	cmp	r0, #0
 800688e:	d164      	bne.n	800695a <_dtoa_r+0x62a>
 8006890:	4642      	mov	r2, r8
 8006892:	464b      	mov	r3, r9
 8006894:	4937      	ldr	r1, [pc, #220]	; (8006974 <_dtoa_r+0x644>)
 8006896:	2000      	movs	r0, #0
 8006898:	f7f9 fd16 	bl	80002c8 <__aeabi_dsub>
 800689c:	ec53 2b19 	vmov	r2, r3, d9
 80068a0:	f7fa f93c 	bl	8000b1c <__aeabi_dcmplt>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	f040 80b6 	bne.w	8006a16 <_dtoa_r+0x6e6>
 80068aa:	9b02      	ldr	r3, [sp, #8]
 80068ac:	429d      	cmp	r5, r3
 80068ae:	f43f af7c 	beq.w	80067aa <_dtoa_r+0x47a>
 80068b2:	4b31      	ldr	r3, [pc, #196]	; (8006978 <_dtoa_r+0x648>)
 80068b4:	ec51 0b19 	vmov	r0, r1, d9
 80068b8:	2200      	movs	r2, #0
 80068ba:	f7f9 febd 	bl	8000638 <__aeabi_dmul>
 80068be:	4b2e      	ldr	r3, [pc, #184]	; (8006978 <_dtoa_r+0x648>)
 80068c0:	ec41 0b19 	vmov	d9, r0, r1
 80068c4:	2200      	movs	r2, #0
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7f9 feb5 	bl	8000638 <__aeabi_dmul>
 80068ce:	4680      	mov	r8, r0
 80068d0:	4689      	mov	r9, r1
 80068d2:	e7c5      	b.n	8006860 <_dtoa_r+0x530>
 80068d4:	ec51 0b17 	vmov	r0, r1, d7
 80068d8:	f7f9 feae 	bl	8000638 <__aeabi_dmul>
 80068dc:	9b02      	ldr	r3, [sp, #8]
 80068de:	9d00      	ldr	r5, [sp, #0]
 80068e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e2:	ec41 0b19 	vmov	d9, r0, r1
 80068e6:	4649      	mov	r1, r9
 80068e8:	4640      	mov	r0, r8
 80068ea:	f7fa f955 	bl	8000b98 <__aeabi_d2iz>
 80068ee:	4606      	mov	r6, r0
 80068f0:	f7f9 fe38 	bl	8000564 <__aeabi_i2d>
 80068f4:	3630      	adds	r6, #48	; 0x30
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7f9 fce3 	bl	80002c8 <__aeabi_dsub>
 8006902:	f805 6b01 	strb.w	r6, [r5], #1
 8006906:	9b02      	ldr	r3, [sp, #8]
 8006908:	429d      	cmp	r5, r3
 800690a:	4680      	mov	r8, r0
 800690c:	4689      	mov	r9, r1
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	d124      	bne.n	800695e <_dtoa_r+0x62e>
 8006914:	4b1b      	ldr	r3, [pc, #108]	; (8006984 <_dtoa_r+0x654>)
 8006916:	ec51 0b19 	vmov	r0, r1, d9
 800691a:	f7f9 fcd7 	bl	80002cc <__adddf3>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f7fa f917 	bl	8000b58 <__aeabi_dcmpgt>
 800692a:	2800      	cmp	r0, #0
 800692c:	d173      	bne.n	8006a16 <_dtoa_r+0x6e6>
 800692e:	ec53 2b19 	vmov	r2, r3, d9
 8006932:	4914      	ldr	r1, [pc, #80]	; (8006984 <_dtoa_r+0x654>)
 8006934:	2000      	movs	r0, #0
 8006936:	f7f9 fcc7 	bl	80002c8 <__aeabi_dsub>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7fa f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8006946:	2800      	cmp	r0, #0
 8006948:	f43f af2f 	beq.w	80067aa <_dtoa_r+0x47a>
 800694c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800694e:	1e6b      	subs	r3, r5, #1
 8006950:	930f      	str	r3, [sp, #60]	; 0x3c
 8006952:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006956:	2b30      	cmp	r3, #48	; 0x30
 8006958:	d0f8      	beq.n	800694c <_dtoa_r+0x61c>
 800695a:	46bb      	mov	fp, r7
 800695c:	e04a      	b.n	80069f4 <_dtoa_r+0x6c4>
 800695e:	4b06      	ldr	r3, [pc, #24]	; (8006978 <_dtoa_r+0x648>)
 8006960:	f7f9 fe6a 	bl	8000638 <__aeabi_dmul>
 8006964:	4680      	mov	r8, r0
 8006966:	4689      	mov	r9, r1
 8006968:	e7bd      	b.n	80068e6 <_dtoa_r+0x5b6>
 800696a:	bf00      	nop
 800696c:	08008708 	.word	0x08008708
 8006970:	080086e0 	.word	0x080086e0
 8006974:	3ff00000 	.word	0x3ff00000
 8006978:	40240000 	.word	0x40240000
 800697c:	401c0000 	.word	0x401c0000
 8006980:	40140000 	.word	0x40140000
 8006984:	3fe00000 	.word	0x3fe00000
 8006988:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800698c:	9d00      	ldr	r5, [sp, #0]
 800698e:	4642      	mov	r2, r8
 8006990:	464b      	mov	r3, r9
 8006992:	4630      	mov	r0, r6
 8006994:	4639      	mov	r1, r7
 8006996:	f7f9 ff79 	bl	800088c <__aeabi_ddiv>
 800699a:	f7fa f8fd 	bl	8000b98 <__aeabi_d2iz>
 800699e:	9001      	str	r0, [sp, #4]
 80069a0:	f7f9 fde0 	bl	8000564 <__aeabi_i2d>
 80069a4:	4642      	mov	r2, r8
 80069a6:	464b      	mov	r3, r9
 80069a8:	f7f9 fe46 	bl	8000638 <__aeabi_dmul>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	f7f9 fc88 	bl	80002c8 <__aeabi_dsub>
 80069b8:	9e01      	ldr	r6, [sp, #4]
 80069ba:	9f04      	ldr	r7, [sp, #16]
 80069bc:	3630      	adds	r6, #48	; 0x30
 80069be:	f805 6b01 	strb.w	r6, [r5], #1
 80069c2:	9e00      	ldr	r6, [sp, #0]
 80069c4:	1bae      	subs	r6, r5, r6
 80069c6:	42b7      	cmp	r7, r6
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	d134      	bne.n	8006a38 <_dtoa_r+0x708>
 80069ce:	f7f9 fc7d 	bl	80002cc <__adddf3>
 80069d2:	4642      	mov	r2, r8
 80069d4:	464b      	mov	r3, r9
 80069d6:	4606      	mov	r6, r0
 80069d8:	460f      	mov	r7, r1
 80069da:	f7fa f8bd 	bl	8000b58 <__aeabi_dcmpgt>
 80069de:	b9c8      	cbnz	r0, 8006a14 <_dtoa_r+0x6e4>
 80069e0:	4642      	mov	r2, r8
 80069e2:	464b      	mov	r3, r9
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	f7fa f88e 	bl	8000b08 <__aeabi_dcmpeq>
 80069ec:	b110      	cbz	r0, 80069f4 <_dtoa_r+0x6c4>
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	07db      	lsls	r3, r3, #31
 80069f2:	d40f      	bmi.n	8006a14 <_dtoa_r+0x6e4>
 80069f4:	4651      	mov	r1, sl
 80069f6:	4620      	mov	r0, r4
 80069f8:	f000 fbcc 	bl	8007194 <_Bfree>
 80069fc:	2300      	movs	r3, #0
 80069fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a00:	702b      	strb	r3, [r5, #0]
 8006a02:	f10b 0301 	add.w	r3, fp, #1
 8006a06:	6013      	str	r3, [r2, #0]
 8006a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f43f ace2 	beq.w	80063d4 <_dtoa_r+0xa4>
 8006a10:	601d      	str	r5, [r3, #0]
 8006a12:	e4df      	b.n	80063d4 <_dtoa_r+0xa4>
 8006a14:	465f      	mov	r7, fp
 8006a16:	462b      	mov	r3, r5
 8006a18:	461d      	mov	r5, r3
 8006a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a1e:	2a39      	cmp	r2, #57	; 0x39
 8006a20:	d106      	bne.n	8006a30 <_dtoa_r+0x700>
 8006a22:	9a00      	ldr	r2, [sp, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d1f7      	bne.n	8006a18 <_dtoa_r+0x6e8>
 8006a28:	9900      	ldr	r1, [sp, #0]
 8006a2a:	2230      	movs	r2, #48	; 0x30
 8006a2c:	3701      	adds	r7, #1
 8006a2e:	700a      	strb	r2, [r1, #0]
 8006a30:	781a      	ldrb	r2, [r3, #0]
 8006a32:	3201      	adds	r2, #1
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	e790      	b.n	800695a <_dtoa_r+0x62a>
 8006a38:	4ba3      	ldr	r3, [pc, #652]	; (8006cc8 <_dtoa_r+0x998>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f7f9 fdfc 	bl	8000638 <__aeabi_dmul>
 8006a40:	2200      	movs	r2, #0
 8006a42:	2300      	movs	r3, #0
 8006a44:	4606      	mov	r6, r0
 8006a46:	460f      	mov	r7, r1
 8006a48:	f7fa f85e 	bl	8000b08 <__aeabi_dcmpeq>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d09e      	beq.n	800698e <_dtoa_r+0x65e>
 8006a50:	e7d0      	b.n	80069f4 <_dtoa_r+0x6c4>
 8006a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a54:	2a00      	cmp	r2, #0
 8006a56:	f000 80ca 	beq.w	8006bee <_dtoa_r+0x8be>
 8006a5a:	9a07      	ldr	r2, [sp, #28]
 8006a5c:	2a01      	cmp	r2, #1
 8006a5e:	f300 80ad 	bgt.w	8006bbc <_dtoa_r+0x88c>
 8006a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	f000 80a5 	beq.w	8006bb4 <_dtoa_r+0x884>
 8006a6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a6e:	9e08      	ldr	r6, [sp, #32]
 8006a70:	9d05      	ldr	r5, [sp, #20]
 8006a72:	9a05      	ldr	r2, [sp, #20]
 8006a74:	441a      	add	r2, r3
 8006a76:	9205      	str	r2, [sp, #20]
 8006a78:	9a06      	ldr	r2, [sp, #24]
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	441a      	add	r2, r3
 8006a7e:	4620      	mov	r0, r4
 8006a80:	9206      	str	r2, [sp, #24]
 8006a82:	f000 fc3d 	bl	8007300 <__i2b>
 8006a86:	4607      	mov	r7, r0
 8006a88:	b165      	cbz	r5, 8006aa4 <_dtoa_r+0x774>
 8006a8a:	9b06      	ldr	r3, [sp, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dd09      	ble.n	8006aa4 <_dtoa_r+0x774>
 8006a90:	42ab      	cmp	r3, r5
 8006a92:	9a05      	ldr	r2, [sp, #20]
 8006a94:	bfa8      	it	ge
 8006a96:	462b      	movge	r3, r5
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	9205      	str	r2, [sp, #20]
 8006a9c:	9a06      	ldr	r2, [sp, #24]
 8006a9e:	1aed      	subs	r5, r5, r3
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	9306      	str	r3, [sp, #24]
 8006aa4:	9b08      	ldr	r3, [sp, #32]
 8006aa6:	b1f3      	cbz	r3, 8006ae6 <_dtoa_r+0x7b6>
 8006aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80a3 	beq.w	8006bf6 <_dtoa_r+0x8c6>
 8006ab0:	2e00      	cmp	r6, #0
 8006ab2:	dd10      	ble.n	8006ad6 <_dtoa_r+0x7a6>
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	4632      	mov	r2, r6
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fce1 	bl	8007480 <__pow5mult>
 8006abe:	4652      	mov	r2, sl
 8006ac0:	4601      	mov	r1, r0
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fc31 	bl	800732c <__multiply>
 8006aca:	4651      	mov	r1, sl
 8006acc:	4680      	mov	r8, r0
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 fb60 	bl	8007194 <_Bfree>
 8006ad4:	46c2      	mov	sl, r8
 8006ad6:	9b08      	ldr	r3, [sp, #32]
 8006ad8:	1b9a      	subs	r2, r3, r6
 8006ada:	d004      	beq.n	8006ae6 <_dtoa_r+0x7b6>
 8006adc:	4651      	mov	r1, sl
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 fcce 	bl	8007480 <__pow5mult>
 8006ae4:	4682      	mov	sl, r0
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fc09 	bl	8007300 <__i2b>
 8006aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	4606      	mov	r6, r0
 8006af4:	f340 8081 	ble.w	8006bfa <_dtoa_r+0x8ca>
 8006af8:	461a      	mov	r2, r3
 8006afa:	4601      	mov	r1, r0
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 fcbf 	bl	8007480 <__pow5mult>
 8006b02:	9b07      	ldr	r3, [sp, #28]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	4606      	mov	r6, r0
 8006b08:	dd7a      	ble.n	8006c00 <_dtoa_r+0x8d0>
 8006b0a:	f04f 0800 	mov.w	r8, #0
 8006b0e:	6933      	ldr	r3, [r6, #16]
 8006b10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b14:	6918      	ldr	r0, [r3, #16]
 8006b16:	f000 fba5 	bl	8007264 <__hi0bits>
 8006b1a:	f1c0 0020 	rsb	r0, r0, #32
 8006b1e:	9b06      	ldr	r3, [sp, #24]
 8006b20:	4418      	add	r0, r3
 8006b22:	f010 001f 	ands.w	r0, r0, #31
 8006b26:	f000 8094 	beq.w	8006c52 <_dtoa_r+0x922>
 8006b2a:	f1c0 0320 	rsb	r3, r0, #32
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	f340 8085 	ble.w	8006c3e <_dtoa_r+0x90e>
 8006b34:	9b05      	ldr	r3, [sp, #20]
 8006b36:	f1c0 001c 	rsb	r0, r0, #28
 8006b3a:	4403      	add	r3, r0
 8006b3c:	9305      	str	r3, [sp, #20]
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	4403      	add	r3, r0
 8006b42:	4405      	add	r5, r0
 8006b44:	9306      	str	r3, [sp, #24]
 8006b46:	9b05      	ldr	r3, [sp, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dd05      	ble.n	8006b58 <_dtoa_r+0x828>
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 fcef 	bl	8007534 <__lshift>
 8006b56:	4682      	mov	sl, r0
 8006b58:	9b06      	ldr	r3, [sp, #24]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	dd05      	ble.n	8006b6a <_dtoa_r+0x83a>
 8006b5e:	4631      	mov	r1, r6
 8006b60:	461a      	mov	r2, r3
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fce6 	bl	8007534 <__lshift>
 8006b68:	4606      	mov	r6, r0
 8006b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d072      	beq.n	8006c56 <_dtoa_r+0x926>
 8006b70:	4631      	mov	r1, r6
 8006b72:	4650      	mov	r0, sl
 8006b74:	f000 fd4a 	bl	800760c <__mcmp>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	da6c      	bge.n	8006c56 <_dtoa_r+0x926>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4651      	mov	r1, sl
 8006b80:	220a      	movs	r2, #10
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 fb28 	bl	80071d8 <__multadd>
 8006b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b8e:	4682      	mov	sl, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 81b0 	beq.w	8006ef6 <_dtoa_r+0xbc6>
 8006b96:	2300      	movs	r3, #0
 8006b98:	4639      	mov	r1, r7
 8006b9a:	220a      	movs	r2, #10
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fb1b 	bl	80071d8 <__multadd>
 8006ba2:	9b01      	ldr	r3, [sp, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	4607      	mov	r7, r0
 8006ba8:	f300 8096 	bgt.w	8006cd8 <_dtoa_r+0x9a8>
 8006bac:	9b07      	ldr	r3, [sp, #28]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	dc59      	bgt.n	8006c66 <_dtoa_r+0x936>
 8006bb2:	e091      	b.n	8006cd8 <_dtoa_r+0x9a8>
 8006bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bba:	e758      	b.n	8006a6e <_dtoa_r+0x73e>
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	1e5e      	subs	r6, r3, #1
 8006bc0:	9b08      	ldr	r3, [sp, #32]
 8006bc2:	42b3      	cmp	r3, r6
 8006bc4:	bfbf      	itttt	lt
 8006bc6:	9b08      	ldrlt	r3, [sp, #32]
 8006bc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006bca:	9608      	strlt	r6, [sp, #32]
 8006bcc:	1af3      	sublt	r3, r6, r3
 8006bce:	bfb4      	ite	lt
 8006bd0:	18d2      	addlt	r2, r2, r3
 8006bd2:	1b9e      	subge	r6, r3, r6
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	bfbc      	itt	lt
 8006bd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006bda:	2600      	movlt	r6, #0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bfb7      	itett	lt
 8006be0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006be4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006be8:	1a9d      	sublt	r5, r3, r2
 8006bea:	2300      	movlt	r3, #0
 8006bec:	e741      	b.n	8006a72 <_dtoa_r+0x742>
 8006bee:	9e08      	ldr	r6, [sp, #32]
 8006bf0:	9d05      	ldr	r5, [sp, #20]
 8006bf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006bf4:	e748      	b.n	8006a88 <_dtoa_r+0x758>
 8006bf6:	9a08      	ldr	r2, [sp, #32]
 8006bf8:	e770      	b.n	8006adc <_dtoa_r+0x7ac>
 8006bfa:	9b07      	ldr	r3, [sp, #28]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	dc19      	bgt.n	8006c34 <_dtoa_r+0x904>
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	b9bb      	cbnz	r3, 8006c34 <_dtoa_r+0x904>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c0a:	b99b      	cbnz	r3, 8006c34 <_dtoa_r+0x904>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c12:	0d1b      	lsrs	r3, r3, #20
 8006c14:	051b      	lsls	r3, r3, #20
 8006c16:	b183      	cbz	r3, 8006c3a <_dtoa_r+0x90a>
 8006c18:	9b05      	ldr	r3, [sp, #20]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	9305      	str	r3, [sp, #20]
 8006c1e:	9b06      	ldr	r3, [sp, #24]
 8006c20:	3301      	adds	r3, #1
 8006c22:	9306      	str	r3, [sp, #24]
 8006c24:	f04f 0801 	mov.w	r8, #1
 8006c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f47f af6f 	bne.w	8006b0e <_dtoa_r+0x7de>
 8006c30:	2001      	movs	r0, #1
 8006c32:	e774      	b.n	8006b1e <_dtoa_r+0x7ee>
 8006c34:	f04f 0800 	mov.w	r8, #0
 8006c38:	e7f6      	b.n	8006c28 <_dtoa_r+0x8f8>
 8006c3a:	4698      	mov	r8, r3
 8006c3c:	e7f4      	b.n	8006c28 <_dtoa_r+0x8f8>
 8006c3e:	d082      	beq.n	8006b46 <_dtoa_r+0x816>
 8006c40:	9a05      	ldr	r2, [sp, #20]
 8006c42:	331c      	adds	r3, #28
 8006c44:	441a      	add	r2, r3
 8006c46:	9205      	str	r2, [sp, #20]
 8006c48:	9a06      	ldr	r2, [sp, #24]
 8006c4a:	441a      	add	r2, r3
 8006c4c:	441d      	add	r5, r3
 8006c4e:	9206      	str	r2, [sp, #24]
 8006c50:	e779      	b.n	8006b46 <_dtoa_r+0x816>
 8006c52:	4603      	mov	r3, r0
 8006c54:	e7f4      	b.n	8006c40 <_dtoa_r+0x910>
 8006c56:	9b04      	ldr	r3, [sp, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dc37      	bgt.n	8006ccc <_dtoa_r+0x99c>
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	dd34      	ble.n	8006ccc <_dtoa_r+0x99c>
 8006c62:	9b04      	ldr	r3, [sp, #16]
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	9b01      	ldr	r3, [sp, #4]
 8006c68:	b963      	cbnz	r3, 8006c84 <_dtoa_r+0x954>
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 fab2 	bl	80071d8 <__multadd>
 8006c74:	4601      	mov	r1, r0
 8006c76:	4606      	mov	r6, r0
 8006c78:	4650      	mov	r0, sl
 8006c7a:	f000 fcc7 	bl	800760c <__mcmp>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f73f adbb 	bgt.w	80067fa <_dtoa_r+0x4ca>
 8006c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c86:	9d00      	ldr	r5, [sp, #0]
 8006c88:	ea6f 0b03 	mvn.w	fp, r3
 8006c8c:	f04f 0800 	mov.w	r8, #0
 8006c90:	4631      	mov	r1, r6
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fa7e 	bl	8007194 <_Bfree>
 8006c98:	2f00      	cmp	r7, #0
 8006c9a:	f43f aeab 	beq.w	80069f4 <_dtoa_r+0x6c4>
 8006c9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ca2:	d005      	beq.n	8006cb0 <_dtoa_r+0x980>
 8006ca4:	45b8      	cmp	r8, r7
 8006ca6:	d003      	beq.n	8006cb0 <_dtoa_r+0x980>
 8006ca8:	4641      	mov	r1, r8
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fa72 	bl	8007194 <_Bfree>
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fa6e 	bl	8007194 <_Bfree>
 8006cb8:	e69c      	b.n	80069f4 <_dtoa_r+0x6c4>
 8006cba:	2600      	movs	r6, #0
 8006cbc:	4637      	mov	r7, r6
 8006cbe:	e7e1      	b.n	8006c84 <_dtoa_r+0x954>
 8006cc0:	46bb      	mov	fp, r7
 8006cc2:	4637      	mov	r7, r6
 8006cc4:	e599      	b.n	80067fa <_dtoa_r+0x4ca>
 8006cc6:	bf00      	nop
 8006cc8:	40240000 	.word	0x40240000
 8006ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80c8 	beq.w	8006e64 <_dtoa_r+0xb34>
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	dd05      	ble.n	8006ce8 <_dtoa_r+0x9b8>
 8006cdc:	4639      	mov	r1, r7
 8006cde:	462a      	mov	r2, r5
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fc27 	bl	8007534 <__lshift>
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	f1b8 0f00 	cmp.w	r8, #0
 8006cec:	d05b      	beq.n	8006da6 <_dtoa_r+0xa76>
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 fa0f 	bl	8007114 <_Balloc>
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	b928      	cbnz	r0, 8006d06 <_dtoa_r+0x9d6>
 8006cfa:	4b83      	ldr	r3, [pc, #524]	; (8006f08 <_dtoa_r+0xbd8>)
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006d02:	f7ff bb2e 	b.w	8006362 <_dtoa_r+0x32>
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	3202      	adds	r2, #2
 8006d0a:	0092      	lsls	r2, r2, #2
 8006d0c:	f107 010c 	add.w	r1, r7, #12
 8006d10:	300c      	adds	r0, #12
 8006d12:	f000 ffab 	bl	8007c6c <memcpy>
 8006d16:	2201      	movs	r2, #1
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fc0a 	bl	8007534 <__lshift>
 8006d20:	9b00      	ldr	r3, [sp, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	9308      	str	r3, [sp, #32]
 8006d2e:	9b02      	ldr	r3, [sp, #8]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	46b8      	mov	r8, r7
 8006d36:	9306      	str	r3, [sp, #24]
 8006d38:	4607      	mov	r7, r0
 8006d3a:	9b04      	ldr	r3, [sp, #16]
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4650      	mov	r0, sl
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	f7ff fa69 	bl	800621a <quorem>
 8006d48:	4641      	mov	r1, r8
 8006d4a:	9002      	str	r0, [sp, #8]
 8006d4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d50:	4650      	mov	r0, sl
 8006d52:	f000 fc5b 	bl	800760c <__mcmp>
 8006d56:	463a      	mov	r2, r7
 8006d58:	9005      	str	r0, [sp, #20]
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fc71 	bl	8007644 <__mdiff>
 8006d62:	68c2      	ldr	r2, [r0, #12]
 8006d64:	4605      	mov	r5, r0
 8006d66:	bb02      	cbnz	r2, 8006daa <_dtoa_r+0xa7a>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	f000 fc4e 	bl	800760c <__mcmp>
 8006d70:	4602      	mov	r2, r0
 8006d72:	4629      	mov	r1, r5
 8006d74:	4620      	mov	r0, r4
 8006d76:	9209      	str	r2, [sp, #36]	; 0x24
 8006d78:	f000 fa0c 	bl	8007194 <_Bfree>
 8006d7c:	9b07      	ldr	r3, [sp, #28]
 8006d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d80:	9d04      	ldr	r5, [sp, #16]
 8006d82:	ea43 0102 	orr.w	r1, r3, r2
 8006d86:	9b06      	ldr	r3, [sp, #24]
 8006d88:	4319      	orrs	r1, r3
 8006d8a:	d110      	bne.n	8006dae <_dtoa_r+0xa7e>
 8006d8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d90:	d029      	beq.n	8006de6 <_dtoa_r+0xab6>
 8006d92:	9b05      	ldr	r3, [sp, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dd02      	ble.n	8006d9e <_dtoa_r+0xa6e>
 8006d98:	9b02      	ldr	r3, [sp, #8]
 8006d9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	f883 9000 	strb.w	r9, [r3]
 8006da4:	e774      	b.n	8006c90 <_dtoa_r+0x960>
 8006da6:	4638      	mov	r0, r7
 8006da8:	e7ba      	b.n	8006d20 <_dtoa_r+0x9f0>
 8006daa:	2201      	movs	r2, #1
 8006dac:	e7e1      	b.n	8006d72 <_dtoa_r+0xa42>
 8006dae:	9b05      	ldr	r3, [sp, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	db04      	blt.n	8006dbe <_dtoa_r+0xa8e>
 8006db4:	9907      	ldr	r1, [sp, #28]
 8006db6:	430b      	orrs	r3, r1
 8006db8:	9906      	ldr	r1, [sp, #24]
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	d120      	bne.n	8006e00 <_dtoa_r+0xad0>
 8006dbe:	2a00      	cmp	r2, #0
 8006dc0:	dded      	ble.n	8006d9e <_dtoa_r+0xa6e>
 8006dc2:	4651      	mov	r1, sl
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 fbb4 	bl	8007534 <__lshift>
 8006dcc:	4631      	mov	r1, r6
 8006dce:	4682      	mov	sl, r0
 8006dd0:	f000 fc1c 	bl	800760c <__mcmp>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	dc03      	bgt.n	8006de0 <_dtoa_r+0xab0>
 8006dd8:	d1e1      	bne.n	8006d9e <_dtoa_r+0xa6e>
 8006dda:	f019 0f01 	tst.w	r9, #1
 8006dde:	d0de      	beq.n	8006d9e <_dtoa_r+0xa6e>
 8006de0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006de4:	d1d8      	bne.n	8006d98 <_dtoa_r+0xa68>
 8006de6:	9a01      	ldr	r2, [sp, #4]
 8006de8:	2339      	movs	r3, #57	; 0x39
 8006dea:	7013      	strb	r3, [r2, #0]
 8006dec:	462b      	mov	r3, r5
 8006dee:	461d      	mov	r5, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006df6:	2a39      	cmp	r2, #57	; 0x39
 8006df8:	d06c      	beq.n	8006ed4 <_dtoa_r+0xba4>
 8006dfa:	3201      	adds	r2, #1
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	e747      	b.n	8006c90 <_dtoa_r+0x960>
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	dd07      	ble.n	8006e14 <_dtoa_r+0xae4>
 8006e04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e08:	d0ed      	beq.n	8006de6 <_dtoa_r+0xab6>
 8006e0a:	9a01      	ldr	r2, [sp, #4]
 8006e0c:	f109 0301 	add.w	r3, r9, #1
 8006e10:	7013      	strb	r3, [r2, #0]
 8006e12:	e73d      	b.n	8006c90 <_dtoa_r+0x960>
 8006e14:	9b04      	ldr	r3, [sp, #16]
 8006e16:	9a08      	ldr	r2, [sp, #32]
 8006e18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d043      	beq.n	8006ea8 <_dtoa_r+0xb78>
 8006e20:	4651      	mov	r1, sl
 8006e22:	2300      	movs	r3, #0
 8006e24:	220a      	movs	r2, #10
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f9d6 	bl	80071d8 <__multadd>
 8006e2c:	45b8      	cmp	r8, r7
 8006e2e:	4682      	mov	sl, r0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	f04f 020a 	mov.w	r2, #10
 8006e38:	4641      	mov	r1, r8
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	d107      	bne.n	8006e4e <_dtoa_r+0xb1e>
 8006e3e:	f000 f9cb 	bl	80071d8 <__multadd>
 8006e42:	4680      	mov	r8, r0
 8006e44:	4607      	mov	r7, r0
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	e775      	b.n	8006d3a <_dtoa_r+0xa0a>
 8006e4e:	f000 f9c3 	bl	80071d8 <__multadd>
 8006e52:	4639      	mov	r1, r7
 8006e54:	4680      	mov	r8, r0
 8006e56:	2300      	movs	r3, #0
 8006e58:	220a      	movs	r2, #10
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f9bc 	bl	80071d8 <__multadd>
 8006e60:	4607      	mov	r7, r0
 8006e62:	e7f0      	b.n	8006e46 <_dtoa_r+0xb16>
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	9301      	str	r3, [sp, #4]
 8006e68:	9d00      	ldr	r5, [sp, #0]
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4650      	mov	r0, sl
 8006e6e:	f7ff f9d4 	bl	800621a <quorem>
 8006e72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	f805 9b01 	strb.w	r9, [r5], #1
 8006e7c:	1aea      	subs	r2, r5, r3
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	4293      	cmp	r3, r2
 8006e82:	dd07      	ble.n	8006e94 <_dtoa_r+0xb64>
 8006e84:	4651      	mov	r1, sl
 8006e86:	2300      	movs	r3, #0
 8006e88:	220a      	movs	r2, #10
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 f9a4 	bl	80071d8 <__multadd>
 8006e90:	4682      	mov	sl, r0
 8006e92:	e7ea      	b.n	8006e6a <_dtoa_r+0xb3a>
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bfc8      	it	gt
 8006e9a:	461d      	movgt	r5, r3
 8006e9c:	9b00      	ldr	r3, [sp, #0]
 8006e9e:	bfd8      	it	le
 8006ea0:	2501      	movle	r5, #1
 8006ea2:	441d      	add	r5, r3
 8006ea4:	f04f 0800 	mov.w	r8, #0
 8006ea8:	4651      	mov	r1, sl
 8006eaa:	2201      	movs	r2, #1
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 fb41 	bl	8007534 <__lshift>
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4682      	mov	sl, r0
 8006eb6:	f000 fba9 	bl	800760c <__mcmp>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	dc96      	bgt.n	8006dec <_dtoa_r+0xabc>
 8006ebe:	d102      	bne.n	8006ec6 <_dtoa_r+0xb96>
 8006ec0:	f019 0f01 	tst.w	r9, #1
 8006ec4:	d192      	bne.n	8006dec <_dtoa_r+0xabc>
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	461d      	mov	r5, r3
 8006eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ece:	2a30      	cmp	r2, #48	; 0x30
 8006ed0:	d0fa      	beq.n	8006ec8 <_dtoa_r+0xb98>
 8006ed2:	e6dd      	b.n	8006c90 <_dtoa_r+0x960>
 8006ed4:	9a00      	ldr	r2, [sp, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d189      	bne.n	8006dee <_dtoa_r+0xabe>
 8006eda:	f10b 0b01 	add.w	fp, fp, #1
 8006ede:	2331      	movs	r3, #49	; 0x31
 8006ee0:	e796      	b.n	8006e10 <_dtoa_r+0xae0>
 8006ee2:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <_dtoa_r+0xbdc>)
 8006ee4:	f7ff ba99 	b.w	800641a <_dtoa_r+0xea>
 8006ee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f47f aa6d 	bne.w	80063ca <_dtoa_r+0x9a>
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <_dtoa_r+0xbe0>)
 8006ef2:	f7ff ba92 	b.w	800641a <_dtoa_r+0xea>
 8006ef6:	9b01      	ldr	r3, [sp, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dcb5      	bgt.n	8006e68 <_dtoa_r+0xb38>
 8006efc:	9b07      	ldr	r3, [sp, #28]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	f73f aeb1 	bgt.w	8006c66 <_dtoa_r+0x936>
 8006f04:	e7b0      	b.n	8006e68 <_dtoa_r+0xb38>
 8006f06:	bf00      	nop
 8006f08:	08008670 	.word	0x08008670
 8006f0c:	080085d0 	.word	0x080085d0
 8006f10:	080085f4 	.word	0x080085f4

08006f14 <_free_r>:
 8006f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f16:	2900      	cmp	r1, #0
 8006f18:	d044      	beq.n	8006fa4 <_free_r+0x90>
 8006f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f1e:	9001      	str	r0, [sp, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f1a1 0404 	sub.w	r4, r1, #4
 8006f26:	bfb8      	it	lt
 8006f28:	18e4      	addlt	r4, r4, r3
 8006f2a:	f000 f8e7 	bl	80070fc <__malloc_lock>
 8006f2e:	4a1e      	ldr	r2, [pc, #120]	; (8006fa8 <_free_r+0x94>)
 8006f30:	9801      	ldr	r0, [sp, #4]
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	b933      	cbnz	r3, 8006f44 <_free_r+0x30>
 8006f36:	6063      	str	r3, [r4, #4]
 8006f38:	6014      	str	r4, [r2, #0]
 8006f3a:	b003      	add	sp, #12
 8006f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f40:	f000 b8e2 	b.w	8007108 <__malloc_unlock>
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	d908      	bls.n	8006f5a <_free_r+0x46>
 8006f48:	6825      	ldr	r5, [r4, #0]
 8006f4a:	1961      	adds	r1, r4, r5
 8006f4c:	428b      	cmp	r3, r1
 8006f4e:	bf01      	itttt	eq
 8006f50:	6819      	ldreq	r1, [r3, #0]
 8006f52:	685b      	ldreq	r3, [r3, #4]
 8006f54:	1949      	addeq	r1, r1, r5
 8006f56:	6021      	streq	r1, [r4, #0]
 8006f58:	e7ed      	b.n	8006f36 <_free_r+0x22>
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	b10b      	cbz	r3, 8006f64 <_free_r+0x50>
 8006f60:	42a3      	cmp	r3, r4
 8006f62:	d9fa      	bls.n	8006f5a <_free_r+0x46>
 8006f64:	6811      	ldr	r1, [r2, #0]
 8006f66:	1855      	adds	r5, r2, r1
 8006f68:	42a5      	cmp	r5, r4
 8006f6a:	d10b      	bne.n	8006f84 <_free_r+0x70>
 8006f6c:	6824      	ldr	r4, [r4, #0]
 8006f6e:	4421      	add	r1, r4
 8006f70:	1854      	adds	r4, r2, r1
 8006f72:	42a3      	cmp	r3, r4
 8006f74:	6011      	str	r1, [r2, #0]
 8006f76:	d1e0      	bne.n	8006f3a <_free_r+0x26>
 8006f78:	681c      	ldr	r4, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	6053      	str	r3, [r2, #4]
 8006f7e:	440c      	add	r4, r1
 8006f80:	6014      	str	r4, [r2, #0]
 8006f82:	e7da      	b.n	8006f3a <_free_r+0x26>
 8006f84:	d902      	bls.n	8006f8c <_free_r+0x78>
 8006f86:	230c      	movs	r3, #12
 8006f88:	6003      	str	r3, [r0, #0]
 8006f8a:	e7d6      	b.n	8006f3a <_free_r+0x26>
 8006f8c:	6825      	ldr	r5, [r4, #0]
 8006f8e:	1961      	adds	r1, r4, r5
 8006f90:	428b      	cmp	r3, r1
 8006f92:	bf04      	itt	eq
 8006f94:	6819      	ldreq	r1, [r3, #0]
 8006f96:	685b      	ldreq	r3, [r3, #4]
 8006f98:	6063      	str	r3, [r4, #4]
 8006f9a:	bf04      	itt	eq
 8006f9c:	1949      	addeq	r1, r1, r5
 8006f9e:	6021      	streq	r1, [r4, #0]
 8006fa0:	6054      	str	r4, [r2, #4]
 8006fa2:	e7ca      	b.n	8006f3a <_free_r+0x26>
 8006fa4:	b003      	add	sp, #12
 8006fa6:	bd30      	pop	{r4, r5, pc}
 8006fa8:	20000ea4 	.word	0x20000ea4

08006fac <malloc>:
 8006fac:	4b02      	ldr	r3, [pc, #8]	; (8006fb8 <malloc+0xc>)
 8006fae:	4601      	mov	r1, r0
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	f000 b823 	b.w	8006ffc <_malloc_r>
 8006fb6:	bf00      	nop
 8006fb8:	20000068 	.word	0x20000068

08006fbc <sbrk_aligned>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4e0e      	ldr	r6, [pc, #56]	; (8006ff8 <sbrk_aligned+0x3c>)
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	6831      	ldr	r1, [r6, #0]
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	b911      	cbnz	r1, 8006fce <sbrk_aligned+0x12>
 8006fc8:	f000 fe40 	bl	8007c4c <_sbrk_r>
 8006fcc:	6030      	str	r0, [r6, #0]
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f000 fe3b 	bl	8007c4c <_sbrk_r>
 8006fd6:	1c43      	adds	r3, r0, #1
 8006fd8:	d00a      	beq.n	8006ff0 <sbrk_aligned+0x34>
 8006fda:	1cc4      	adds	r4, r0, #3
 8006fdc:	f024 0403 	bic.w	r4, r4, #3
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	d007      	beq.n	8006ff4 <sbrk_aligned+0x38>
 8006fe4:	1a21      	subs	r1, r4, r0
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 fe30 	bl	8007c4c <_sbrk_r>
 8006fec:	3001      	adds	r0, #1
 8006fee:	d101      	bne.n	8006ff4 <sbrk_aligned+0x38>
 8006ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	20000ea8 	.word	0x20000ea8

08006ffc <_malloc_r>:
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	1ccd      	adds	r5, r1, #3
 8007002:	f025 0503 	bic.w	r5, r5, #3
 8007006:	3508      	adds	r5, #8
 8007008:	2d0c      	cmp	r5, #12
 800700a:	bf38      	it	cc
 800700c:	250c      	movcc	r5, #12
 800700e:	2d00      	cmp	r5, #0
 8007010:	4607      	mov	r7, r0
 8007012:	db01      	blt.n	8007018 <_malloc_r+0x1c>
 8007014:	42a9      	cmp	r1, r5
 8007016:	d905      	bls.n	8007024 <_malloc_r+0x28>
 8007018:	230c      	movs	r3, #12
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	2600      	movs	r6, #0
 800701e:	4630      	mov	r0, r6
 8007020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007024:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070f8 <_malloc_r+0xfc>
 8007028:	f000 f868 	bl	80070fc <__malloc_lock>
 800702c:	f8d8 3000 	ldr.w	r3, [r8]
 8007030:	461c      	mov	r4, r3
 8007032:	bb5c      	cbnz	r4, 800708c <_malloc_r+0x90>
 8007034:	4629      	mov	r1, r5
 8007036:	4638      	mov	r0, r7
 8007038:	f7ff ffc0 	bl	8006fbc <sbrk_aligned>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	4604      	mov	r4, r0
 8007040:	d155      	bne.n	80070ee <_malloc_r+0xf2>
 8007042:	f8d8 4000 	ldr.w	r4, [r8]
 8007046:	4626      	mov	r6, r4
 8007048:	2e00      	cmp	r6, #0
 800704a:	d145      	bne.n	80070d8 <_malloc_r+0xdc>
 800704c:	2c00      	cmp	r4, #0
 800704e:	d048      	beq.n	80070e2 <_malloc_r+0xe6>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	4631      	mov	r1, r6
 8007054:	4638      	mov	r0, r7
 8007056:	eb04 0903 	add.w	r9, r4, r3
 800705a:	f000 fdf7 	bl	8007c4c <_sbrk_r>
 800705e:	4581      	cmp	r9, r0
 8007060:	d13f      	bne.n	80070e2 <_malloc_r+0xe6>
 8007062:	6821      	ldr	r1, [r4, #0]
 8007064:	1a6d      	subs	r5, r5, r1
 8007066:	4629      	mov	r1, r5
 8007068:	4638      	mov	r0, r7
 800706a:	f7ff ffa7 	bl	8006fbc <sbrk_aligned>
 800706e:	3001      	adds	r0, #1
 8007070:	d037      	beq.n	80070e2 <_malloc_r+0xe6>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	442b      	add	r3, r5
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	f8d8 3000 	ldr.w	r3, [r8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d038      	beq.n	80070f2 <_malloc_r+0xf6>
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	42a2      	cmp	r2, r4
 8007084:	d12b      	bne.n	80070de <_malloc_r+0xe2>
 8007086:	2200      	movs	r2, #0
 8007088:	605a      	str	r2, [r3, #4]
 800708a:	e00f      	b.n	80070ac <_malloc_r+0xb0>
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	1b52      	subs	r2, r2, r5
 8007090:	d41f      	bmi.n	80070d2 <_malloc_r+0xd6>
 8007092:	2a0b      	cmp	r2, #11
 8007094:	d917      	bls.n	80070c6 <_malloc_r+0xca>
 8007096:	1961      	adds	r1, r4, r5
 8007098:	42a3      	cmp	r3, r4
 800709a:	6025      	str	r5, [r4, #0]
 800709c:	bf18      	it	ne
 800709e:	6059      	strne	r1, [r3, #4]
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	bf08      	it	eq
 80070a4:	f8c8 1000 	streq.w	r1, [r8]
 80070a8:	5162      	str	r2, [r4, r5]
 80070aa:	604b      	str	r3, [r1, #4]
 80070ac:	4638      	mov	r0, r7
 80070ae:	f104 060b 	add.w	r6, r4, #11
 80070b2:	f000 f829 	bl	8007108 <__malloc_unlock>
 80070b6:	f026 0607 	bic.w	r6, r6, #7
 80070ba:	1d23      	adds	r3, r4, #4
 80070bc:	1af2      	subs	r2, r6, r3
 80070be:	d0ae      	beq.n	800701e <_malloc_r+0x22>
 80070c0:	1b9b      	subs	r3, r3, r6
 80070c2:	50a3      	str	r3, [r4, r2]
 80070c4:	e7ab      	b.n	800701e <_malloc_r+0x22>
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	6862      	ldr	r2, [r4, #4]
 80070ca:	d1dd      	bne.n	8007088 <_malloc_r+0x8c>
 80070cc:	f8c8 2000 	str.w	r2, [r8]
 80070d0:	e7ec      	b.n	80070ac <_malloc_r+0xb0>
 80070d2:	4623      	mov	r3, r4
 80070d4:	6864      	ldr	r4, [r4, #4]
 80070d6:	e7ac      	b.n	8007032 <_malloc_r+0x36>
 80070d8:	4634      	mov	r4, r6
 80070da:	6876      	ldr	r6, [r6, #4]
 80070dc:	e7b4      	b.n	8007048 <_malloc_r+0x4c>
 80070de:	4613      	mov	r3, r2
 80070e0:	e7cc      	b.n	800707c <_malloc_r+0x80>
 80070e2:	230c      	movs	r3, #12
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	4638      	mov	r0, r7
 80070e8:	f000 f80e 	bl	8007108 <__malloc_unlock>
 80070ec:	e797      	b.n	800701e <_malloc_r+0x22>
 80070ee:	6025      	str	r5, [r4, #0]
 80070f0:	e7dc      	b.n	80070ac <_malloc_r+0xb0>
 80070f2:	605b      	str	r3, [r3, #4]
 80070f4:	deff      	udf	#255	; 0xff
 80070f6:	bf00      	nop
 80070f8:	20000ea4 	.word	0x20000ea4

080070fc <__malloc_lock>:
 80070fc:	4801      	ldr	r0, [pc, #4]	; (8007104 <__malloc_lock+0x8>)
 80070fe:	f7ff b88a 	b.w	8006216 <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	20000ea0 	.word	0x20000ea0

08007108 <__malloc_unlock>:
 8007108:	4801      	ldr	r0, [pc, #4]	; (8007110 <__malloc_unlock+0x8>)
 800710a:	f7ff b885 	b.w	8006218 <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	20000ea0 	.word	0x20000ea0

08007114 <_Balloc>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	69c6      	ldr	r6, [r0, #28]
 8007118:	4604      	mov	r4, r0
 800711a:	460d      	mov	r5, r1
 800711c:	b976      	cbnz	r6, 800713c <_Balloc+0x28>
 800711e:	2010      	movs	r0, #16
 8007120:	f7ff ff44 	bl	8006fac <malloc>
 8007124:	4602      	mov	r2, r0
 8007126:	61e0      	str	r0, [r4, #28]
 8007128:	b920      	cbnz	r0, 8007134 <_Balloc+0x20>
 800712a:	4b18      	ldr	r3, [pc, #96]	; (800718c <_Balloc+0x78>)
 800712c:	4818      	ldr	r0, [pc, #96]	; (8007190 <_Balloc+0x7c>)
 800712e:	216b      	movs	r1, #107	; 0x6b
 8007130:	f000 fdaa 	bl	8007c88 <__assert_func>
 8007134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007138:	6006      	str	r6, [r0, #0]
 800713a:	60c6      	str	r6, [r0, #12]
 800713c:	69e6      	ldr	r6, [r4, #28]
 800713e:	68f3      	ldr	r3, [r6, #12]
 8007140:	b183      	cbz	r3, 8007164 <_Balloc+0x50>
 8007142:	69e3      	ldr	r3, [r4, #28]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800714a:	b9b8      	cbnz	r0, 800717c <_Balloc+0x68>
 800714c:	2101      	movs	r1, #1
 800714e:	fa01 f605 	lsl.w	r6, r1, r5
 8007152:	1d72      	adds	r2, r6, #5
 8007154:	0092      	lsls	r2, r2, #2
 8007156:	4620      	mov	r0, r4
 8007158:	f000 fdb4 	bl	8007cc4 <_calloc_r>
 800715c:	b160      	cbz	r0, 8007178 <_Balloc+0x64>
 800715e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007162:	e00e      	b.n	8007182 <_Balloc+0x6e>
 8007164:	2221      	movs	r2, #33	; 0x21
 8007166:	2104      	movs	r1, #4
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fdab 	bl	8007cc4 <_calloc_r>
 800716e:	69e3      	ldr	r3, [r4, #28]
 8007170:	60f0      	str	r0, [r6, #12]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e4      	bne.n	8007142 <_Balloc+0x2e>
 8007178:	2000      	movs	r0, #0
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	6802      	ldr	r2, [r0, #0]
 800717e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007182:	2300      	movs	r3, #0
 8007184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007188:	e7f7      	b.n	800717a <_Balloc+0x66>
 800718a:	bf00      	nop
 800718c:	08008601 	.word	0x08008601
 8007190:	08008681 	.word	0x08008681

08007194 <_Bfree>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	69c6      	ldr	r6, [r0, #28]
 8007198:	4605      	mov	r5, r0
 800719a:	460c      	mov	r4, r1
 800719c:	b976      	cbnz	r6, 80071bc <_Bfree+0x28>
 800719e:	2010      	movs	r0, #16
 80071a0:	f7ff ff04 	bl	8006fac <malloc>
 80071a4:	4602      	mov	r2, r0
 80071a6:	61e8      	str	r0, [r5, #28]
 80071a8:	b920      	cbnz	r0, 80071b4 <_Bfree+0x20>
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <_Bfree+0x3c>)
 80071ac:	4809      	ldr	r0, [pc, #36]	; (80071d4 <_Bfree+0x40>)
 80071ae:	218f      	movs	r1, #143	; 0x8f
 80071b0:	f000 fd6a 	bl	8007c88 <__assert_func>
 80071b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071b8:	6006      	str	r6, [r0, #0]
 80071ba:	60c6      	str	r6, [r0, #12]
 80071bc:	b13c      	cbz	r4, 80071ce <_Bfree+0x3a>
 80071be:	69eb      	ldr	r3, [r5, #28]
 80071c0:	6862      	ldr	r2, [r4, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071c8:	6021      	str	r1, [r4, #0]
 80071ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071ce:	bd70      	pop	{r4, r5, r6, pc}
 80071d0:	08008601 	.word	0x08008601
 80071d4:	08008681 	.word	0x08008681

080071d8 <__multadd>:
 80071d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071dc:	690d      	ldr	r5, [r1, #16]
 80071de:	4607      	mov	r7, r0
 80071e0:	460c      	mov	r4, r1
 80071e2:	461e      	mov	r6, r3
 80071e4:	f101 0c14 	add.w	ip, r1, #20
 80071e8:	2000      	movs	r0, #0
 80071ea:	f8dc 3000 	ldr.w	r3, [ip]
 80071ee:	b299      	uxth	r1, r3
 80071f0:	fb02 6101 	mla	r1, r2, r1, r6
 80071f4:	0c1e      	lsrs	r6, r3, #16
 80071f6:	0c0b      	lsrs	r3, r1, #16
 80071f8:	fb02 3306 	mla	r3, r2, r6, r3
 80071fc:	b289      	uxth	r1, r1
 80071fe:	3001      	adds	r0, #1
 8007200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007204:	4285      	cmp	r5, r0
 8007206:	f84c 1b04 	str.w	r1, [ip], #4
 800720a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800720e:	dcec      	bgt.n	80071ea <__multadd+0x12>
 8007210:	b30e      	cbz	r6, 8007256 <__multadd+0x7e>
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	42ab      	cmp	r3, r5
 8007216:	dc19      	bgt.n	800724c <__multadd+0x74>
 8007218:	6861      	ldr	r1, [r4, #4]
 800721a:	4638      	mov	r0, r7
 800721c:	3101      	adds	r1, #1
 800721e:	f7ff ff79 	bl	8007114 <_Balloc>
 8007222:	4680      	mov	r8, r0
 8007224:	b928      	cbnz	r0, 8007232 <__multadd+0x5a>
 8007226:	4602      	mov	r2, r0
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <__multadd+0x84>)
 800722a:	480d      	ldr	r0, [pc, #52]	; (8007260 <__multadd+0x88>)
 800722c:	21ba      	movs	r1, #186	; 0xba
 800722e:	f000 fd2b 	bl	8007c88 <__assert_func>
 8007232:	6922      	ldr	r2, [r4, #16]
 8007234:	3202      	adds	r2, #2
 8007236:	f104 010c 	add.w	r1, r4, #12
 800723a:	0092      	lsls	r2, r2, #2
 800723c:	300c      	adds	r0, #12
 800723e:	f000 fd15 	bl	8007c6c <memcpy>
 8007242:	4621      	mov	r1, r4
 8007244:	4638      	mov	r0, r7
 8007246:	f7ff ffa5 	bl	8007194 <_Bfree>
 800724a:	4644      	mov	r4, r8
 800724c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007250:	3501      	adds	r5, #1
 8007252:	615e      	str	r6, [r3, #20]
 8007254:	6125      	str	r5, [r4, #16]
 8007256:	4620      	mov	r0, r4
 8007258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800725c:	08008670 	.word	0x08008670
 8007260:	08008681 	.word	0x08008681

08007264 <__hi0bits>:
 8007264:	0c03      	lsrs	r3, r0, #16
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	b9d3      	cbnz	r3, 80072a0 <__hi0bits+0x3c>
 800726a:	0400      	lsls	r0, r0, #16
 800726c:	2310      	movs	r3, #16
 800726e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007272:	bf04      	itt	eq
 8007274:	0200      	lsleq	r0, r0, #8
 8007276:	3308      	addeq	r3, #8
 8007278:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800727c:	bf04      	itt	eq
 800727e:	0100      	lsleq	r0, r0, #4
 8007280:	3304      	addeq	r3, #4
 8007282:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007286:	bf04      	itt	eq
 8007288:	0080      	lsleq	r0, r0, #2
 800728a:	3302      	addeq	r3, #2
 800728c:	2800      	cmp	r0, #0
 800728e:	db05      	blt.n	800729c <__hi0bits+0x38>
 8007290:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007294:	f103 0301 	add.w	r3, r3, #1
 8007298:	bf08      	it	eq
 800729a:	2320      	moveq	r3, #32
 800729c:	4618      	mov	r0, r3
 800729e:	4770      	bx	lr
 80072a0:	2300      	movs	r3, #0
 80072a2:	e7e4      	b.n	800726e <__hi0bits+0xa>

080072a4 <__lo0bits>:
 80072a4:	6803      	ldr	r3, [r0, #0]
 80072a6:	f013 0207 	ands.w	r2, r3, #7
 80072aa:	d00c      	beq.n	80072c6 <__lo0bits+0x22>
 80072ac:	07d9      	lsls	r1, r3, #31
 80072ae:	d422      	bmi.n	80072f6 <__lo0bits+0x52>
 80072b0:	079a      	lsls	r2, r3, #30
 80072b2:	bf49      	itett	mi
 80072b4:	085b      	lsrmi	r3, r3, #1
 80072b6:	089b      	lsrpl	r3, r3, #2
 80072b8:	6003      	strmi	r3, [r0, #0]
 80072ba:	2201      	movmi	r2, #1
 80072bc:	bf5c      	itt	pl
 80072be:	6003      	strpl	r3, [r0, #0]
 80072c0:	2202      	movpl	r2, #2
 80072c2:	4610      	mov	r0, r2
 80072c4:	4770      	bx	lr
 80072c6:	b299      	uxth	r1, r3
 80072c8:	b909      	cbnz	r1, 80072ce <__lo0bits+0x2a>
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	2210      	movs	r2, #16
 80072ce:	b2d9      	uxtb	r1, r3
 80072d0:	b909      	cbnz	r1, 80072d6 <__lo0bits+0x32>
 80072d2:	3208      	adds	r2, #8
 80072d4:	0a1b      	lsrs	r3, r3, #8
 80072d6:	0719      	lsls	r1, r3, #28
 80072d8:	bf04      	itt	eq
 80072da:	091b      	lsreq	r3, r3, #4
 80072dc:	3204      	addeq	r2, #4
 80072de:	0799      	lsls	r1, r3, #30
 80072e0:	bf04      	itt	eq
 80072e2:	089b      	lsreq	r3, r3, #2
 80072e4:	3202      	addeq	r2, #2
 80072e6:	07d9      	lsls	r1, r3, #31
 80072e8:	d403      	bmi.n	80072f2 <__lo0bits+0x4e>
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	f102 0201 	add.w	r2, r2, #1
 80072f0:	d003      	beq.n	80072fa <__lo0bits+0x56>
 80072f2:	6003      	str	r3, [r0, #0]
 80072f4:	e7e5      	b.n	80072c2 <__lo0bits+0x1e>
 80072f6:	2200      	movs	r2, #0
 80072f8:	e7e3      	b.n	80072c2 <__lo0bits+0x1e>
 80072fa:	2220      	movs	r2, #32
 80072fc:	e7e1      	b.n	80072c2 <__lo0bits+0x1e>
	...

08007300 <__i2b>:
 8007300:	b510      	push	{r4, lr}
 8007302:	460c      	mov	r4, r1
 8007304:	2101      	movs	r1, #1
 8007306:	f7ff ff05 	bl	8007114 <_Balloc>
 800730a:	4602      	mov	r2, r0
 800730c:	b928      	cbnz	r0, 800731a <__i2b+0x1a>
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <__i2b+0x24>)
 8007310:	4805      	ldr	r0, [pc, #20]	; (8007328 <__i2b+0x28>)
 8007312:	f240 1145 	movw	r1, #325	; 0x145
 8007316:	f000 fcb7 	bl	8007c88 <__assert_func>
 800731a:	2301      	movs	r3, #1
 800731c:	6144      	str	r4, [r0, #20]
 800731e:	6103      	str	r3, [r0, #16]
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	08008670 	.word	0x08008670
 8007328:	08008681 	.word	0x08008681

0800732c <__multiply>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	4691      	mov	r9, r2
 8007332:	690a      	ldr	r2, [r1, #16]
 8007334:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007338:	429a      	cmp	r2, r3
 800733a:	bfb8      	it	lt
 800733c:	460b      	movlt	r3, r1
 800733e:	460c      	mov	r4, r1
 8007340:	bfbc      	itt	lt
 8007342:	464c      	movlt	r4, r9
 8007344:	4699      	movlt	r9, r3
 8007346:	6927      	ldr	r7, [r4, #16]
 8007348:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800734c:	68a3      	ldr	r3, [r4, #8]
 800734e:	6861      	ldr	r1, [r4, #4]
 8007350:	eb07 060a 	add.w	r6, r7, sl
 8007354:	42b3      	cmp	r3, r6
 8007356:	b085      	sub	sp, #20
 8007358:	bfb8      	it	lt
 800735a:	3101      	addlt	r1, #1
 800735c:	f7ff feda 	bl	8007114 <_Balloc>
 8007360:	b930      	cbnz	r0, 8007370 <__multiply+0x44>
 8007362:	4602      	mov	r2, r0
 8007364:	4b44      	ldr	r3, [pc, #272]	; (8007478 <__multiply+0x14c>)
 8007366:	4845      	ldr	r0, [pc, #276]	; (800747c <__multiply+0x150>)
 8007368:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800736c:	f000 fc8c 	bl	8007c88 <__assert_func>
 8007370:	f100 0514 	add.w	r5, r0, #20
 8007374:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007378:	462b      	mov	r3, r5
 800737a:	2200      	movs	r2, #0
 800737c:	4543      	cmp	r3, r8
 800737e:	d321      	bcc.n	80073c4 <__multiply+0x98>
 8007380:	f104 0314 	add.w	r3, r4, #20
 8007384:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007388:	f109 0314 	add.w	r3, r9, #20
 800738c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007390:	9202      	str	r2, [sp, #8]
 8007392:	1b3a      	subs	r2, r7, r4
 8007394:	3a15      	subs	r2, #21
 8007396:	f022 0203 	bic.w	r2, r2, #3
 800739a:	3204      	adds	r2, #4
 800739c:	f104 0115 	add.w	r1, r4, #21
 80073a0:	428f      	cmp	r7, r1
 80073a2:	bf38      	it	cc
 80073a4:	2204      	movcc	r2, #4
 80073a6:	9201      	str	r2, [sp, #4]
 80073a8:	9a02      	ldr	r2, [sp, #8]
 80073aa:	9303      	str	r3, [sp, #12]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d80c      	bhi.n	80073ca <__multiply+0x9e>
 80073b0:	2e00      	cmp	r6, #0
 80073b2:	dd03      	ble.n	80073bc <__multiply+0x90>
 80073b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d05b      	beq.n	8007474 <__multiply+0x148>
 80073bc:	6106      	str	r6, [r0, #16]
 80073be:	b005      	add	sp, #20
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	f843 2b04 	str.w	r2, [r3], #4
 80073c8:	e7d8      	b.n	800737c <__multiply+0x50>
 80073ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80073ce:	f1ba 0f00 	cmp.w	sl, #0
 80073d2:	d024      	beq.n	800741e <__multiply+0xf2>
 80073d4:	f104 0e14 	add.w	lr, r4, #20
 80073d8:	46a9      	mov	r9, r5
 80073da:	f04f 0c00 	mov.w	ip, #0
 80073de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073e2:	f8d9 1000 	ldr.w	r1, [r9]
 80073e6:	fa1f fb82 	uxth.w	fp, r2
 80073ea:	b289      	uxth	r1, r1
 80073ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80073f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073f4:	f8d9 2000 	ldr.w	r2, [r9]
 80073f8:	4461      	add	r1, ip
 80073fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8007402:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007406:	b289      	uxth	r1, r1
 8007408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800740c:	4577      	cmp	r7, lr
 800740e:	f849 1b04 	str.w	r1, [r9], #4
 8007412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007416:	d8e2      	bhi.n	80073de <__multiply+0xb2>
 8007418:	9a01      	ldr	r2, [sp, #4]
 800741a:	f845 c002 	str.w	ip, [r5, r2]
 800741e:	9a03      	ldr	r2, [sp, #12]
 8007420:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007424:	3304      	adds	r3, #4
 8007426:	f1b9 0f00 	cmp.w	r9, #0
 800742a:	d021      	beq.n	8007470 <__multiply+0x144>
 800742c:	6829      	ldr	r1, [r5, #0]
 800742e:	f104 0c14 	add.w	ip, r4, #20
 8007432:	46ae      	mov	lr, r5
 8007434:	f04f 0a00 	mov.w	sl, #0
 8007438:	f8bc b000 	ldrh.w	fp, [ip]
 800743c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007440:	fb09 220b 	mla	r2, r9, fp, r2
 8007444:	4452      	add	r2, sl
 8007446:	b289      	uxth	r1, r1
 8007448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800744c:	f84e 1b04 	str.w	r1, [lr], #4
 8007450:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007458:	f8be 1000 	ldrh.w	r1, [lr]
 800745c:	fb09 110a 	mla	r1, r9, sl, r1
 8007460:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007464:	4567      	cmp	r7, ip
 8007466:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800746a:	d8e5      	bhi.n	8007438 <__multiply+0x10c>
 800746c:	9a01      	ldr	r2, [sp, #4]
 800746e:	50a9      	str	r1, [r5, r2]
 8007470:	3504      	adds	r5, #4
 8007472:	e799      	b.n	80073a8 <__multiply+0x7c>
 8007474:	3e01      	subs	r6, #1
 8007476:	e79b      	b.n	80073b0 <__multiply+0x84>
 8007478:	08008670 	.word	0x08008670
 800747c:	08008681 	.word	0x08008681

08007480 <__pow5mult>:
 8007480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007484:	4615      	mov	r5, r2
 8007486:	f012 0203 	ands.w	r2, r2, #3
 800748a:	4606      	mov	r6, r0
 800748c:	460f      	mov	r7, r1
 800748e:	d007      	beq.n	80074a0 <__pow5mult+0x20>
 8007490:	4c25      	ldr	r4, [pc, #148]	; (8007528 <__pow5mult+0xa8>)
 8007492:	3a01      	subs	r2, #1
 8007494:	2300      	movs	r3, #0
 8007496:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800749a:	f7ff fe9d 	bl	80071d8 <__multadd>
 800749e:	4607      	mov	r7, r0
 80074a0:	10ad      	asrs	r5, r5, #2
 80074a2:	d03d      	beq.n	8007520 <__pow5mult+0xa0>
 80074a4:	69f4      	ldr	r4, [r6, #28]
 80074a6:	b97c      	cbnz	r4, 80074c8 <__pow5mult+0x48>
 80074a8:	2010      	movs	r0, #16
 80074aa:	f7ff fd7f 	bl	8006fac <malloc>
 80074ae:	4602      	mov	r2, r0
 80074b0:	61f0      	str	r0, [r6, #28]
 80074b2:	b928      	cbnz	r0, 80074c0 <__pow5mult+0x40>
 80074b4:	4b1d      	ldr	r3, [pc, #116]	; (800752c <__pow5mult+0xac>)
 80074b6:	481e      	ldr	r0, [pc, #120]	; (8007530 <__pow5mult+0xb0>)
 80074b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074bc:	f000 fbe4 	bl	8007c88 <__assert_func>
 80074c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074c4:	6004      	str	r4, [r0, #0]
 80074c6:	60c4      	str	r4, [r0, #12]
 80074c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074d0:	b94c      	cbnz	r4, 80074e6 <__pow5mult+0x66>
 80074d2:	f240 2171 	movw	r1, #625	; 0x271
 80074d6:	4630      	mov	r0, r6
 80074d8:	f7ff ff12 	bl	8007300 <__i2b>
 80074dc:	2300      	movs	r3, #0
 80074de:	f8c8 0008 	str.w	r0, [r8, #8]
 80074e2:	4604      	mov	r4, r0
 80074e4:	6003      	str	r3, [r0, #0]
 80074e6:	f04f 0900 	mov.w	r9, #0
 80074ea:	07eb      	lsls	r3, r5, #31
 80074ec:	d50a      	bpl.n	8007504 <__pow5mult+0x84>
 80074ee:	4639      	mov	r1, r7
 80074f0:	4622      	mov	r2, r4
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7ff ff1a 	bl	800732c <__multiply>
 80074f8:	4639      	mov	r1, r7
 80074fa:	4680      	mov	r8, r0
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7ff fe49 	bl	8007194 <_Bfree>
 8007502:	4647      	mov	r7, r8
 8007504:	106d      	asrs	r5, r5, #1
 8007506:	d00b      	beq.n	8007520 <__pow5mult+0xa0>
 8007508:	6820      	ldr	r0, [r4, #0]
 800750a:	b938      	cbnz	r0, 800751c <__pow5mult+0x9c>
 800750c:	4622      	mov	r2, r4
 800750e:	4621      	mov	r1, r4
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff ff0b 	bl	800732c <__multiply>
 8007516:	6020      	str	r0, [r4, #0]
 8007518:	f8c0 9000 	str.w	r9, [r0]
 800751c:	4604      	mov	r4, r0
 800751e:	e7e4      	b.n	80074ea <__pow5mult+0x6a>
 8007520:	4638      	mov	r0, r7
 8007522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007526:	bf00      	nop
 8007528:	080087d0 	.word	0x080087d0
 800752c:	08008601 	.word	0x08008601
 8007530:	08008681 	.word	0x08008681

08007534 <__lshift>:
 8007534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007538:	460c      	mov	r4, r1
 800753a:	6849      	ldr	r1, [r1, #4]
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007542:	68a3      	ldr	r3, [r4, #8]
 8007544:	4607      	mov	r7, r0
 8007546:	4691      	mov	r9, r2
 8007548:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800754c:	f108 0601 	add.w	r6, r8, #1
 8007550:	42b3      	cmp	r3, r6
 8007552:	db0b      	blt.n	800756c <__lshift+0x38>
 8007554:	4638      	mov	r0, r7
 8007556:	f7ff fddd 	bl	8007114 <_Balloc>
 800755a:	4605      	mov	r5, r0
 800755c:	b948      	cbnz	r0, 8007572 <__lshift+0x3e>
 800755e:	4602      	mov	r2, r0
 8007560:	4b28      	ldr	r3, [pc, #160]	; (8007604 <__lshift+0xd0>)
 8007562:	4829      	ldr	r0, [pc, #164]	; (8007608 <__lshift+0xd4>)
 8007564:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007568:	f000 fb8e 	bl	8007c88 <__assert_func>
 800756c:	3101      	adds	r1, #1
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	e7ee      	b.n	8007550 <__lshift+0x1c>
 8007572:	2300      	movs	r3, #0
 8007574:	f100 0114 	add.w	r1, r0, #20
 8007578:	f100 0210 	add.w	r2, r0, #16
 800757c:	4618      	mov	r0, r3
 800757e:	4553      	cmp	r3, sl
 8007580:	db33      	blt.n	80075ea <__lshift+0xb6>
 8007582:	6920      	ldr	r0, [r4, #16]
 8007584:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007588:	f104 0314 	add.w	r3, r4, #20
 800758c:	f019 091f 	ands.w	r9, r9, #31
 8007590:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007594:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007598:	d02b      	beq.n	80075f2 <__lshift+0xbe>
 800759a:	f1c9 0e20 	rsb	lr, r9, #32
 800759e:	468a      	mov	sl, r1
 80075a0:	2200      	movs	r2, #0
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	fa00 f009 	lsl.w	r0, r0, r9
 80075a8:	4310      	orrs	r0, r2
 80075aa:	f84a 0b04 	str.w	r0, [sl], #4
 80075ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b2:	459c      	cmp	ip, r3
 80075b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80075b8:	d8f3      	bhi.n	80075a2 <__lshift+0x6e>
 80075ba:	ebac 0304 	sub.w	r3, ip, r4
 80075be:	3b15      	subs	r3, #21
 80075c0:	f023 0303 	bic.w	r3, r3, #3
 80075c4:	3304      	adds	r3, #4
 80075c6:	f104 0015 	add.w	r0, r4, #21
 80075ca:	4584      	cmp	ip, r0
 80075cc:	bf38      	it	cc
 80075ce:	2304      	movcc	r3, #4
 80075d0:	50ca      	str	r2, [r1, r3]
 80075d2:	b10a      	cbz	r2, 80075d8 <__lshift+0xa4>
 80075d4:	f108 0602 	add.w	r6, r8, #2
 80075d8:	3e01      	subs	r6, #1
 80075da:	4638      	mov	r0, r7
 80075dc:	612e      	str	r6, [r5, #16]
 80075de:	4621      	mov	r1, r4
 80075e0:	f7ff fdd8 	bl	8007194 <_Bfree>
 80075e4:	4628      	mov	r0, r5
 80075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80075ee:	3301      	adds	r3, #1
 80075f0:	e7c5      	b.n	800757e <__lshift+0x4a>
 80075f2:	3904      	subs	r1, #4
 80075f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80075fc:	459c      	cmp	ip, r3
 80075fe:	d8f9      	bhi.n	80075f4 <__lshift+0xc0>
 8007600:	e7ea      	b.n	80075d8 <__lshift+0xa4>
 8007602:	bf00      	nop
 8007604:	08008670 	.word	0x08008670
 8007608:	08008681 	.word	0x08008681

0800760c <__mcmp>:
 800760c:	b530      	push	{r4, r5, lr}
 800760e:	6902      	ldr	r2, [r0, #16]
 8007610:	690c      	ldr	r4, [r1, #16]
 8007612:	1b12      	subs	r2, r2, r4
 8007614:	d10e      	bne.n	8007634 <__mcmp+0x28>
 8007616:	f100 0314 	add.w	r3, r0, #20
 800761a:	3114      	adds	r1, #20
 800761c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800762c:	42a5      	cmp	r5, r4
 800762e:	d003      	beq.n	8007638 <__mcmp+0x2c>
 8007630:	d305      	bcc.n	800763e <__mcmp+0x32>
 8007632:	2201      	movs	r2, #1
 8007634:	4610      	mov	r0, r2
 8007636:	bd30      	pop	{r4, r5, pc}
 8007638:	4283      	cmp	r3, r0
 800763a:	d3f3      	bcc.n	8007624 <__mcmp+0x18>
 800763c:	e7fa      	b.n	8007634 <__mcmp+0x28>
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	e7f7      	b.n	8007634 <__mcmp+0x28>

08007644 <__mdiff>:
 8007644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	460c      	mov	r4, r1
 800764a:	4606      	mov	r6, r0
 800764c:	4611      	mov	r1, r2
 800764e:	4620      	mov	r0, r4
 8007650:	4690      	mov	r8, r2
 8007652:	f7ff ffdb 	bl	800760c <__mcmp>
 8007656:	1e05      	subs	r5, r0, #0
 8007658:	d110      	bne.n	800767c <__mdiff+0x38>
 800765a:	4629      	mov	r1, r5
 800765c:	4630      	mov	r0, r6
 800765e:	f7ff fd59 	bl	8007114 <_Balloc>
 8007662:	b930      	cbnz	r0, 8007672 <__mdiff+0x2e>
 8007664:	4b3a      	ldr	r3, [pc, #232]	; (8007750 <__mdiff+0x10c>)
 8007666:	4602      	mov	r2, r0
 8007668:	f240 2137 	movw	r1, #567	; 0x237
 800766c:	4839      	ldr	r0, [pc, #228]	; (8007754 <__mdiff+0x110>)
 800766e:	f000 fb0b 	bl	8007c88 <__assert_func>
 8007672:	2301      	movs	r3, #1
 8007674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767c:	bfa4      	itt	ge
 800767e:	4643      	movge	r3, r8
 8007680:	46a0      	movge	r8, r4
 8007682:	4630      	mov	r0, r6
 8007684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007688:	bfa6      	itte	ge
 800768a:	461c      	movge	r4, r3
 800768c:	2500      	movge	r5, #0
 800768e:	2501      	movlt	r5, #1
 8007690:	f7ff fd40 	bl	8007114 <_Balloc>
 8007694:	b920      	cbnz	r0, 80076a0 <__mdiff+0x5c>
 8007696:	4b2e      	ldr	r3, [pc, #184]	; (8007750 <__mdiff+0x10c>)
 8007698:	4602      	mov	r2, r0
 800769a:	f240 2145 	movw	r1, #581	; 0x245
 800769e:	e7e5      	b.n	800766c <__mdiff+0x28>
 80076a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076a4:	6926      	ldr	r6, [r4, #16]
 80076a6:	60c5      	str	r5, [r0, #12]
 80076a8:	f104 0914 	add.w	r9, r4, #20
 80076ac:	f108 0514 	add.w	r5, r8, #20
 80076b0:	f100 0e14 	add.w	lr, r0, #20
 80076b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076bc:	f108 0210 	add.w	r2, r8, #16
 80076c0:	46f2      	mov	sl, lr
 80076c2:	2100      	movs	r1, #0
 80076c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80076c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076cc:	fa11 f88b 	uxtah	r8, r1, fp
 80076d0:	b299      	uxth	r1, r3
 80076d2:	0c1b      	lsrs	r3, r3, #16
 80076d4:	eba8 0801 	sub.w	r8, r8, r1
 80076d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076e0:	fa1f f888 	uxth.w	r8, r8
 80076e4:	1419      	asrs	r1, r3, #16
 80076e6:	454e      	cmp	r6, r9
 80076e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076ec:	f84a 3b04 	str.w	r3, [sl], #4
 80076f0:	d8e8      	bhi.n	80076c4 <__mdiff+0x80>
 80076f2:	1b33      	subs	r3, r6, r4
 80076f4:	3b15      	subs	r3, #21
 80076f6:	f023 0303 	bic.w	r3, r3, #3
 80076fa:	3304      	adds	r3, #4
 80076fc:	3415      	adds	r4, #21
 80076fe:	42a6      	cmp	r6, r4
 8007700:	bf38      	it	cc
 8007702:	2304      	movcc	r3, #4
 8007704:	441d      	add	r5, r3
 8007706:	4473      	add	r3, lr
 8007708:	469e      	mov	lr, r3
 800770a:	462e      	mov	r6, r5
 800770c:	4566      	cmp	r6, ip
 800770e:	d30e      	bcc.n	800772e <__mdiff+0xea>
 8007710:	f10c 0203 	add.w	r2, ip, #3
 8007714:	1b52      	subs	r2, r2, r5
 8007716:	f022 0203 	bic.w	r2, r2, #3
 800771a:	3d03      	subs	r5, #3
 800771c:	45ac      	cmp	ip, r5
 800771e:	bf38      	it	cc
 8007720:	2200      	movcc	r2, #0
 8007722:	4413      	add	r3, r2
 8007724:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007728:	b17a      	cbz	r2, 800774a <__mdiff+0x106>
 800772a:	6107      	str	r7, [r0, #16]
 800772c:	e7a4      	b.n	8007678 <__mdiff+0x34>
 800772e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007732:	fa11 f288 	uxtah	r2, r1, r8
 8007736:	1414      	asrs	r4, r2, #16
 8007738:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800773c:	b292      	uxth	r2, r2
 800773e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007742:	f84e 2b04 	str.w	r2, [lr], #4
 8007746:	1421      	asrs	r1, r4, #16
 8007748:	e7e0      	b.n	800770c <__mdiff+0xc8>
 800774a:	3f01      	subs	r7, #1
 800774c:	e7ea      	b.n	8007724 <__mdiff+0xe0>
 800774e:	bf00      	nop
 8007750:	08008670 	.word	0x08008670
 8007754:	08008681 	.word	0x08008681

08007758 <__d2b>:
 8007758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800775c:	460f      	mov	r7, r1
 800775e:	2101      	movs	r1, #1
 8007760:	ec59 8b10 	vmov	r8, r9, d0
 8007764:	4616      	mov	r6, r2
 8007766:	f7ff fcd5 	bl	8007114 <_Balloc>
 800776a:	4604      	mov	r4, r0
 800776c:	b930      	cbnz	r0, 800777c <__d2b+0x24>
 800776e:	4602      	mov	r2, r0
 8007770:	4b24      	ldr	r3, [pc, #144]	; (8007804 <__d2b+0xac>)
 8007772:	4825      	ldr	r0, [pc, #148]	; (8007808 <__d2b+0xb0>)
 8007774:	f240 310f 	movw	r1, #783	; 0x30f
 8007778:	f000 fa86 	bl	8007c88 <__assert_func>
 800777c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007784:	bb2d      	cbnz	r5, 80077d2 <__d2b+0x7a>
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	f1b8 0300 	subs.w	r3, r8, #0
 800778c:	d026      	beq.n	80077dc <__d2b+0x84>
 800778e:	4668      	mov	r0, sp
 8007790:	9300      	str	r3, [sp, #0]
 8007792:	f7ff fd87 	bl	80072a4 <__lo0bits>
 8007796:	e9dd 1200 	ldrd	r1, r2, [sp]
 800779a:	b1e8      	cbz	r0, 80077d8 <__d2b+0x80>
 800779c:	f1c0 0320 	rsb	r3, r0, #32
 80077a0:	fa02 f303 	lsl.w	r3, r2, r3
 80077a4:	430b      	orrs	r3, r1
 80077a6:	40c2      	lsrs	r2, r0
 80077a8:	6163      	str	r3, [r4, #20]
 80077aa:	9201      	str	r2, [sp, #4]
 80077ac:	9b01      	ldr	r3, [sp, #4]
 80077ae:	61a3      	str	r3, [r4, #24]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bf14      	ite	ne
 80077b4:	2202      	movne	r2, #2
 80077b6:	2201      	moveq	r2, #1
 80077b8:	6122      	str	r2, [r4, #16]
 80077ba:	b1bd      	cbz	r5, 80077ec <__d2b+0x94>
 80077bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077c0:	4405      	add	r5, r0
 80077c2:	603d      	str	r5, [r7, #0]
 80077c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077c8:	6030      	str	r0, [r6, #0]
 80077ca:	4620      	mov	r0, r4
 80077cc:	b003      	add	sp, #12
 80077ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077d6:	e7d6      	b.n	8007786 <__d2b+0x2e>
 80077d8:	6161      	str	r1, [r4, #20]
 80077da:	e7e7      	b.n	80077ac <__d2b+0x54>
 80077dc:	a801      	add	r0, sp, #4
 80077de:	f7ff fd61 	bl	80072a4 <__lo0bits>
 80077e2:	9b01      	ldr	r3, [sp, #4]
 80077e4:	6163      	str	r3, [r4, #20]
 80077e6:	3020      	adds	r0, #32
 80077e8:	2201      	movs	r2, #1
 80077ea:	e7e5      	b.n	80077b8 <__d2b+0x60>
 80077ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077f4:	6038      	str	r0, [r7, #0]
 80077f6:	6918      	ldr	r0, [r3, #16]
 80077f8:	f7ff fd34 	bl	8007264 <__hi0bits>
 80077fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007800:	e7e2      	b.n	80077c8 <__d2b+0x70>
 8007802:	bf00      	nop
 8007804:	08008670 	.word	0x08008670
 8007808:	08008681 	.word	0x08008681

0800780c <__ssputs_r>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	688e      	ldr	r6, [r1, #8]
 8007812:	461f      	mov	r7, r3
 8007814:	42be      	cmp	r6, r7
 8007816:	680b      	ldr	r3, [r1, #0]
 8007818:	4682      	mov	sl, r0
 800781a:	460c      	mov	r4, r1
 800781c:	4690      	mov	r8, r2
 800781e:	d82c      	bhi.n	800787a <__ssputs_r+0x6e>
 8007820:	898a      	ldrh	r2, [r1, #12]
 8007822:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007826:	d026      	beq.n	8007876 <__ssputs_r+0x6a>
 8007828:	6965      	ldr	r5, [r4, #20]
 800782a:	6909      	ldr	r1, [r1, #16]
 800782c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007830:	eba3 0901 	sub.w	r9, r3, r1
 8007834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007838:	1c7b      	adds	r3, r7, #1
 800783a:	444b      	add	r3, r9
 800783c:	106d      	asrs	r5, r5, #1
 800783e:	429d      	cmp	r5, r3
 8007840:	bf38      	it	cc
 8007842:	461d      	movcc	r5, r3
 8007844:	0553      	lsls	r3, r2, #21
 8007846:	d527      	bpl.n	8007898 <__ssputs_r+0x8c>
 8007848:	4629      	mov	r1, r5
 800784a:	f7ff fbd7 	bl	8006ffc <_malloc_r>
 800784e:	4606      	mov	r6, r0
 8007850:	b360      	cbz	r0, 80078ac <__ssputs_r+0xa0>
 8007852:	6921      	ldr	r1, [r4, #16]
 8007854:	464a      	mov	r2, r9
 8007856:	f000 fa09 	bl	8007c6c <memcpy>
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007864:	81a3      	strh	r3, [r4, #12]
 8007866:	6126      	str	r6, [r4, #16]
 8007868:	6165      	str	r5, [r4, #20]
 800786a:	444e      	add	r6, r9
 800786c:	eba5 0509 	sub.w	r5, r5, r9
 8007870:	6026      	str	r6, [r4, #0]
 8007872:	60a5      	str	r5, [r4, #8]
 8007874:	463e      	mov	r6, r7
 8007876:	42be      	cmp	r6, r7
 8007878:	d900      	bls.n	800787c <__ssputs_r+0x70>
 800787a:	463e      	mov	r6, r7
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	4632      	mov	r2, r6
 8007880:	4641      	mov	r1, r8
 8007882:	f000 f9c9 	bl	8007c18 <memmove>
 8007886:	68a3      	ldr	r3, [r4, #8]
 8007888:	1b9b      	subs	r3, r3, r6
 800788a:	60a3      	str	r3, [r4, #8]
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	4433      	add	r3, r6
 8007890:	6023      	str	r3, [r4, #0]
 8007892:	2000      	movs	r0, #0
 8007894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007898:	462a      	mov	r2, r5
 800789a:	f000 fa3b 	bl	8007d14 <_realloc_r>
 800789e:	4606      	mov	r6, r0
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d1e0      	bne.n	8007866 <__ssputs_r+0x5a>
 80078a4:	6921      	ldr	r1, [r4, #16]
 80078a6:	4650      	mov	r0, sl
 80078a8:	f7ff fb34 	bl	8006f14 <_free_r>
 80078ac:	230c      	movs	r3, #12
 80078ae:	f8ca 3000 	str.w	r3, [sl]
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	e7e9      	b.n	8007894 <__ssputs_r+0x88>

080078c0 <_svfiprintf_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	4698      	mov	r8, r3
 80078c6:	898b      	ldrh	r3, [r1, #12]
 80078c8:	061b      	lsls	r3, r3, #24
 80078ca:	b09d      	sub	sp, #116	; 0x74
 80078cc:	4607      	mov	r7, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	4614      	mov	r4, r2
 80078d2:	d50e      	bpl.n	80078f2 <_svfiprintf_r+0x32>
 80078d4:	690b      	ldr	r3, [r1, #16]
 80078d6:	b963      	cbnz	r3, 80078f2 <_svfiprintf_r+0x32>
 80078d8:	2140      	movs	r1, #64	; 0x40
 80078da:	f7ff fb8f 	bl	8006ffc <_malloc_r>
 80078de:	6028      	str	r0, [r5, #0]
 80078e0:	6128      	str	r0, [r5, #16]
 80078e2:	b920      	cbnz	r0, 80078ee <_svfiprintf_r+0x2e>
 80078e4:	230c      	movs	r3, #12
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	e0d0      	b.n	8007a90 <_svfiprintf_r+0x1d0>
 80078ee:	2340      	movs	r3, #64	; 0x40
 80078f0:	616b      	str	r3, [r5, #20]
 80078f2:	2300      	movs	r3, #0
 80078f4:	9309      	str	r3, [sp, #36]	; 0x24
 80078f6:	2320      	movs	r3, #32
 80078f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007900:	2330      	movs	r3, #48	; 0x30
 8007902:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007aa8 <_svfiprintf_r+0x1e8>
 8007906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800790a:	f04f 0901 	mov.w	r9, #1
 800790e:	4623      	mov	r3, r4
 8007910:	469a      	mov	sl, r3
 8007912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007916:	b10a      	cbz	r2, 800791c <_svfiprintf_r+0x5c>
 8007918:	2a25      	cmp	r2, #37	; 0x25
 800791a:	d1f9      	bne.n	8007910 <_svfiprintf_r+0x50>
 800791c:	ebba 0b04 	subs.w	fp, sl, r4
 8007920:	d00b      	beq.n	800793a <_svfiprintf_r+0x7a>
 8007922:	465b      	mov	r3, fp
 8007924:	4622      	mov	r2, r4
 8007926:	4629      	mov	r1, r5
 8007928:	4638      	mov	r0, r7
 800792a:	f7ff ff6f 	bl	800780c <__ssputs_r>
 800792e:	3001      	adds	r0, #1
 8007930:	f000 80a9 	beq.w	8007a86 <_svfiprintf_r+0x1c6>
 8007934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007936:	445a      	add	r2, fp
 8007938:	9209      	str	r2, [sp, #36]	; 0x24
 800793a:	f89a 3000 	ldrb.w	r3, [sl]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 80a1 	beq.w	8007a86 <_svfiprintf_r+0x1c6>
 8007944:	2300      	movs	r3, #0
 8007946:	f04f 32ff 	mov.w	r2, #4294967295
 800794a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794e:	f10a 0a01 	add.w	sl, sl, #1
 8007952:	9304      	str	r3, [sp, #16]
 8007954:	9307      	str	r3, [sp, #28]
 8007956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800795a:	931a      	str	r3, [sp, #104]	; 0x68
 800795c:	4654      	mov	r4, sl
 800795e:	2205      	movs	r2, #5
 8007960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007964:	4850      	ldr	r0, [pc, #320]	; (8007aa8 <_svfiprintf_r+0x1e8>)
 8007966:	f7f8 fc53 	bl	8000210 <memchr>
 800796a:	9a04      	ldr	r2, [sp, #16]
 800796c:	b9d8      	cbnz	r0, 80079a6 <_svfiprintf_r+0xe6>
 800796e:	06d0      	lsls	r0, r2, #27
 8007970:	bf44      	itt	mi
 8007972:	2320      	movmi	r3, #32
 8007974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007978:	0711      	lsls	r1, r2, #28
 800797a:	bf44      	itt	mi
 800797c:	232b      	movmi	r3, #43	; 0x2b
 800797e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007982:	f89a 3000 	ldrb.w	r3, [sl]
 8007986:	2b2a      	cmp	r3, #42	; 0x2a
 8007988:	d015      	beq.n	80079b6 <_svfiprintf_r+0xf6>
 800798a:	9a07      	ldr	r2, [sp, #28]
 800798c:	4654      	mov	r4, sl
 800798e:	2000      	movs	r0, #0
 8007990:	f04f 0c0a 	mov.w	ip, #10
 8007994:	4621      	mov	r1, r4
 8007996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800799a:	3b30      	subs	r3, #48	; 0x30
 800799c:	2b09      	cmp	r3, #9
 800799e:	d94d      	bls.n	8007a3c <_svfiprintf_r+0x17c>
 80079a0:	b1b0      	cbz	r0, 80079d0 <_svfiprintf_r+0x110>
 80079a2:	9207      	str	r2, [sp, #28]
 80079a4:	e014      	b.n	80079d0 <_svfiprintf_r+0x110>
 80079a6:	eba0 0308 	sub.w	r3, r0, r8
 80079aa:	fa09 f303 	lsl.w	r3, r9, r3
 80079ae:	4313      	orrs	r3, r2
 80079b0:	9304      	str	r3, [sp, #16]
 80079b2:	46a2      	mov	sl, r4
 80079b4:	e7d2      	b.n	800795c <_svfiprintf_r+0x9c>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	1d19      	adds	r1, r3, #4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	9103      	str	r1, [sp, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bfbb      	ittet	lt
 80079c2:	425b      	neglt	r3, r3
 80079c4:	f042 0202 	orrlt.w	r2, r2, #2
 80079c8:	9307      	strge	r3, [sp, #28]
 80079ca:	9307      	strlt	r3, [sp, #28]
 80079cc:	bfb8      	it	lt
 80079ce:	9204      	strlt	r2, [sp, #16]
 80079d0:	7823      	ldrb	r3, [r4, #0]
 80079d2:	2b2e      	cmp	r3, #46	; 0x2e
 80079d4:	d10c      	bne.n	80079f0 <_svfiprintf_r+0x130>
 80079d6:	7863      	ldrb	r3, [r4, #1]
 80079d8:	2b2a      	cmp	r3, #42	; 0x2a
 80079da:	d134      	bne.n	8007a46 <_svfiprintf_r+0x186>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	1d1a      	adds	r2, r3, #4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	9203      	str	r2, [sp, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bfb8      	it	lt
 80079e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80079ec:	3402      	adds	r4, #2
 80079ee:	9305      	str	r3, [sp, #20]
 80079f0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ab8 <_svfiprintf_r+0x1f8>
 80079f4:	7821      	ldrb	r1, [r4, #0]
 80079f6:	2203      	movs	r2, #3
 80079f8:	4650      	mov	r0, sl
 80079fa:	f7f8 fc09 	bl	8000210 <memchr>
 80079fe:	b138      	cbz	r0, 8007a10 <_svfiprintf_r+0x150>
 8007a00:	9b04      	ldr	r3, [sp, #16]
 8007a02:	eba0 000a 	sub.w	r0, r0, sl
 8007a06:	2240      	movs	r2, #64	; 0x40
 8007a08:	4082      	lsls	r2, r0
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	3401      	adds	r4, #1
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a14:	4825      	ldr	r0, [pc, #148]	; (8007aac <_svfiprintf_r+0x1ec>)
 8007a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a1a:	2206      	movs	r2, #6
 8007a1c:	f7f8 fbf8 	bl	8000210 <memchr>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d038      	beq.n	8007a96 <_svfiprintf_r+0x1d6>
 8007a24:	4b22      	ldr	r3, [pc, #136]	; (8007ab0 <_svfiprintf_r+0x1f0>)
 8007a26:	bb1b      	cbnz	r3, 8007a70 <_svfiprintf_r+0x1b0>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	3307      	adds	r3, #7
 8007a2c:	f023 0307 	bic.w	r3, r3, #7
 8007a30:	3308      	adds	r3, #8
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a36:	4433      	add	r3, r6
 8007a38:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3a:	e768      	b.n	800790e <_svfiprintf_r+0x4e>
 8007a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a40:	460c      	mov	r4, r1
 8007a42:	2001      	movs	r0, #1
 8007a44:	e7a6      	b.n	8007994 <_svfiprintf_r+0xd4>
 8007a46:	2300      	movs	r3, #0
 8007a48:	3401      	adds	r4, #1
 8007a4a:	9305      	str	r3, [sp, #20]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f04f 0c0a 	mov.w	ip, #10
 8007a52:	4620      	mov	r0, r4
 8007a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a58:	3a30      	subs	r2, #48	; 0x30
 8007a5a:	2a09      	cmp	r2, #9
 8007a5c:	d903      	bls.n	8007a66 <_svfiprintf_r+0x1a6>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0c6      	beq.n	80079f0 <_svfiprintf_r+0x130>
 8007a62:	9105      	str	r1, [sp, #20]
 8007a64:	e7c4      	b.n	80079f0 <_svfiprintf_r+0x130>
 8007a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e7f0      	b.n	8007a52 <_svfiprintf_r+0x192>
 8007a70:	ab03      	add	r3, sp, #12
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	462a      	mov	r2, r5
 8007a76:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <_svfiprintf_r+0x1f4>)
 8007a78:	a904      	add	r1, sp, #16
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f7fd fe62 	bl	8005744 <_printf_float>
 8007a80:	1c42      	adds	r2, r0, #1
 8007a82:	4606      	mov	r6, r0
 8007a84:	d1d6      	bne.n	8007a34 <_svfiprintf_r+0x174>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	065b      	lsls	r3, r3, #25
 8007a8a:	f53f af2d 	bmi.w	80078e8 <_svfiprintf_r+0x28>
 8007a8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a90:	b01d      	add	sp, #116	; 0x74
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	ab03      	add	r3, sp, #12
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <_svfiprintf_r+0x1f4>)
 8007a9e:	a904      	add	r1, sp, #16
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f7fe f8f3 	bl	8005c8c <_printf_i>
 8007aa6:	e7eb      	b.n	8007a80 <_svfiprintf_r+0x1c0>
 8007aa8:	080087dc 	.word	0x080087dc
 8007aac:	080087e6 	.word	0x080087e6
 8007ab0:	08005745 	.word	0x08005745
 8007ab4:	0800780d 	.word	0x0800780d
 8007ab8:	080087e2 	.word	0x080087e2

08007abc <__sflush_r>:
 8007abc:	898a      	ldrh	r2, [r1, #12]
 8007abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	0710      	lsls	r0, r2, #28
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	d458      	bmi.n	8007b7c <__sflush_r+0xc0>
 8007aca:	684b      	ldr	r3, [r1, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	dc05      	bgt.n	8007adc <__sflush_r+0x20>
 8007ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dc02      	bgt.n	8007adc <__sflush_r+0x20>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ade:	2e00      	cmp	r6, #0
 8007ae0:	d0f9      	beq.n	8007ad6 <__sflush_r+0x1a>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ae8:	682f      	ldr	r7, [r5, #0]
 8007aea:	6a21      	ldr	r1, [r4, #32]
 8007aec:	602b      	str	r3, [r5, #0]
 8007aee:	d032      	beq.n	8007b56 <__sflush_r+0x9a>
 8007af0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	075a      	lsls	r2, r3, #29
 8007af6:	d505      	bpl.n	8007b04 <__sflush_r+0x48>
 8007af8:	6863      	ldr	r3, [r4, #4]
 8007afa:	1ac0      	subs	r0, r0, r3
 8007afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007afe:	b10b      	cbz	r3, 8007b04 <__sflush_r+0x48>
 8007b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b02:	1ac0      	subs	r0, r0, r3
 8007b04:	2300      	movs	r3, #0
 8007b06:	4602      	mov	r2, r0
 8007b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b0a:	6a21      	ldr	r1, [r4, #32]
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b0      	blx	r6
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	d106      	bne.n	8007b24 <__sflush_r+0x68>
 8007b16:	6829      	ldr	r1, [r5, #0]
 8007b18:	291d      	cmp	r1, #29
 8007b1a:	d82b      	bhi.n	8007b74 <__sflush_r+0xb8>
 8007b1c:	4a29      	ldr	r2, [pc, #164]	; (8007bc4 <__sflush_r+0x108>)
 8007b1e:	410a      	asrs	r2, r1
 8007b20:	07d6      	lsls	r6, r2, #31
 8007b22:	d427      	bmi.n	8007b74 <__sflush_r+0xb8>
 8007b24:	2200      	movs	r2, #0
 8007b26:	6062      	str	r2, [r4, #4]
 8007b28:	04d9      	lsls	r1, r3, #19
 8007b2a:	6922      	ldr	r2, [r4, #16]
 8007b2c:	6022      	str	r2, [r4, #0]
 8007b2e:	d504      	bpl.n	8007b3a <__sflush_r+0x7e>
 8007b30:	1c42      	adds	r2, r0, #1
 8007b32:	d101      	bne.n	8007b38 <__sflush_r+0x7c>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b903      	cbnz	r3, 8007b3a <__sflush_r+0x7e>
 8007b38:	6560      	str	r0, [r4, #84]	; 0x54
 8007b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b3c:	602f      	str	r7, [r5, #0]
 8007b3e:	2900      	cmp	r1, #0
 8007b40:	d0c9      	beq.n	8007ad6 <__sflush_r+0x1a>
 8007b42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b46:	4299      	cmp	r1, r3
 8007b48:	d002      	beq.n	8007b50 <__sflush_r+0x94>
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f7ff f9e2 	bl	8006f14 <_free_r>
 8007b50:	2000      	movs	r0, #0
 8007b52:	6360      	str	r0, [r4, #52]	; 0x34
 8007b54:	e7c0      	b.n	8007ad8 <__sflush_r+0x1c>
 8007b56:	2301      	movs	r3, #1
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47b0      	blx	r6
 8007b5c:	1c41      	adds	r1, r0, #1
 8007b5e:	d1c8      	bne.n	8007af2 <__sflush_r+0x36>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0c5      	beq.n	8007af2 <__sflush_r+0x36>
 8007b66:	2b1d      	cmp	r3, #29
 8007b68:	d001      	beq.n	8007b6e <__sflush_r+0xb2>
 8007b6a:	2b16      	cmp	r3, #22
 8007b6c:	d101      	bne.n	8007b72 <__sflush_r+0xb6>
 8007b6e:	602f      	str	r7, [r5, #0]
 8007b70:	e7b1      	b.n	8007ad6 <__sflush_r+0x1a>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	e7ad      	b.n	8007ad8 <__sflush_r+0x1c>
 8007b7c:	690f      	ldr	r7, [r1, #16]
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	d0a9      	beq.n	8007ad6 <__sflush_r+0x1a>
 8007b82:	0793      	lsls	r3, r2, #30
 8007b84:	680e      	ldr	r6, [r1, #0]
 8007b86:	bf08      	it	eq
 8007b88:	694b      	ldreq	r3, [r1, #20]
 8007b8a:	600f      	str	r7, [r1, #0]
 8007b8c:	bf18      	it	ne
 8007b8e:	2300      	movne	r3, #0
 8007b90:	eba6 0807 	sub.w	r8, r6, r7
 8007b94:	608b      	str	r3, [r1, #8]
 8007b96:	f1b8 0f00 	cmp.w	r8, #0
 8007b9a:	dd9c      	ble.n	8007ad6 <__sflush_r+0x1a>
 8007b9c:	6a21      	ldr	r1, [r4, #32]
 8007b9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ba0:	4643      	mov	r3, r8
 8007ba2:	463a      	mov	r2, r7
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b0      	blx	r6
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	dc06      	bgt.n	8007bba <__sflush_r+0xfe>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb2:	81a3      	strh	r3, [r4, #12]
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	e78e      	b.n	8007ad8 <__sflush_r+0x1c>
 8007bba:	4407      	add	r7, r0
 8007bbc:	eba8 0800 	sub.w	r8, r8, r0
 8007bc0:	e7e9      	b.n	8007b96 <__sflush_r+0xda>
 8007bc2:	bf00      	nop
 8007bc4:	dfbffffe 	.word	0xdfbffffe

08007bc8 <_fflush_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	690b      	ldr	r3, [r1, #16]
 8007bcc:	4605      	mov	r5, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	b913      	cbnz	r3, 8007bd8 <_fflush_r+0x10>
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	b118      	cbz	r0, 8007be2 <_fflush_r+0x1a>
 8007bda:	6a03      	ldr	r3, [r0, #32]
 8007bdc:	b90b      	cbnz	r3, 8007be2 <_fflush_r+0x1a>
 8007bde:	f7fe fa03 	bl	8005fe8 <__sinit>
 8007be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0f3      	beq.n	8007bd2 <_fflush_r+0xa>
 8007bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bec:	07d0      	lsls	r0, r2, #31
 8007bee:	d404      	bmi.n	8007bfa <_fflush_r+0x32>
 8007bf0:	0599      	lsls	r1, r3, #22
 8007bf2:	d402      	bmi.n	8007bfa <_fflush_r+0x32>
 8007bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bf6:	f7fe fb0e 	bl	8006216 <__retarget_lock_acquire_recursive>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	f7ff ff5d 	bl	8007abc <__sflush_r>
 8007c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c04:	07da      	lsls	r2, r3, #31
 8007c06:	4605      	mov	r5, r0
 8007c08:	d4e4      	bmi.n	8007bd4 <_fflush_r+0xc>
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	059b      	lsls	r3, r3, #22
 8007c0e:	d4e1      	bmi.n	8007bd4 <_fflush_r+0xc>
 8007c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c12:	f7fe fb01 	bl	8006218 <__retarget_lock_release_recursive>
 8007c16:	e7dd      	b.n	8007bd4 <_fflush_r+0xc>

08007c18 <memmove>:
 8007c18:	4288      	cmp	r0, r1
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	eb01 0402 	add.w	r4, r1, r2
 8007c20:	d902      	bls.n	8007c28 <memmove+0x10>
 8007c22:	4284      	cmp	r4, r0
 8007c24:	4623      	mov	r3, r4
 8007c26:	d807      	bhi.n	8007c38 <memmove+0x20>
 8007c28:	1e43      	subs	r3, r0, #1
 8007c2a:	42a1      	cmp	r1, r4
 8007c2c:	d008      	beq.n	8007c40 <memmove+0x28>
 8007c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c36:	e7f8      	b.n	8007c2a <memmove+0x12>
 8007c38:	4402      	add	r2, r0
 8007c3a:	4601      	mov	r1, r0
 8007c3c:	428a      	cmp	r2, r1
 8007c3e:	d100      	bne.n	8007c42 <memmove+0x2a>
 8007c40:	bd10      	pop	{r4, pc}
 8007c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c4a:	e7f7      	b.n	8007c3c <memmove+0x24>

08007c4c <_sbrk_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4d06      	ldr	r5, [pc, #24]	; (8007c68 <_sbrk_r+0x1c>)
 8007c50:	2300      	movs	r3, #0
 8007c52:	4604      	mov	r4, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	602b      	str	r3, [r5, #0]
 8007c58:	f7fa f832 	bl	8001cc0 <_sbrk>
 8007c5c:	1c43      	adds	r3, r0, #1
 8007c5e:	d102      	bne.n	8007c66 <_sbrk_r+0x1a>
 8007c60:	682b      	ldr	r3, [r5, #0]
 8007c62:	b103      	cbz	r3, 8007c66 <_sbrk_r+0x1a>
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
 8007c68:	20000e9c 	.word	0x20000e9c

08007c6c <memcpy>:
 8007c6c:	440a      	add	r2, r1
 8007c6e:	4291      	cmp	r1, r2
 8007c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c74:	d100      	bne.n	8007c78 <memcpy+0xc>
 8007c76:	4770      	bx	lr
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c82:	4291      	cmp	r1, r2
 8007c84:	d1f9      	bne.n	8007c7a <memcpy+0xe>
 8007c86:	bd10      	pop	{r4, pc}

08007c88 <__assert_func>:
 8007c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c8a:	4614      	mov	r4, r2
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <__assert_func+0x2c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4605      	mov	r5, r0
 8007c94:	68d8      	ldr	r0, [r3, #12]
 8007c96:	b14c      	cbz	r4, 8007cac <__assert_func+0x24>
 8007c98:	4b07      	ldr	r3, [pc, #28]	; (8007cb8 <__assert_func+0x30>)
 8007c9a:	9100      	str	r1, [sp, #0]
 8007c9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ca0:	4906      	ldr	r1, [pc, #24]	; (8007cbc <__assert_func+0x34>)
 8007ca2:	462b      	mov	r3, r5
 8007ca4:	f000 f872 	bl	8007d8c <fiprintf>
 8007ca8:	f000 f882 	bl	8007db0 <abort>
 8007cac:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <__assert_func+0x38>)
 8007cae:	461c      	mov	r4, r3
 8007cb0:	e7f3      	b.n	8007c9a <__assert_func+0x12>
 8007cb2:	bf00      	nop
 8007cb4:	20000068 	.word	0x20000068
 8007cb8:	080087f7 	.word	0x080087f7
 8007cbc:	08008804 	.word	0x08008804
 8007cc0:	08008832 	.word	0x08008832

08007cc4 <_calloc_r>:
 8007cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc6:	fba1 2402 	umull	r2, r4, r1, r2
 8007cca:	b94c      	cbnz	r4, 8007ce0 <_calloc_r+0x1c>
 8007ccc:	4611      	mov	r1, r2
 8007cce:	9201      	str	r2, [sp, #4]
 8007cd0:	f7ff f994 	bl	8006ffc <_malloc_r>
 8007cd4:	9a01      	ldr	r2, [sp, #4]
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	b930      	cbnz	r0, 8007ce8 <_calloc_r+0x24>
 8007cda:	4628      	mov	r0, r5
 8007cdc:	b003      	add	sp, #12
 8007cde:	bd30      	pop	{r4, r5, pc}
 8007ce0:	220c      	movs	r2, #12
 8007ce2:	6002      	str	r2, [r0, #0]
 8007ce4:	2500      	movs	r5, #0
 8007ce6:	e7f8      	b.n	8007cda <_calloc_r+0x16>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	f7fe fa16 	bl	800611a <memset>
 8007cee:	e7f4      	b.n	8007cda <_calloc_r+0x16>

08007cf0 <__ascii_mbtowc>:
 8007cf0:	b082      	sub	sp, #8
 8007cf2:	b901      	cbnz	r1, 8007cf6 <__ascii_mbtowc+0x6>
 8007cf4:	a901      	add	r1, sp, #4
 8007cf6:	b142      	cbz	r2, 8007d0a <__ascii_mbtowc+0x1a>
 8007cf8:	b14b      	cbz	r3, 8007d0e <__ascii_mbtowc+0x1e>
 8007cfa:	7813      	ldrb	r3, [r2, #0]
 8007cfc:	600b      	str	r3, [r1, #0]
 8007cfe:	7812      	ldrb	r2, [r2, #0]
 8007d00:	1e10      	subs	r0, r2, #0
 8007d02:	bf18      	it	ne
 8007d04:	2001      	movne	r0, #1
 8007d06:	b002      	add	sp, #8
 8007d08:	4770      	bx	lr
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	e7fb      	b.n	8007d06 <__ascii_mbtowc+0x16>
 8007d0e:	f06f 0001 	mvn.w	r0, #1
 8007d12:	e7f8      	b.n	8007d06 <__ascii_mbtowc+0x16>

08007d14 <_realloc_r>:
 8007d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d18:	4680      	mov	r8, r0
 8007d1a:	4614      	mov	r4, r2
 8007d1c:	460e      	mov	r6, r1
 8007d1e:	b921      	cbnz	r1, 8007d2a <_realloc_r+0x16>
 8007d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d24:	4611      	mov	r1, r2
 8007d26:	f7ff b969 	b.w	8006ffc <_malloc_r>
 8007d2a:	b92a      	cbnz	r2, 8007d38 <_realloc_r+0x24>
 8007d2c:	f7ff f8f2 	bl	8006f14 <_free_r>
 8007d30:	4625      	mov	r5, r4
 8007d32:	4628      	mov	r0, r5
 8007d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d38:	f000 f841 	bl	8007dbe <_malloc_usable_size_r>
 8007d3c:	4284      	cmp	r4, r0
 8007d3e:	4607      	mov	r7, r0
 8007d40:	d802      	bhi.n	8007d48 <_realloc_r+0x34>
 8007d42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d46:	d812      	bhi.n	8007d6e <_realloc_r+0x5a>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f7ff f956 	bl	8006ffc <_malloc_r>
 8007d50:	4605      	mov	r5, r0
 8007d52:	2800      	cmp	r0, #0
 8007d54:	d0ed      	beq.n	8007d32 <_realloc_r+0x1e>
 8007d56:	42bc      	cmp	r4, r7
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	bf28      	it	cs
 8007d5e:	463a      	movcs	r2, r7
 8007d60:	f7ff ff84 	bl	8007c6c <memcpy>
 8007d64:	4631      	mov	r1, r6
 8007d66:	4640      	mov	r0, r8
 8007d68:	f7ff f8d4 	bl	8006f14 <_free_r>
 8007d6c:	e7e1      	b.n	8007d32 <_realloc_r+0x1e>
 8007d6e:	4635      	mov	r5, r6
 8007d70:	e7df      	b.n	8007d32 <_realloc_r+0x1e>

08007d72 <__ascii_wctomb>:
 8007d72:	b149      	cbz	r1, 8007d88 <__ascii_wctomb+0x16>
 8007d74:	2aff      	cmp	r2, #255	; 0xff
 8007d76:	bf85      	ittet	hi
 8007d78:	238a      	movhi	r3, #138	; 0x8a
 8007d7a:	6003      	strhi	r3, [r0, #0]
 8007d7c:	700a      	strbls	r2, [r1, #0]
 8007d7e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d82:	bf98      	it	ls
 8007d84:	2001      	movls	r0, #1
 8007d86:	4770      	bx	lr
 8007d88:	4608      	mov	r0, r1
 8007d8a:	4770      	bx	lr

08007d8c <fiprintf>:
 8007d8c:	b40e      	push	{r1, r2, r3}
 8007d8e:	b503      	push	{r0, r1, lr}
 8007d90:	4601      	mov	r1, r0
 8007d92:	ab03      	add	r3, sp, #12
 8007d94:	4805      	ldr	r0, [pc, #20]	; (8007dac <fiprintf+0x20>)
 8007d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d9a:	6800      	ldr	r0, [r0, #0]
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	f000 f83f 	bl	8007e20 <_vfiprintf_r>
 8007da2:	b002      	add	sp, #8
 8007da4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da8:	b003      	add	sp, #12
 8007daa:	4770      	bx	lr
 8007dac:	20000068 	.word	0x20000068

08007db0 <abort>:
 8007db0:	b508      	push	{r3, lr}
 8007db2:	2006      	movs	r0, #6
 8007db4:	f000 fa0c 	bl	80081d0 <raise>
 8007db8:	2001      	movs	r0, #1
 8007dba:	f7f9 ff09 	bl	8001bd0 <_exit>

08007dbe <_malloc_usable_size_r>:
 8007dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc2:	1f18      	subs	r0, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfbc      	itt	lt
 8007dc8:	580b      	ldrlt	r3, [r1, r0]
 8007dca:	18c0      	addlt	r0, r0, r3
 8007dcc:	4770      	bx	lr

08007dce <__sfputc_r>:
 8007dce:	6893      	ldr	r3, [r2, #8]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	b410      	push	{r4}
 8007dd6:	6093      	str	r3, [r2, #8]
 8007dd8:	da08      	bge.n	8007dec <__sfputc_r+0x1e>
 8007dda:	6994      	ldr	r4, [r2, #24]
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	db01      	blt.n	8007de4 <__sfputc_r+0x16>
 8007de0:	290a      	cmp	r1, #10
 8007de2:	d103      	bne.n	8007dec <__sfputc_r+0x1e>
 8007de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007de8:	f000 b934 	b.w	8008054 <__swbuf_r>
 8007dec:	6813      	ldr	r3, [r2, #0]
 8007dee:	1c58      	adds	r0, r3, #1
 8007df0:	6010      	str	r0, [r2, #0]
 8007df2:	7019      	strb	r1, [r3, #0]
 8007df4:	4608      	mov	r0, r1
 8007df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <__sfputs_r>:
 8007dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfe:	4606      	mov	r6, r0
 8007e00:	460f      	mov	r7, r1
 8007e02:	4614      	mov	r4, r2
 8007e04:	18d5      	adds	r5, r2, r3
 8007e06:	42ac      	cmp	r4, r5
 8007e08:	d101      	bne.n	8007e0e <__sfputs_r+0x12>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e007      	b.n	8007e1e <__sfputs_r+0x22>
 8007e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e12:	463a      	mov	r2, r7
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff ffda 	bl	8007dce <__sfputc_r>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	d1f3      	bne.n	8007e06 <__sfputs_r+0xa>
 8007e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e20 <_vfiprintf_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	460d      	mov	r5, r1
 8007e26:	b09d      	sub	sp, #116	; 0x74
 8007e28:	4614      	mov	r4, r2
 8007e2a:	4698      	mov	r8, r3
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	b118      	cbz	r0, 8007e38 <_vfiprintf_r+0x18>
 8007e30:	6a03      	ldr	r3, [r0, #32]
 8007e32:	b90b      	cbnz	r3, 8007e38 <_vfiprintf_r+0x18>
 8007e34:	f7fe f8d8 	bl	8005fe8 <__sinit>
 8007e38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e3a:	07d9      	lsls	r1, r3, #31
 8007e3c:	d405      	bmi.n	8007e4a <_vfiprintf_r+0x2a>
 8007e3e:	89ab      	ldrh	r3, [r5, #12]
 8007e40:	059a      	lsls	r2, r3, #22
 8007e42:	d402      	bmi.n	8007e4a <_vfiprintf_r+0x2a>
 8007e44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e46:	f7fe f9e6 	bl	8006216 <__retarget_lock_acquire_recursive>
 8007e4a:	89ab      	ldrh	r3, [r5, #12]
 8007e4c:	071b      	lsls	r3, r3, #28
 8007e4e:	d501      	bpl.n	8007e54 <_vfiprintf_r+0x34>
 8007e50:	692b      	ldr	r3, [r5, #16]
 8007e52:	b99b      	cbnz	r3, 8007e7c <_vfiprintf_r+0x5c>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4630      	mov	r0, r6
 8007e58:	f000 f93a 	bl	80080d0 <__swsetup_r>
 8007e5c:	b170      	cbz	r0, 8007e7c <_vfiprintf_r+0x5c>
 8007e5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e60:	07dc      	lsls	r4, r3, #31
 8007e62:	d504      	bpl.n	8007e6e <_vfiprintf_r+0x4e>
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	b01d      	add	sp, #116	; 0x74
 8007e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	0598      	lsls	r0, r3, #22
 8007e72:	d4f7      	bmi.n	8007e64 <_vfiprintf_r+0x44>
 8007e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e76:	f7fe f9cf 	bl	8006218 <__retarget_lock_release_recursive>
 8007e7a:	e7f3      	b.n	8007e64 <_vfiprintf_r+0x44>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e80:	2320      	movs	r3, #32
 8007e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e8a:	2330      	movs	r3, #48	; 0x30
 8007e8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008040 <_vfiprintf_r+0x220>
 8007e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e94:	f04f 0901 	mov.w	r9, #1
 8007e98:	4623      	mov	r3, r4
 8007e9a:	469a      	mov	sl, r3
 8007e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea0:	b10a      	cbz	r2, 8007ea6 <_vfiprintf_r+0x86>
 8007ea2:	2a25      	cmp	r2, #37	; 0x25
 8007ea4:	d1f9      	bne.n	8007e9a <_vfiprintf_r+0x7a>
 8007ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eaa:	d00b      	beq.n	8007ec4 <_vfiprintf_r+0xa4>
 8007eac:	465b      	mov	r3, fp
 8007eae:	4622      	mov	r2, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ffa2 	bl	8007dfc <__sfputs_r>
 8007eb8:	3001      	adds	r0, #1
 8007eba:	f000 80a9 	beq.w	8008010 <_vfiprintf_r+0x1f0>
 8007ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec0:	445a      	add	r2, fp
 8007ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80a1 	beq.w	8008010 <_vfiprintf_r+0x1f0>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ed8:	f10a 0a01 	add.w	sl, sl, #1
 8007edc:	9304      	str	r3, [sp, #16]
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ee6:	4654      	mov	r4, sl
 8007ee8:	2205      	movs	r2, #5
 8007eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eee:	4854      	ldr	r0, [pc, #336]	; (8008040 <_vfiprintf_r+0x220>)
 8007ef0:	f7f8 f98e 	bl	8000210 <memchr>
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	b9d8      	cbnz	r0, 8007f30 <_vfiprintf_r+0x110>
 8007ef8:	06d1      	lsls	r1, r2, #27
 8007efa:	bf44      	itt	mi
 8007efc:	2320      	movmi	r3, #32
 8007efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f02:	0713      	lsls	r3, r2, #28
 8007f04:	bf44      	itt	mi
 8007f06:	232b      	movmi	r3, #43	; 0x2b
 8007f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f10:	2b2a      	cmp	r3, #42	; 0x2a
 8007f12:	d015      	beq.n	8007f40 <_vfiprintf_r+0x120>
 8007f14:	9a07      	ldr	r2, [sp, #28]
 8007f16:	4654      	mov	r4, sl
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f04f 0c0a 	mov.w	ip, #10
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f24:	3b30      	subs	r3, #48	; 0x30
 8007f26:	2b09      	cmp	r3, #9
 8007f28:	d94d      	bls.n	8007fc6 <_vfiprintf_r+0x1a6>
 8007f2a:	b1b0      	cbz	r0, 8007f5a <_vfiprintf_r+0x13a>
 8007f2c:	9207      	str	r2, [sp, #28]
 8007f2e:	e014      	b.n	8007f5a <_vfiprintf_r+0x13a>
 8007f30:	eba0 0308 	sub.w	r3, r0, r8
 8007f34:	fa09 f303 	lsl.w	r3, r9, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	46a2      	mov	sl, r4
 8007f3e:	e7d2      	b.n	8007ee6 <_vfiprintf_r+0xc6>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	1d19      	adds	r1, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	9103      	str	r1, [sp, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bfbb      	ittet	lt
 8007f4c:	425b      	neglt	r3, r3
 8007f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f52:	9307      	strge	r3, [sp, #28]
 8007f54:	9307      	strlt	r3, [sp, #28]
 8007f56:	bfb8      	it	lt
 8007f58:	9204      	strlt	r2, [sp, #16]
 8007f5a:	7823      	ldrb	r3, [r4, #0]
 8007f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f5e:	d10c      	bne.n	8007f7a <_vfiprintf_r+0x15a>
 8007f60:	7863      	ldrb	r3, [r4, #1]
 8007f62:	2b2a      	cmp	r3, #42	; 0x2a
 8007f64:	d134      	bne.n	8007fd0 <_vfiprintf_r+0x1b0>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	1d1a      	adds	r2, r3, #4
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	9203      	str	r2, [sp, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfb8      	it	lt
 8007f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f76:	3402      	adds	r4, #2
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008050 <_vfiprintf_r+0x230>
 8007f7e:	7821      	ldrb	r1, [r4, #0]
 8007f80:	2203      	movs	r2, #3
 8007f82:	4650      	mov	r0, sl
 8007f84:	f7f8 f944 	bl	8000210 <memchr>
 8007f88:	b138      	cbz	r0, 8007f9a <_vfiprintf_r+0x17a>
 8007f8a:	9b04      	ldr	r3, [sp, #16]
 8007f8c:	eba0 000a 	sub.w	r0, r0, sl
 8007f90:	2240      	movs	r2, #64	; 0x40
 8007f92:	4082      	lsls	r2, r0
 8007f94:	4313      	orrs	r3, r2
 8007f96:	3401      	adds	r4, #1
 8007f98:	9304      	str	r3, [sp, #16]
 8007f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9e:	4829      	ldr	r0, [pc, #164]	; (8008044 <_vfiprintf_r+0x224>)
 8007fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fa4:	2206      	movs	r2, #6
 8007fa6:	f7f8 f933 	bl	8000210 <memchr>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d03f      	beq.n	800802e <_vfiprintf_r+0x20e>
 8007fae:	4b26      	ldr	r3, [pc, #152]	; (8008048 <_vfiprintf_r+0x228>)
 8007fb0:	bb1b      	cbnz	r3, 8007ffa <_vfiprintf_r+0x1da>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	3307      	adds	r3, #7
 8007fb6:	f023 0307 	bic.w	r3, r3, #7
 8007fba:	3308      	adds	r3, #8
 8007fbc:	9303      	str	r3, [sp, #12]
 8007fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc0:	443b      	add	r3, r7
 8007fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc4:	e768      	b.n	8007e98 <_vfiprintf_r+0x78>
 8007fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fca:	460c      	mov	r4, r1
 8007fcc:	2001      	movs	r0, #1
 8007fce:	e7a6      	b.n	8007f1e <_vfiprintf_r+0xfe>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	3401      	adds	r4, #1
 8007fd4:	9305      	str	r3, [sp, #20]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	f04f 0c0a 	mov.w	ip, #10
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fe2:	3a30      	subs	r2, #48	; 0x30
 8007fe4:	2a09      	cmp	r2, #9
 8007fe6:	d903      	bls.n	8007ff0 <_vfiprintf_r+0x1d0>
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0c6      	beq.n	8007f7a <_vfiprintf_r+0x15a>
 8007fec:	9105      	str	r1, [sp, #20]
 8007fee:	e7c4      	b.n	8007f7a <_vfiprintf_r+0x15a>
 8007ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e7f0      	b.n	8007fdc <_vfiprintf_r+0x1bc>
 8007ffa:	ab03      	add	r3, sp, #12
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	462a      	mov	r2, r5
 8008000:	4b12      	ldr	r3, [pc, #72]	; (800804c <_vfiprintf_r+0x22c>)
 8008002:	a904      	add	r1, sp, #16
 8008004:	4630      	mov	r0, r6
 8008006:	f7fd fb9d 	bl	8005744 <_printf_float>
 800800a:	4607      	mov	r7, r0
 800800c:	1c78      	adds	r0, r7, #1
 800800e:	d1d6      	bne.n	8007fbe <_vfiprintf_r+0x19e>
 8008010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008012:	07d9      	lsls	r1, r3, #31
 8008014:	d405      	bmi.n	8008022 <_vfiprintf_r+0x202>
 8008016:	89ab      	ldrh	r3, [r5, #12]
 8008018:	059a      	lsls	r2, r3, #22
 800801a:	d402      	bmi.n	8008022 <_vfiprintf_r+0x202>
 800801c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800801e:	f7fe f8fb 	bl	8006218 <__retarget_lock_release_recursive>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	065b      	lsls	r3, r3, #25
 8008026:	f53f af1d 	bmi.w	8007e64 <_vfiprintf_r+0x44>
 800802a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800802c:	e71c      	b.n	8007e68 <_vfiprintf_r+0x48>
 800802e:	ab03      	add	r3, sp, #12
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	462a      	mov	r2, r5
 8008034:	4b05      	ldr	r3, [pc, #20]	; (800804c <_vfiprintf_r+0x22c>)
 8008036:	a904      	add	r1, sp, #16
 8008038:	4630      	mov	r0, r6
 800803a:	f7fd fe27 	bl	8005c8c <_printf_i>
 800803e:	e7e4      	b.n	800800a <_vfiprintf_r+0x1ea>
 8008040:	080087dc 	.word	0x080087dc
 8008044:	080087e6 	.word	0x080087e6
 8008048:	08005745 	.word	0x08005745
 800804c:	08007dfd 	.word	0x08007dfd
 8008050:	080087e2 	.word	0x080087e2

08008054 <__swbuf_r>:
 8008054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008056:	460e      	mov	r6, r1
 8008058:	4614      	mov	r4, r2
 800805a:	4605      	mov	r5, r0
 800805c:	b118      	cbz	r0, 8008066 <__swbuf_r+0x12>
 800805e:	6a03      	ldr	r3, [r0, #32]
 8008060:	b90b      	cbnz	r3, 8008066 <__swbuf_r+0x12>
 8008062:	f7fd ffc1 	bl	8005fe8 <__sinit>
 8008066:	69a3      	ldr	r3, [r4, #24]
 8008068:	60a3      	str	r3, [r4, #8]
 800806a:	89a3      	ldrh	r3, [r4, #12]
 800806c:	071a      	lsls	r2, r3, #28
 800806e:	d525      	bpl.n	80080bc <__swbuf_r+0x68>
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	b31b      	cbz	r3, 80080bc <__swbuf_r+0x68>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	6922      	ldr	r2, [r4, #16]
 8008078:	1a98      	subs	r0, r3, r2
 800807a:	6963      	ldr	r3, [r4, #20]
 800807c:	b2f6      	uxtb	r6, r6
 800807e:	4283      	cmp	r3, r0
 8008080:	4637      	mov	r7, r6
 8008082:	dc04      	bgt.n	800808e <__swbuf_r+0x3a>
 8008084:	4621      	mov	r1, r4
 8008086:	4628      	mov	r0, r5
 8008088:	f7ff fd9e 	bl	8007bc8 <_fflush_r>
 800808c:	b9e0      	cbnz	r0, 80080c8 <__swbuf_r+0x74>
 800808e:	68a3      	ldr	r3, [r4, #8]
 8008090:	3b01      	subs	r3, #1
 8008092:	60a3      	str	r3, [r4, #8]
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	1c5a      	adds	r2, r3, #1
 8008098:	6022      	str	r2, [r4, #0]
 800809a:	701e      	strb	r6, [r3, #0]
 800809c:	6962      	ldr	r2, [r4, #20]
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d004      	beq.n	80080ae <__swbuf_r+0x5a>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	07db      	lsls	r3, r3, #31
 80080a8:	d506      	bpl.n	80080b8 <__swbuf_r+0x64>
 80080aa:	2e0a      	cmp	r6, #10
 80080ac:	d104      	bne.n	80080b8 <__swbuf_r+0x64>
 80080ae:	4621      	mov	r1, r4
 80080b0:	4628      	mov	r0, r5
 80080b2:	f7ff fd89 	bl	8007bc8 <_fflush_r>
 80080b6:	b938      	cbnz	r0, 80080c8 <__swbuf_r+0x74>
 80080b8:	4638      	mov	r0, r7
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 f806 	bl	80080d0 <__swsetup_r>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0d5      	beq.n	8008074 <__swbuf_r+0x20>
 80080c8:	f04f 37ff 	mov.w	r7, #4294967295
 80080cc:	e7f4      	b.n	80080b8 <__swbuf_r+0x64>
	...

080080d0 <__swsetup_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4b2a      	ldr	r3, [pc, #168]	; (800817c <__swsetup_r+0xac>)
 80080d4:	4605      	mov	r5, r0
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	460c      	mov	r4, r1
 80080da:	b118      	cbz	r0, 80080e4 <__swsetup_r+0x14>
 80080dc:	6a03      	ldr	r3, [r0, #32]
 80080de:	b90b      	cbnz	r3, 80080e4 <__swsetup_r+0x14>
 80080e0:	f7fd ff82 	bl	8005fe8 <__sinit>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ea:	0718      	lsls	r0, r3, #28
 80080ec:	d422      	bmi.n	8008134 <__swsetup_r+0x64>
 80080ee:	06d9      	lsls	r1, r3, #27
 80080f0:	d407      	bmi.n	8008102 <__swsetup_r+0x32>
 80080f2:	2309      	movs	r3, #9
 80080f4:	602b      	str	r3, [r5, #0]
 80080f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080fa:	81a3      	strh	r3, [r4, #12]
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	e034      	b.n	800816c <__swsetup_r+0x9c>
 8008102:	0758      	lsls	r0, r3, #29
 8008104:	d512      	bpl.n	800812c <__swsetup_r+0x5c>
 8008106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008108:	b141      	cbz	r1, 800811c <__swsetup_r+0x4c>
 800810a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800810e:	4299      	cmp	r1, r3
 8008110:	d002      	beq.n	8008118 <__swsetup_r+0x48>
 8008112:	4628      	mov	r0, r5
 8008114:	f7fe fefe 	bl	8006f14 <_free_r>
 8008118:	2300      	movs	r3, #0
 800811a:	6363      	str	r3, [r4, #52]	; 0x34
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008122:	81a3      	strh	r3, [r4, #12]
 8008124:	2300      	movs	r3, #0
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f043 0308 	orr.w	r3, r3, #8
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	b94b      	cbnz	r3, 800814c <__swsetup_r+0x7c>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800813e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008142:	d003      	beq.n	800814c <__swsetup_r+0x7c>
 8008144:	4621      	mov	r1, r4
 8008146:	4628      	mov	r0, r5
 8008148:	f000 f884 	bl	8008254 <__smakebuf_r>
 800814c:	89a0      	ldrh	r0, [r4, #12]
 800814e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008152:	f010 0301 	ands.w	r3, r0, #1
 8008156:	d00a      	beq.n	800816e <__swsetup_r+0x9e>
 8008158:	2300      	movs	r3, #0
 800815a:	60a3      	str	r3, [r4, #8]
 800815c:	6963      	ldr	r3, [r4, #20]
 800815e:	425b      	negs	r3, r3
 8008160:	61a3      	str	r3, [r4, #24]
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	b943      	cbnz	r3, 8008178 <__swsetup_r+0xa8>
 8008166:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800816a:	d1c4      	bne.n	80080f6 <__swsetup_r+0x26>
 800816c:	bd38      	pop	{r3, r4, r5, pc}
 800816e:	0781      	lsls	r1, r0, #30
 8008170:	bf58      	it	pl
 8008172:	6963      	ldrpl	r3, [r4, #20]
 8008174:	60a3      	str	r3, [r4, #8]
 8008176:	e7f4      	b.n	8008162 <__swsetup_r+0x92>
 8008178:	2000      	movs	r0, #0
 800817a:	e7f7      	b.n	800816c <__swsetup_r+0x9c>
 800817c:	20000068 	.word	0x20000068

08008180 <_raise_r>:
 8008180:	291f      	cmp	r1, #31
 8008182:	b538      	push	{r3, r4, r5, lr}
 8008184:	4604      	mov	r4, r0
 8008186:	460d      	mov	r5, r1
 8008188:	d904      	bls.n	8008194 <_raise_r+0x14>
 800818a:	2316      	movs	r3, #22
 800818c:	6003      	str	r3, [r0, #0]
 800818e:	f04f 30ff 	mov.w	r0, #4294967295
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008196:	b112      	cbz	r2, 800819e <_raise_r+0x1e>
 8008198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800819c:	b94b      	cbnz	r3, 80081b2 <_raise_r+0x32>
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 f830 	bl	8008204 <_getpid_r>
 80081a4:	462a      	mov	r2, r5
 80081a6:	4601      	mov	r1, r0
 80081a8:	4620      	mov	r0, r4
 80081aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ae:	f000 b817 	b.w	80081e0 <_kill_r>
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d00a      	beq.n	80081cc <_raise_r+0x4c>
 80081b6:	1c59      	adds	r1, r3, #1
 80081b8:	d103      	bne.n	80081c2 <_raise_r+0x42>
 80081ba:	2316      	movs	r3, #22
 80081bc:	6003      	str	r3, [r0, #0]
 80081be:	2001      	movs	r0, #1
 80081c0:	e7e7      	b.n	8008192 <_raise_r+0x12>
 80081c2:	2400      	movs	r4, #0
 80081c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081c8:	4628      	mov	r0, r5
 80081ca:	4798      	blx	r3
 80081cc:	2000      	movs	r0, #0
 80081ce:	e7e0      	b.n	8008192 <_raise_r+0x12>

080081d0 <raise>:
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <raise+0xc>)
 80081d2:	4601      	mov	r1, r0
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	f7ff bfd3 	b.w	8008180 <_raise_r>
 80081da:	bf00      	nop
 80081dc:	20000068 	.word	0x20000068

080081e0 <_kill_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d07      	ldr	r5, [pc, #28]	; (8008200 <_kill_r+0x20>)
 80081e4:	2300      	movs	r3, #0
 80081e6:	4604      	mov	r4, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	4611      	mov	r1, r2
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	f7f9 fcdf 	bl	8001bb0 <_kill>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	d102      	bne.n	80081fc <_kill_r+0x1c>
 80081f6:	682b      	ldr	r3, [r5, #0]
 80081f8:	b103      	cbz	r3, 80081fc <_kill_r+0x1c>
 80081fa:	6023      	str	r3, [r4, #0]
 80081fc:	bd38      	pop	{r3, r4, r5, pc}
 80081fe:	bf00      	nop
 8008200:	20000e9c 	.word	0x20000e9c

08008204 <_getpid_r>:
 8008204:	f7f9 bccc 	b.w	8001ba0 <_getpid>

08008208 <__swhatbuf_r>:
 8008208:	b570      	push	{r4, r5, r6, lr}
 800820a:	460c      	mov	r4, r1
 800820c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008210:	2900      	cmp	r1, #0
 8008212:	b096      	sub	sp, #88	; 0x58
 8008214:	4615      	mov	r5, r2
 8008216:	461e      	mov	r6, r3
 8008218:	da0d      	bge.n	8008236 <__swhatbuf_r+0x2e>
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008220:	f04f 0100 	mov.w	r1, #0
 8008224:	bf0c      	ite	eq
 8008226:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800822a:	2340      	movne	r3, #64	; 0x40
 800822c:	2000      	movs	r0, #0
 800822e:	6031      	str	r1, [r6, #0]
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	b016      	add	sp, #88	; 0x58
 8008234:	bd70      	pop	{r4, r5, r6, pc}
 8008236:	466a      	mov	r2, sp
 8008238:	f000 f848 	bl	80082cc <_fstat_r>
 800823c:	2800      	cmp	r0, #0
 800823e:	dbec      	blt.n	800821a <__swhatbuf_r+0x12>
 8008240:	9901      	ldr	r1, [sp, #4]
 8008242:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008246:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800824a:	4259      	negs	r1, r3
 800824c:	4159      	adcs	r1, r3
 800824e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008252:	e7eb      	b.n	800822c <__swhatbuf_r+0x24>

08008254 <__smakebuf_r>:
 8008254:	898b      	ldrh	r3, [r1, #12]
 8008256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008258:	079d      	lsls	r5, r3, #30
 800825a:	4606      	mov	r6, r0
 800825c:	460c      	mov	r4, r1
 800825e:	d507      	bpl.n	8008270 <__smakebuf_r+0x1c>
 8008260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	6123      	str	r3, [r4, #16]
 8008268:	2301      	movs	r3, #1
 800826a:	6163      	str	r3, [r4, #20]
 800826c:	b002      	add	sp, #8
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	ab01      	add	r3, sp, #4
 8008272:	466a      	mov	r2, sp
 8008274:	f7ff ffc8 	bl	8008208 <__swhatbuf_r>
 8008278:	9900      	ldr	r1, [sp, #0]
 800827a:	4605      	mov	r5, r0
 800827c:	4630      	mov	r0, r6
 800827e:	f7fe febd 	bl	8006ffc <_malloc_r>
 8008282:	b948      	cbnz	r0, 8008298 <__smakebuf_r+0x44>
 8008284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008288:	059a      	lsls	r2, r3, #22
 800828a:	d4ef      	bmi.n	800826c <__smakebuf_r+0x18>
 800828c:	f023 0303 	bic.w	r3, r3, #3
 8008290:	f043 0302 	orr.w	r3, r3, #2
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	e7e3      	b.n	8008260 <__smakebuf_r+0xc>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	6020      	str	r0, [r4, #0]
 800829c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a0:	81a3      	strh	r3, [r4, #12]
 80082a2:	9b00      	ldr	r3, [sp, #0]
 80082a4:	6163      	str	r3, [r4, #20]
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	6120      	str	r0, [r4, #16]
 80082aa:	b15b      	cbz	r3, 80082c4 <__smakebuf_r+0x70>
 80082ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b0:	4630      	mov	r0, r6
 80082b2:	f000 f81d 	bl	80082f0 <_isatty_r>
 80082b6:	b128      	cbz	r0, 80082c4 <__smakebuf_r+0x70>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	f023 0303 	bic.w	r3, r3, #3
 80082be:	f043 0301 	orr.w	r3, r3, #1
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	431d      	orrs	r5, r3
 80082c8:	81a5      	strh	r5, [r4, #12]
 80082ca:	e7cf      	b.n	800826c <__smakebuf_r+0x18>

080082cc <_fstat_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	; (80082ec <_fstat_r+0x20>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	f7f9 fcc8 	bl	8001c6e <_fstat>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	d102      	bne.n	80082e8 <_fstat_r+0x1c>
 80082e2:	682b      	ldr	r3, [r5, #0]
 80082e4:	b103      	cbz	r3, 80082e8 <_fstat_r+0x1c>
 80082e6:	6023      	str	r3, [r4, #0]
 80082e8:	bd38      	pop	{r3, r4, r5, pc}
 80082ea:	bf00      	nop
 80082ec:	20000e9c 	.word	0x20000e9c

080082f0 <_isatty_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d06      	ldr	r5, [pc, #24]	; (800830c <_isatty_r+0x1c>)
 80082f4:	2300      	movs	r3, #0
 80082f6:	4604      	mov	r4, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	602b      	str	r3, [r5, #0]
 80082fc:	f7f9 fcc7 	bl	8001c8e <_isatty>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_isatty_r+0x1a>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_isatty_r+0x1a>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20000e9c 	.word	0x20000e9c

08008310 <_init>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr

0800831c <_fini>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	bf00      	nop
 8008320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008322:	bc08      	pop	{r3}
 8008324:	469e      	mov	lr, r3
 8008326:	4770      	bx	lr
