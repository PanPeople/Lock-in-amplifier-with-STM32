
F446_sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005ab0  08005ab0  00015ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bec  08005bec  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf4  08005bf4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  20000060  08005c5c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  08005c5c  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012718  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c4  00000000  00000000  000327eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001040  00000000  00000000  000358b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8f  00000000  00000000  000368f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fde  00000000  00000000  0003757f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016728  00000000  00000000  0005b55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd935  00000000  00000000  00071c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048f8  00000000  00000000  0014f5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00153eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a98 	.word	0x08005a98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005a98 	.word	0x08005a98

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b970 	b.w	8000e34 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9e08      	ldr	r6, [sp, #32]
 8000b72:	460d      	mov	r5, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	460f      	mov	r7, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4694      	mov	ip, r2
 8000b80:	d965      	bls.n	8000c4e <__udivmoddi4+0xe2>
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	b143      	cbz	r3, 8000b9a <__udivmoddi4+0x2e>
 8000b88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b8c:	f1c3 0220 	rsb	r2, r3, #32
 8000b90:	409f      	lsls	r7, r3
 8000b92:	fa20 f202 	lsr.w	r2, r0, r2
 8000b96:	4317      	orrs	r7, r2
 8000b98:	409c      	lsls	r4, r3
 8000b9a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b9e:	fa1f f58c 	uxth.w	r5, ip
 8000ba2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ba6:	0c22      	lsrs	r2, r4, #16
 8000ba8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bb0:	fb01 f005 	mul.w	r0, r1, r5
 8000bb4:	4290      	cmp	r0, r2
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bbc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bc0:	f080 811c 	bcs.w	8000dfc <__udivmoddi4+0x290>
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	f240 8119 	bls.w	8000dfc <__udivmoddi4+0x290>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a12      	subs	r2, r2, r0
 8000bd0:	b2a4      	uxth	r4, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bde:	fb00 f505 	mul.w	r5, r0, r5
 8000be2:	42a5      	cmp	r5, r4
 8000be4:	d90a      	bls.n	8000bfc <__udivmoddi4+0x90>
 8000be6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x294>
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x294>
 8000bf8:	4464      	add	r4, ip
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c00:	1b64      	subs	r4, r4, r5
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11e      	cbz	r6, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40dc      	lsrs	r4, r3
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0xbc>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	f000 80ed 	beq.w	8000df6 <__udivmoddi4+0x28a>
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c22:	4608      	mov	r0, r1
 8000c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c28:	fab3 f183 	clz	r1, r3
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	d149      	bne.n	8000cc4 <__udivmoddi4+0x158>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	d302      	bcc.n	8000c3a <__udivmoddi4+0xce>
 8000c34:	4282      	cmp	r2, r0
 8000c36:	f200 80f8 	bhi.w	8000e2a <__udivmoddi4+0x2be>
 8000c3a:	1a84      	subs	r4, r0, r2
 8000c3c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c40:	2001      	movs	r0, #1
 8000c42:	4617      	mov	r7, r2
 8000c44:	2e00      	cmp	r6, #0
 8000c46:	d0e2      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	e9c6 4700 	strd	r4, r7, [r6]
 8000c4c:	e7df      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c4e:	b902      	cbnz	r2, 8000c52 <__udivmoddi4+0xe6>
 8000c50:	deff      	udf	#255	; 0xff
 8000c52:	fab2 f382 	clz	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8090 	bne.w	8000d7c <__udivmoddi4+0x210>
 8000c5c:	1a8a      	subs	r2, r1, r2
 8000c5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c62:	fa1f fe8c 	uxth.w	lr, ip
 8000c66:	2101      	movs	r1, #1
 8000c68:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c6c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c70:	0c22      	lsrs	r2, r4, #16
 8000c72:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c76:	fb0e f005 	mul.w	r0, lr, r5
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c7e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c82:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x122>
 8000c88:	4290      	cmp	r0, r2
 8000c8a:	f200 80cb 	bhi.w	8000e24 <__udivmoddi4+0x2b8>
 8000c8e:	4645      	mov	r5, r8
 8000c90:	1a12      	subs	r2, r2, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c98:	fb07 2210 	mls	r2, r7, r0, r2
 8000c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	45a6      	cmp	lr, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x14e>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x14c>
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	f200 80bb 	bhi.w	8000e2e <__udivmoddi4+0x2c2>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	eba4 040e 	sub.w	r4, r4, lr
 8000cbe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc2:	e79f      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cc4:	f1c1 0720 	rsb	r7, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cda:	40fd      	lsrs	r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	4323      	orrs	r3, r4
 8000ce2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	fb09 5518 	mls	r5, r9, r8, r5
 8000cee:	0c1c      	lsrs	r4, r3, #16
 8000cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cf4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	fa00 f001 	lsl.w	r0, r0, r1
 8000d02:	d90b      	bls.n	8000d1c <__udivmoddi4+0x1b0>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d0c:	f080 8088 	bcs.w	8000e20 <__udivmoddi4+0x2b4>
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	f240 8085 	bls.w	8000e20 <__udivmoddi4+0x2b4>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	4464      	add	r4, ip
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	b29d      	uxth	r5, r3
 8000d20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d24:	fb09 4413 	mls	r4, r9, r3, r4
 8000d28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d2c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x1da>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d3c:	d26c      	bcs.n	8000e18 <__udivmoddi4+0x2ac>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	d96a      	bls.n	8000e18 <__udivmoddi4+0x2ac>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	4464      	add	r4, ip
 8000d46:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	46c8      	mov	r8, r9
 8000d56:	46ae      	mov	lr, r5
 8000d58:	d356      	bcc.n	8000e08 <__udivmoddi4+0x29c>
 8000d5a:	d053      	beq.n	8000e04 <__udivmoddi4+0x298>
 8000d5c:	b156      	cbz	r6, 8000d74 <__udivmoddi4+0x208>
 8000d5e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d62:	eb64 040e 	sbc.w	r4, r4, lr
 8000d66:	fa04 f707 	lsl.w	r7, r4, r7
 8000d6a:	40ca      	lsrs	r2, r1
 8000d6c:	40cc      	lsrs	r4, r1
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	e9c6 7400 	strd	r7, r4, [r6]
 8000d74:	4618      	mov	r0, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	f1c3 0120 	rsb	r1, r3, #32
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	fa20 f201 	lsr.w	r2, r0, r1
 8000d88:	fa25 f101 	lsr.w	r1, r5, r1
 8000d8c:	409d      	lsls	r5, r3
 8000d8e:	432a      	orrs	r2, r5
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1510 	mls	r5, r7, r0, r1
 8000da0:	0c11      	lsrs	r1, r2, #16
 8000da2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000da6:	fb00 f50e 	mul.w	r5, r0, lr
 8000daa:	428d      	cmp	r5, r1
 8000dac:	fa04 f403 	lsl.w	r4, r4, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x258>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dba:	d22f      	bcs.n	8000e1c <__udivmoddi4+0x2b0>
 8000dbc:	428d      	cmp	r5, r1
 8000dbe:	d92d      	bls.n	8000e1c <__udivmoddi4+0x2b0>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4461      	add	r1, ip
 8000dc4:	1b49      	subs	r1, r1, r5
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dcc:	fb07 1115 	mls	r1, r7, r5, r1
 8000dd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd4:	fb05 f10e 	mul.w	r1, r5, lr
 8000dd8:	4291      	cmp	r1, r2
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x282>
 8000ddc:	eb1c 0202 	adds.w	r2, ip, r2
 8000de0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de4:	d216      	bcs.n	8000e14 <__udivmoddi4+0x2a8>
 8000de6:	4291      	cmp	r1, r2
 8000de8:	d914      	bls.n	8000e14 <__udivmoddi4+0x2a8>
 8000dea:	3d02      	subs	r5, #2
 8000dec:	4462      	add	r2, ip
 8000dee:	1a52      	subs	r2, r2, r1
 8000df0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000df4:	e738      	b.n	8000c68 <__udivmoddi4+0xfc>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e708      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	e6e6      	b.n	8000bce <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x90>
 8000e04:	4548      	cmp	r0, r9
 8000e06:	d2a9      	bcs.n	8000d5c <__udivmoddi4+0x1f0>
 8000e08:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e10:	3b01      	subs	r3, #1
 8000e12:	e7a3      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e14:	4645      	mov	r5, r8
 8000e16:	e7ea      	b.n	8000dee <__udivmoddi4+0x282>
 8000e18:	462b      	mov	r3, r5
 8000e1a:	e794      	b.n	8000d46 <__udivmoddi4+0x1da>
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	e7d1      	b.n	8000dc4 <__udivmoddi4+0x258>
 8000e20:	46d0      	mov	r8, sl
 8000e22:	e77b      	b.n	8000d1c <__udivmoddi4+0x1b0>
 8000e24:	3d02      	subs	r5, #2
 8000e26:	4462      	add	r2, ip
 8000e28:	e732      	b.n	8000c90 <__udivmoddi4+0x124>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e70a      	b.n	8000c44 <__udivmoddi4+0xd8>
 8000e2e:	4464      	add	r4, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e742      	b.n	8000cba <__udivmoddi4+0x14e>

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e4a:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <MX_ADC1_Init+0xa0>)
 8000e4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e9e:	f000 fed9 	bl	8001c54 <HAL_ADC_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ea8:	f000 fc3a 	bl	8001720 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000ebe:	f001 f941 	bl	8002144 <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ec8:	f000 fc2a 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2000007c 	.word	0x2000007c
 8000ed8:	40012000 	.word	0x40012000

08000edc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_ADC_MspInit+0xec>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d15f      	bne.n	8000fbe <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <HAL_ADC_MspInit+0xf0>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <HAL_ADC_MspInit+0xf0>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_ADC_MspInit+0xf0>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <HAL_ADC_MspInit+0xf0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <HAL_ADC_MspInit+0xf0>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HAL_ADC_MspInit+0xf0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f36:	2302      	movs	r3, #2
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <HAL_ADC_MspInit+0xf4>)
 8000f4a:	f002 fa1d 	bl	8003388 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f50:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <HAL_ADC_MspInit+0xfc>)
 8000f52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f76:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f92:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000f94:	f001 fe88 	bl	8002ca8 <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f9e:	f000 fbbf 	bl	8001720 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <HAL_ADC_MspInit+0xf8>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2012      	movs	r0, #18
 8000fb4:	f001 fc5b 	bl	800286e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fb8:	2012      	movs	r0, #18
 8000fba:	f001 fc74 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	200000c4 	.word	0x200000c4
 8000fd8:	40026410 	.word	0x40026410

08000fdc <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_DAC_Init+0x4c>)
 8000fec:	4a0f      	ldr	r2, [pc, #60]	; (800102c <MX_DAC_Init+0x50>)
 8000fee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_DAC_Init+0x4c>)
 8000ff2:	f001 fc72 	bl	80028da <HAL_DAC_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ffc:	f000 fb90 	bl	8001720 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001000:	2324      	movs	r3, #36	; 0x24
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_DAC_Init+0x4c>)
 8001010:	f001 fd66 	bl	8002ae0 <HAL_DAC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800101a:	f000 fb81 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000124 	.word	0x20000124
 800102c:	40007400 	.word	0x40007400

08001030 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a2f      	ldr	r2, [pc, #188]	; (800110c <HAL_DAC_MspInit+0xdc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d158      	bne.n	8001104 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <HAL_DAC_MspInit+0xe0>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <HAL_DAC_MspInit+0xe0>)
 800105c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <HAL_DAC_MspInit+0xe0>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_DAC_MspInit+0xe0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <HAL_DAC_MspInit+0xe0>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_DAC_MspInit+0xe0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800108a:	2310      	movs	r3, #16
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108e:	2303      	movs	r3, #3
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <HAL_DAC_MspInit+0xe4>)
 800109e:	f002 f973 	bl	8003388 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010a4:	4a1d      	ldr	r2, [pc, #116]	; (800111c <HAL_DAC_MspInit+0xec>)
 80010a6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010aa:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010ae:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010b2:	2240      	movs	r2, #64	; 0x40
 80010b4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ca:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010da:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010ea:	f001 fddd 	bl	8002ca8 <HAL_DMA_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80010f4:	f000 fb14 	bl	8001720 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_DAC_MspInit+0xe8>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40007400 	.word	0x40007400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000
 8001118:	20000138 	.word	0x20000138
 800111c:	40026088 	.word	0x40026088

08001120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <MX_DMA_Init+0x68>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a16      	ldr	r2, [pc, #88]	; (8001188 <MX_DMA_Init+0x68>)
 8001130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_DMA_Init+0x68>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_DMA_Init+0x68>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <MX_DMA_Init+0x68>)
 800114c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <MX_DMA_Init+0x68>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2010      	movs	r0, #16
 8001164:	f001 fb83 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001168:	2010      	movs	r0, #16
 800116a:	f001 fb9c 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2038      	movs	r0, #56	; 0x38
 8001174:	f001 fb7b 	bl	800286e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001178:	2038      	movs	r0, #56	; 0x38
 800117a:	f001 fb94 	bl	80028a6 <HAL_NVIC_EnableIRQ>

}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_GPIO_Init+0xd0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a2c      	ldr	r2, [pc, #176]	; (800125c <MX_GPIO_Init+0xd0>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_GPIO_Init+0xd0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a25      	ldr	r2, [pc, #148]	; (800125c <MX_GPIO_Init+0xd0>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a1e      	ldr	r2, [pc, #120]	; (800125c <MX_GPIO_Init+0xd0>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_GPIO_Init+0xd0>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_GPIO_Init+0xd0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <MX_GPIO_Init+0xd0>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_GPIO_Init+0xd0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2120      	movs	r1, #32
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <MX_GPIO_Init+0xd4>)
 8001218:	f002 fa4a 	bl	80036b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001222:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_GPIO_Init+0xd8>)
 8001234:	f002 f8a8 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001238:	2320      	movs	r3, #32
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_GPIO_Init+0xd4>)
 8001250:	f002 f89a 	bl	8003388 <HAL_GPIO_Init>

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020800 	.word	0x40020800

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	; 0x40
 800126c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fc7f 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f845 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f7ff ff89 	bl	800118c <MX_GPIO_Init>
  MX_DMA_Init();
 800127a:	f7ff ff51 	bl	8001120 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800127e:	f000 fbdb 	bl	8001a38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001282:	f7ff fdd9 	bl	8000e38 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001286:	f000 fb55 	bl	8001934 <MX_TIM3_Init>
  MX_DAC_Init();
 800128a:	f7ff fea7 	bl	8000fdc <MX_DAC_Init>
  MX_TIM2_Init();
 800128e:	f000 fb05 	bl	800189c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  char buffer[50];
  sprintf(buffer, "TEST...\n\r");
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4912      	ldr	r1, [pc, #72]	; (80012e0 <main+0x78>)
 8001296:	4618      	mov	r0, r3
 8001298:	f003 ff5a 	bl	8005150 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ffb6 	bl	8000210 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	1d39      	adds	r1, r7, #4
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <main+0x7c>)
 80012b0:	f003 fb92 	bl	80049d8 <HAL_UART_Transmit>


  // start the ADC with IT
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, ADC_BUFFER_SIZE);
 80012b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80012b8:	490b      	ldr	r1, [pc, #44]	; (80012e8 <main+0x80>)
 80012ba:	480c      	ldr	r0, [pc, #48]	; (80012ec <main+0x84>)
 80012bc:	f000 fe1e 	bl	8001efc <HAL_ADC_Start_DMA>

  // start the DAC channel 1 with DMA
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sineLookupTable, LookUpTableSize, DAC_ALIGN_12B_R);
 80012c0:	2300      	movs	r3, #0
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <main+0x88>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	480a      	ldr	r0, [pc, #40]	; (80012f4 <main+0x8c>)
 80012cc:	f001 fb28 	bl	8002920 <HAL_DAC_Start_DMA>


  //HAL_ADC_Start_IT(&hadc1);
    // start the timer 3
    HAL_TIM_Base_Start(&htim3);
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <main+0x90>)
 80012d2:	f003 f83f 	bl	8004354 <HAL_TIM_Base_Start>
    // start the timer 2
    HAL_TIM_Base_Start(&htim2);
 80012d6:	4809      	ldr	r0, [pc, #36]	; (80012fc <main+0x94>)
 80012d8:	f003 f83c 	bl	8004354 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <main+0x74>
 80012de:	bf00      	nop
 80012e0:	08005ab0 	.word	0x08005ab0
 80012e4:	20000944 	.word	0x20000944
 80012e8:	200001a8 	.word	0x200001a8
 80012ec:	2000007c 	.word	0x2000007c
 80012f0:	08005acc 	.word	0x08005acc
 80012f4:	20000124 	.word	0x20000124
 80012f8:	200008fc 	.word	0x200008fc
 80012fc:	200008b4 	.word	0x200008b4

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	; 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2234      	movs	r2, #52	; 0x34
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f003 ff3e 	bl	8005190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <SystemClock_Config+0xd4>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <SystemClock_Config+0xd4>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	; 0x40
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <SystemClock_Config+0xd4>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <SystemClock_Config+0xd8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <SystemClock_Config+0xd8>)
 800134e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <SystemClock_Config+0xd8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001368:	2310      	movs	r3, #16
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001370:	2300      	movs	r3, #0
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001374:	2310      	movs	r3, #16
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001378:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800137e:	2304      	movs	r3, #4
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001382:	2302      	movs	r3, #2
 8001384:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fcf2 	bl	8003d78 <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800139a:	f000 f9c1 	bl	8001720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a2:	2302      	movs	r3, #2
 80013a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	2102      	movs	r1, #2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 f992 	bl	80036e4 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013c6:	f000 f9ab 	bl	8001720 <Error_Handler>
  }
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	; 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000
 80013dc:	00000000 	.word	0x00000000

080013e0 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// half transfer callback function for the ADC
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b090      	sub	sp, #64	; 0x40
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  // iterate over the first half of the buffer
  for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80013ec:	e0a0      	b.n	8001530 <HAL_ADC_ConvHalfCpltCallback+0x150>
  {
      char buffer[50];
      sprintf(buffer, "Signal2 = %lu\r\n",ADC_buffer1[i]);
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_ADC_ConvHalfCpltCallback+0x180>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4958      	ldr	r1, [pc, #352]	; (8001564 <HAL_ADC_ConvHalfCpltCallback+0x184>)
 8001402:	4618      	mov	r0, r3
 8001404:	f003 fea4 	bl	8005150 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe feff 	bl	8000210 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f107 010c 	add.w	r1, r7, #12
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	4852      	ldr	r0, [pc, #328]	; (8001568 <HAL_ADC_ConvHalfCpltCallback+0x188>)
 8001420:	f003 fada 	bl	80049d8 <HAL_UART_Transmit>

    // multiply the ADC value with the sine wave value
    ADC_buffer_temp[i] = ADC_buffer1[i]*sineLookupTable[i%100];
 8001424:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <HAL_ADC_ConvHalfCpltCallback+0x180>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	8819      	ldrh	r1, [r3, #0]
 8001430:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001432:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_ADC_ConvHalfCpltCallback+0x18c>)
 8001434:	fba2 0203 	umull	r0, r2, r2, r3
 8001438:	0952      	lsrs	r2, r2, #5
 800143a:	2064      	movs	r0, #100	; 0x64
 800143c:	fb00 f202 	mul.w	r2, r0, r2
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	b29b      	uxth	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_ADC_ConvHalfCpltCallback+0x190>)
 8001448:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800144c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800144e:	fb11 f202 	smulbb	r2, r1, r2
 8001452:	b291      	uxth	r1, r2
 8001454:	4a47      	ldr	r2, [pc, #284]	; (8001574 <HAL_ADC_ConvHalfCpltCallback+0x194>)
 8001456:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    // IIR filter
    xv[0] = xv[1]; 
 800145a:	4b47      	ldr	r3, [pc, #284]	; (8001578 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4a46      	ldr	r2, [pc, #280]	; (8001578 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8001460:	6013      	str	r3, [r2, #0]
    xv[1] = ADC_buffer_temp[i] / GAIN;
 8001462:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001464:	4a43      	ldr	r2, [pc, #268]	; (8001574 <HAL_ADC_ConvHalfCpltCallback+0x194>)
 8001466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f87a 	bl	8000564 <__aeabi_i2d>
 8001470:	a335      	add	r3, pc, #212	; (adr r3, 8001548 <HAL_ADC_ConvHalfCpltCallback+0x168>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff fa09 	bl	800088c <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb0b 	bl	8000a9c <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	4a3b      	ldr	r2, [pc, #236]	; (8001578 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 800148a:	6053      	str	r3, [r2, #4]
    yv[0] = yv[1]; 
 800148c:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a3a      	ldr	r2, [pc, #232]	; (800157c <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 8001492:	6013      	str	r3, [r2, #0]
    yv[1] =   (xv[0] + xv[1])
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_ADC_ConvHalfCpltCallback+0x198>)
 800149c:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a4:	ee17 0a90 	vmov	r0, s15
 80014a8:	f7ff f86e 	bl	8000588 <__aeabi_f2d>
 80014ac:	4604      	mov	r4, r0
 80014ae:	460d      	mov	r5, r1
                  + (  0.9995288721 * yv[0]);
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f867 	bl	8000588 <__aeabi_f2d>
 80014ba:	a325      	add	r3, pc, #148	; (adr r3, 8001550 <HAL_ADC_ConvHalfCpltCallback+0x170>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8ba 	bl	8000638 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4620      	mov	r0, r4
 80014ca:	4629      	mov	r1, r5
 80014cc:	f7fe fefe 	bl	80002cc <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fae0 	bl	8000a9c <__aeabi_d2f>
 80014dc:	4603      	mov	r3, r0
    yv[1] =   (xv[0] + xv[1])
 80014de:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 80014e0:	6053      	str	r3, [r2, #4]
    ADC_buffer_temp[i] = yv[1];
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_ADC_ConvHalfCpltCallback+0x19c>)
 80014e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80014ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ee:	ee17 2a90 	vmov	r2, s15
 80014f2:	b291      	uxth	r1, r2
 80014f4:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_ADC_ConvHalfCpltCallback+0x194>)
 80014f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    // multiply by the square root of 2
    ADC_buffer_temp[i] = ADC_buffer_temp[i] * 1.41421356237;
 80014fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <HAL_ADC_ConvHalfCpltCallback+0x194>)
 80014fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f82e 	bl	8000564 <__aeabi_i2d>
 8001508:	a313      	add	r3, pc, #76	; (adr r3, 8001558 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f893 	bl	8000638 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	8ffc      	ldrh	r4, [r7, #62]	; 0x3e
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fa9e 	bl	8000a5c <__aeabi_d2uiz>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_ADC_ConvHalfCpltCallback+0x194>)
 8001526:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 800152a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800152c:	3301      	adds	r3, #1
 800152e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001530:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001532:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001536:	f4ff af5a 	bcc.w	80013ee <HAL_ADC_ConvHalfCpltCallback+0xe>
  }
  // take whole ADC_buffer_temp and transmit it via UART by adding the "Signal1 = " string to every value using sprintf
  //HAL_UART_Transmit(&huart2, (uint8_t*)ADC_buffer_temp, ADC_BUFFER_SIZE/2, HAL_MAX_DELAY);


}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	3740      	adds	r7, #64	; 0x40
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}
 8001544:	f3af 8000 	nop.w
 8001548:	b9841aac 	.word	0xb9841aac
 800154c:	40b09521 	.word	0x40b09521
 8001550:	f92278f8 	.word	0xf92278f8
 8001554:	3feffc23 	.word	0x3feffc23
 8001558:	667f055a 	.word	0x667f055a
 800155c:	3ff6a09e 	.word	0x3ff6a09e
 8001560:	20000000 	.word	0x20000000
 8001564:	08005abc 	.word	0x08005abc
 8001568:	20000944 	.word	0x20000944
 800156c:	51eb851f 	.word	0x51eb851f
 8001570:	08005acc 	.word	0x08005acc
 8001574:	20000658 	.word	0x20000658
 8001578:	20000198 	.word	0x20000198
 800157c:	200001a0 	.word	0x200001a0

08001580 <HAL_ADC_ConvCpltCallback>:


// callback function for the ADC conversion complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b090      	sub	sp, #64	; 0x40
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

// 	signal /=4;


  // iterate over the first half of the buffer
  for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800158c:	e0a2      	b.n	80016d4 <HAL_ADC_ConvCpltCallback+0x154>
  {

	    char buffer[50];
	    sprintf(buffer, "Signal2 = %lu\r\n",ADC_buffer1[i]);
 800158e:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <HAL_ADC_ConvCpltCallback+0x180>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4958      	ldr	r1, [pc, #352]	; (8001704 <HAL_ADC_ConvCpltCallback+0x184>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f003 fdd4 	bl	8005150 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe fe2f 	bl	8000210 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	4852      	ldr	r0, [pc, #328]	; (8001708 <HAL_ADC_ConvCpltCallback+0x188>)
 80015c0:	f003 fa0a 	bl	80049d8 <HAL_UART_Transmit>
    // multiply the ADC value with the sine wave value
    ADC_buffer_temp[i] = ADC_buffer1[i+ADC_BUFFER_SIZE/2]*sineLookupTable[i%100];
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <HAL_ADC_ConvCpltCallback+0x180>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80015ca:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	8819      	ldrh	r1, [r3, #0]
 80015d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80015d6:	4a4d      	ldr	r2, [pc, #308]	; (800170c <HAL_ADC_ConvCpltCallback+0x18c>)
 80015d8:	fba2 0203 	umull	r0, r2, r2, r3
 80015dc:	0952      	lsrs	r2, r2, #5
 80015de:	2064      	movs	r0, #100	; 0x64
 80015e0:	fb00 f202 	mul.w	r2, r0, r2
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_ADC_ConvCpltCallback+0x190>)
 80015ec:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80015f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80015f2:	fb11 f202 	smulbb	r2, r1, r2
 80015f6:	b291      	uxth	r1, r2
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_ADC_ConvCpltCallback+0x194>)
 80015fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    // IIR filter
    xv[0] = xv[1]; 
 80015fe:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_ADC_ConvCpltCallback+0x198>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_ADC_ConvCpltCallback+0x198>)
 8001604:	6013      	str	r3, [r2, #0]
    xv[1] = ADC_buffer_temp[i] / GAIN;
 8001606:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001608:	4a42      	ldr	r2, [pc, #264]	; (8001714 <HAL_ADC_ConvCpltCallback+0x194>)
 800160a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffa8 	bl	8000564 <__aeabi_i2d>
 8001614:	a334      	add	r3, pc, #208	; (adr r3, 80016e8 <HAL_ADC_ConvCpltCallback+0x168>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f937 	bl	800088c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa39 	bl	8000a9c <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4a3a      	ldr	r2, [pc, #232]	; (8001718 <HAL_ADC_ConvCpltCallback+0x198>)
 800162e:	6053      	str	r3, [r2, #4]
    yv[0] = yv[1]; 
 8001630:	4b3a      	ldr	r3, [pc, #232]	; (800171c <HAL_ADC_ConvCpltCallback+0x19c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a39      	ldr	r2, [pc, #228]	; (800171c <HAL_ADC_ConvCpltCallback+0x19c>)
 8001636:	6013      	str	r3, [r2, #0]
    yv[1] =   (xv[0] + xv[1])
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <HAL_ADC_ConvCpltCallback+0x198>)
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <HAL_ADC_ConvCpltCallback+0x198>)
 8001640:	edd3 7a01 	vldr	s15, [r3, #4]
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	ee17 0a90 	vmov	r0, s15
 800164c:	f7fe ff9c 	bl	8000588 <__aeabi_f2d>
 8001650:	4604      	mov	r4, r0
 8001652:	460d      	mov	r5, r1
                  + (  0.9995288721 * yv[0]);
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_ADC_ConvCpltCallback+0x19c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff95 	bl	8000588 <__aeabi_f2d>
 800165e:	a324      	add	r3, pc, #144	; (adr r3, 80016f0 <HAL_ADC_ConvCpltCallback+0x170>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe ffe8 	bl	8000638 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7fe fe2c 	bl	80002cc <__adddf3>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fa0e 	bl	8000a9c <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
    yv[1] =   (xv[0] + xv[1])
 8001682:	4a26      	ldr	r2, [pc, #152]	; (800171c <HAL_ADC_ConvCpltCallback+0x19c>)
 8001684:	6053      	str	r3, [r2, #4]
    ADC_buffer_temp[i] = yv[1];
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <HAL_ADC_ConvCpltCallback+0x19c>)
 8001688:	edd3 7a01 	vldr	s15, [r3, #4]
 800168c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800168e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001692:	ee17 2a90 	vmov	r2, s15
 8001696:	b291      	uxth	r1, r2
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_ADC_ConvCpltCallback+0x194>)
 800169a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    // multiply by the square root of 2
    ADC_buffer_temp[i] = ADC_buffer_temp[i] * 1.41421356237;
 800169e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <HAL_ADC_ConvCpltCallback+0x194>)
 80016a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff5c 	bl	8000564 <__aeabi_i2d>
 80016ac:	a312      	add	r3, pc, #72	; (adr r3, 80016f8 <HAL_ADC_ConvCpltCallback+0x178>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe ffc1 	bl	8000638 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	8ffc      	ldrh	r4, [r7, #62]	; 0x3e
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff f9cc 	bl	8000a5c <__aeabi_d2uiz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_ADC_ConvCpltCallback+0x194>)
 80016ca:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for (uint16_t i = 0; i < ADC_BUFFER_SIZE/2; i++)
 80016ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80016d0:	3301      	adds	r3, #1
 80016d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80016d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80016d6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80016da:	f4ff af58 	bcc.w	800158e <HAL_ADC_ConvCpltCallback+0xe>
//      HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
//    }

  }

}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3740      	adds	r7, #64	; 0x40
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	b9841aac 	.word	0xb9841aac
 80016ec:	40b09521 	.word	0x40b09521
 80016f0:	f92278f8 	.word	0xf92278f8
 80016f4:	3feffc23 	.word	0x3feffc23
 80016f8:	667f055a 	.word	0x667f055a
 80016fc:	3ff6a09e 	.word	0x3ff6a09e
 8001700:	20000000 	.word	0x20000000
 8001704:	08005abc 	.word	0x08005abc
 8001708:	20000944 	.word	0x20000944
 800170c:	51eb851f 	.word	0x51eb851f
 8001710:	08005acc 	.word	0x08005acc
 8001714:	20000658 	.word	0x20000658
 8001718:	20000198 	.word	0x20000198
 800171c:	200001a0 	.word	0x200001a0

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001728:	e7fe      	b.n	8001728 <Error_Handler+0x8>
	...

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_MspInit+0x4c>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_MspInit+0x4c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800176a:	2007      	movs	r0, #7
 800176c:	f001 f874 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 fa24 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <DMA1_Stream5_IRQHandler+0x10>)
 80017d6:	f001 fb6d 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000138 	.word	0x20000138

080017e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <ADC_IRQHandler+0x10>)
 80017ea:	f000 fa76 	bl	8001cda <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000007c 	.word	0x2000007c

080017f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <DMA2_Stream0_IRQHandler+0x10>)
 80017fe:	f001 fb59 	bl	8002eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000c4 	.word	0x200000c4

0800180c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <_sbrk+0x5c>)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <_sbrk+0x60>)
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <_sbrk+0x64>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <_sbrk+0x64>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <_sbrk+0x68>)
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800183c:	f003 fcb0 	bl	80051a0 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	220c      	movs	r2, #12
 8001844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e009      	b.n	8001860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <_sbrk+0x64>)
 800185c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20020000 	.word	0x20020000
 800186c:	00000400 	.word	0x00000400
 8001870:	200008b0 	.word	0x200008b0
 8001874:	20000ad8 	.word	0x20000ad8

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	463b      	mov	r3, r7
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_TIM2_Init+0x94>)
 80018ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42-1;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_TIM2_Init+0x94>)
 80018c2:	2229      	movs	r2, #41	; 0x29
 80018c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_TIM2_Init+0x94>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2-1;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_TIM2_Init+0x94>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_TIM2_Init+0x94>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d8:	4b15      	ldr	r3, [pc, #84]	; (8001930 <MX_TIM2_Init+0x94>)
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018de:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_TIM2_Init+0x94>)
 80018e0:	f002 fce8 	bl	80042b4 <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80018ea:	f7ff ff19 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_TIM2_Init+0x94>)
 80018fc:	f002 fd92 	bl	8004424 <HAL_TIM_ConfigClockSource>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001906:	f7ff ff0b 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800190a:	2320      	movs	r3, #32
 800190c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001912:	463b      	mov	r3, r7
 8001914:	4619      	mov	r1, r3
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <MX_TIM2_Init+0x94>)
 8001918:	f002 ff92 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001922:	f7ff fefd 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200008b4 	.word	0x200008b4

08001934 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <MX_TIM3_Init+0x90>)
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <MX_TIM3_Init+0x94>)
 8001954:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_TIM3_Init+0x90>)
 8001958:	2229      	movs	r2, #41	; 0x29
 800195a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <MX_TIM3_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2-1;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_TIM3_Init+0x90>)
 8001964:	2201      	movs	r2, #1
 8001966:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_TIM3_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_TIM3_Init+0x90>)
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <MX_TIM3_Init+0x90>)
 8001976:	f002 fc9d 	bl	80042b4 <HAL_TIM_Base_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001980:	f7ff fece 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <MX_TIM3_Init+0x90>)
 8001992:	f002 fd47 	bl	8004424 <HAL_TIM_ConfigClockSource>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800199c:	f7ff fec0 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a0:	2320      	movs	r3, #32
 80019a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_TIM3_Init+0x90>)
 80019ae:	f002 ff47 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80019b8:	f7ff feb2 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200008fc 	.word	0x200008fc
 80019c8:	40000400 	.word	0x40000400

080019cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019dc:	d10e      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_TIM_Base_MspInit+0x64>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <HAL_TIM_Base_MspInit+0x64>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_TIM_Base_MspInit+0x64>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019fa:	e012      	b.n	8001a22 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x68>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d10d      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_TIM_Base_MspInit+0x64>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a08      	ldr	r2, [pc, #32]	; (8001a30 <HAL_TIM_Base_MspInit+0x64>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_TIM_Base_MspInit+0x64>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40000400 	.word	0x40000400

08001a38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_USART2_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_USART2_UART_Init+0x4c>)
 8001a70:	f002 ff62 	bl	8004938 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f7ff fe51 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000944 	.word	0x20000944
 8001a88:	40004400 	.word	0x40004400

08001a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_UART_MspInit+0x84>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12b      	bne.n	8001b06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_UART_MspInit+0x88>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af6:	2307      	movs	r3, #7
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_UART_MspInit+0x8c>)
 8001b02:	f001 fc41 	bl	8003388 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40004400 	.word	0x40004400
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b20:	f7ff feaa 	bl	8001878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	; (8001b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	; (8001b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f003 fb2f 	bl	80051ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff fb8b 	bl	8001268 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b60:	08005bfc 	.word	0x08005bfc
  ldr r2, =_sbss
 8001b64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b68:	20000ad8 	.word	0x20000ad8

08001b6c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <CAN1_RX0_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <HAL_Init+0x40>)
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_Init+0x40>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <HAL_Init+0x40>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f000 fe5d 	bl	8002858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 f808 	bl	8001bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7ff fdc2 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00

08001bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x54>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_InitTick+0x58>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 fe75 	bl	80028c2 <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d80a      	bhi.n	8001bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f000 fe3d 	bl	800286e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <HAL_InitTick+0x5c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	20000008 	.word	0x20000008

08001c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	2000098c 	.word	0x2000098c

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	2000098c 	.word	0x2000098c

08001c54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e033      	b.n	8001cd2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff f932 	bl	8000edc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c9a:	f023 0302 	bic.w	r3, r3, #2
 8001c9e:	f043 0202 	orr.w	r2, r3, #2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 fb7e 	bl	80023a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	f043 0201 	orr.w	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cc2:	e001      	b.n	8001cc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d049      	beq.n	8001da4 <HAL_ADC_IRQHandler+0xca>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d046      	beq.n	8001da4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d12b      	bne.n	8001d94 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d127      	bne.n	8001d94 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d119      	bne.n	8001d94 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0220 	bic.w	r2, r2, #32
 8001d6e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff fbf3 	bl	8001580 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f06f 0212 	mvn.w	r2, #18
 8001da2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d057      	beq.n	8001e6a <HAL_ADC_IRQHandler+0x190>
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d054      	beq.n	8001e6a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d139      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d12b      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d124      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11d      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d119      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e34:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fc22 	bl	80026a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 020c 	mvn.w	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e78:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d017      	beq.n	8001eb0 <HAL_ADC_IRQHandler+0x1d6>
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d014      	beq.n	8001eb0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d10d      	bne.n	8001eb0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f93b 	bl	800211c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f06f 0201 	mvn.w	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ebe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d015      	beq.n	8001ef2 <HAL_ADC_IRQHandler+0x218>
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d012      	beq.n	8001ef2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	f043 0202 	orr.w	r2, r3, #2
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0220 	mvn.w	r2, #32
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f924 	bl	8002130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0220 	mvn.w	r2, #32
 8001ef0:	601a      	str	r2, [r3, #0]
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_Start_DMA+0x1e>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0e9      	b.n	80020ee <HAL_ADC_Start_DMA+0x1f2>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d018      	beq.n	8001f62 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f40:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_ADC_Start_DMA+0x1fc>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6d      	ldr	r2, [pc, #436]	; (80020fc <HAL_ADC_Start_DMA+0x200>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0c9a      	lsrs	r2, r3, #18
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f54:	e002      	b.n	8001f5c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f9      	bne.n	8001f56 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f70:	d107      	bne.n	8001f82 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f80:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 80a1 	bne.w	80020d4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fd0:	d106      	bne.n	8001fe0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f023 0206 	bic.w	r2, r3, #6
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
 8001fde:	e002      	b.n	8001fe6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_ADC_Start_DMA+0x204>)
 8001ff0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	4a43      	ldr	r2, [pc, #268]	; (8002104 <HAL_ADC_Start_DMA+0x208>)
 8001ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	4a42      	ldr	r2, [pc, #264]	; (8002108 <HAL_ADC_Start_DMA+0x20c>)
 8002000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	4a41      	ldr	r2, [pc, #260]	; (800210c <HAL_ADC_Start_DMA+0x210>)
 8002008:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002012:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002022:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002032:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	334c      	adds	r3, #76	; 0x4c
 800203e:	4619      	mov	r1, r3
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f000 fede 	bl	8002e04 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2b00      	cmp	r3, #0
 8002052:	d12a      	bne.n	80020aa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a2d      	ldr	r2, [pc, #180]	; (8002110 <HAL_ADC_Start_DMA+0x214>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d015      	beq.n	800208a <HAL_ADC_Start_DMA+0x18e>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <HAL_ADC_Start_DMA+0x218>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d105      	bne.n	8002074 <HAL_ADC_Start_DMA+0x178>
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_ADC_Start_DMA+0x204>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_ADC_Start_DMA+0x21c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d136      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f0>
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_ADC_Start_DMA+0x204>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d130      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d129      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e020      	b.n	80020ec <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_ADC_Start_DMA+0x214>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d11b      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f0>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d114      	bne.n	80020ec <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	e00b      	b.n	80020ec <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f043 0210 	orr.w	r2, r3, #16
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000004 	.word	0x20000004
 80020fc:	431bde83 	.word	0x431bde83
 8002100:	40012300 	.word	0x40012300
 8002104:	080025a1 	.word	0x080025a1
 8002108:	0800265b 	.word	0x0800265b
 800210c:	08002677 	.word	0x08002677
 8002110:	40012000 	.word	0x40012000
 8002114:	40012100 	.word	0x40012100
 8002118:	40012200 	.word	0x40012200

0800211c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1c>
 800215c:	2302      	movs	r3, #2
 800215e:	e113      	b.n	8002388 <HAL_ADC_ConfigChannel+0x244>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b09      	cmp	r3, #9
 800216e:	d925      	bls.n	80021bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68d9      	ldr	r1, [r3, #12]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	3b1e      	subs	r3, #30
 8002186:	2207      	movs	r2, #7
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43da      	mvns	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	400a      	ands	r2, r1
 8002194:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68d9      	ldr	r1, [r3, #12]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	4603      	mov	r3, r0
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4403      	add	r3, r0
 80021ae:	3b1e      	subs	r3, #30
 80021b0:	409a      	lsls	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	e022      	b.n	8002202 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6919      	ldr	r1, [r3, #16]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	2207      	movs	r2, #7
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6919      	ldr	r1, [r3, #16]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4618      	mov	r0, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4403      	add	r3, r0
 80021f8:	409a      	lsls	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b06      	cmp	r3, #6
 8002208:	d824      	bhi.n	8002254 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	3b05      	subs	r3, #5
 800221c:	221f      	movs	r2, #31
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	400a      	ands	r2, r1
 800222a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4618      	mov	r0, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	3b05      	subs	r3, #5
 8002246:	fa00 f203 	lsl.w	r2, r0, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	635a      	str	r2, [r3, #52]	; 0x34
 8002252:	e04c      	b.n	80022ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d824      	bhi.n	80022a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b23      	subs	r3, #35	; 0x23
 800226e:	221f      	movs	r2, #31
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43da      	mvns	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	400a      	ands	r2, r1
 800227c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	3b23      	subs	r3, #35	; 0x23
 8002298:	fa00 f203 	lsl.w	r2, r0, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
 80022a4:	e023      	b.n	80022ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	3b41      	subs	r3, #65	; 0x41
 80022b8:	221f      	movs	r2, #31
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	400a      	ands	r2, r1
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3b41      	subs	r3, #65	; 0x41
 80022e2:	fa00 f203 	lsl.w	r2, r0, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_ADC_ConfigChannel+0x250>)
 80022f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a28      	ldr	r2, [pc, #160]	; (8002398 <HAL_ADC_ConfigChannel+0x254>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d10f      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1d8>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b12      	cmp	r3, #18
 8002302:	d10b      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_ADC_ConfigChannel+0x254>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d12b      	bne.n	800237e <HAL_ADC_ConfigChannel+0x23a>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a1c      	ldr	r2, [pc, #112]	; (800239c <HAL_ADC_ConfigChannel+0x258>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d003      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x1f4>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b11      	cmp	r3, #17
 8002336:	d122      	bne.n	800237e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a11      	ldr	r2, [pc, #68]	; (800239c <HAL_ADC_ConfigChannel+0x258>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d111      	bne.n	800237e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <HAL_ADC_ConfigChannel+0x25c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <HAL_ADC_ConfigChannel+0x260>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	0c9a      	lsrs	r2, r3, #18
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002370:	e002      	b.n	8002378 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3b01      	subs	r3, #1
 8002376:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f9      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40012300 	.word	0x40012300
 8002398:	40012000 	.word	0x40012000
 800239c:	10000012 	.word	0x10000012
 80023a0:	20000004 	.word	0x20000004
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b0:	4b79      	ldr	r3, [pc, #484]	; (8002598 <ADC_Init+0x1f0>)
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	021a      	lsls	r2, r3, #8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	4a58      	ldr	r2, [pc, #352]	; (800259c <ADC_Init+0x1f4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d022      	beq.n	8002486 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800244e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6899      	ldr	r1, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002470:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6899      	ldr	r1, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	e00f      	b.n	80024a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0202 	bic.w	r2, r2, #2
 80024b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6899      	ldr	r1, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7e1b      	ldrb	r3, [r3, #24]
 80024c0:	005a      	lsls	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	3b01      	subs	r3, #1
 8002500:	035a      	lsls	r2, r3, #13
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	e007      	b.n	800251c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	3b01      	subs	r3, #1
 8002538:	051a      	lsls	r2, r3, #20
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6899      	ldr	r1, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800255e:	025a      	lsls	r2, r3, #9
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002576:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6899      	ldr	r1, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	029a      	lsls	r2, r3, #10
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40012300 	.word	0x40012300
 800259c:	0f000001 	.word	0x0f000001

080025a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d13c      	bne.n	8002634 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d12b      	bne.n	800262c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d127      	bne.n	800262c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d119      	bne.n	800262c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0220 	bic.w	r2, r2, #32
 8002606:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7fe ffa7 	bl	8001580 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002632:	e00e      	b.n	8002652 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff fd75 	bl	8002130 <HAL_ADC_ErrorCallback>
}
 8002646:	e004      	b.n	8002652 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7fe feb9 	bl	80013e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f043 0204 	orr.w	r2, r3, #4
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff fd4a 	bl	8002130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60d3      	str	r3, [r2, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <__NVIC_EnableIRQ+0x38>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	2b00      	cmp	r3, #0
 800276a:	db0a      	blt.n	8002782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	490c      	ldr	r1, [pc, #48]	; (80027a4 <__NVIC_SetPriority+0x4c>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	0112      	lsls	r2, r2, #4
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	440b      	add	r3, r1
 800277c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002780:	e00a      	b.n	8002798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2da      	uxtb	r2, r3
 8002786:	4908      	ldr	r1, [pc, #32]	; (80027a8 <__NVIC_SetPriority+0x50>)
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	3b04      	subs	r3, #4
 8002790:	0112      	lsls	r2, r2, #4
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	440b      	add	r3, r1
 8002796:	761a      	strb	r2, [r3, #24]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000e100 	.word	0xe000e100
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f1c3 0307 	rsb	r3, r3, #7
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	bf28      	it	cs
 80027ca:	2304      	movcs	r3, #4
 80027cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d902      	bls.n	80027dc <NVIC_EncodePriority+0x30>
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3b03      	subs	r3, #3
 80027da:	e000      	b.n	80027de <NVIC_EncodePriority+0x32>
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	43d9      	mvns	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	4313      	orrs	r3, r2
         );
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002824:	d301      	bcc.n	800282a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002826:	2301      	movs	r3, #1
 8002828:	e00f      	b.n	800284a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <SysTick_Config+0x40>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002832:	210f      	movs	r1, #15
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f7ff ff8e 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SysTick_Config+0x40>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <SysTick_Config+0x40>)
 8002844:	2207      	movs	r2, #7
 8002846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000e010 	.word	0xe000e010

08002858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ff29 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002880:	f7ff ff3e 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68b9      	ldr	r1, [r7, #8]
 800288a:	6978      	ldr	r0, [r7, #20]
 800288c:	f7ff ff8e 	bl	80027ac <NVIC_EncodePriority>
 8002890:	4602      	mov	r2, r0
 8002892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff5d 	bl	8002758 <__NVIC_SetPriority>
}
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff31 	bl	800271c <__NVIC_EnableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ffa2 	bl	8002814 <SysTick_Config>
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e014      	b.n	8002916 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	791b      	ldrb	r3, [r3, #4]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7fe fb97 	bl	8001030 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2202      	movs	r2, #2
 8002906:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0a2      	b.n	8002a82 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	795b      	ldrb	r3, [r3, #5]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_DAC_Start_DMA+0x28>
 8002944:	2302      	movs	r3, #2
 8002946:	e09c      	b.n	8002a82 <HAL_DAC_Start_DMA+0x162>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2201      	movs	r2, #1
 800294c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2202      	movs	r2, #2
 8002952:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d129      	bne.n	80029ae <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4a4b      	ldr	r2, [pc, #300]	; (8002a8c <HAL_DAC_Start_DMA+0x16c>)
 8002960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	4a4a      	ldr	r2, [pc, #296]	; (8002a90 <HAL_DAC_Start_DMA+0x170>)
 8002968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4a49      	ldr	r2, [pc, #292]	; (8002a94 <HAL_DAC_Start_DMA+0x174>)
 8002970:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002980:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_DAC_Start_DMA+0x70>
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d005      	beq.n	800299a <HAL_DAC_Start_DMA+0x7a>
 800298e:	e009      	b.n	80029a4 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3308      	adds	r3, #8
 8002996:	613b      	str	r3, [r7, #16]
        break;
 8002998:	e033      	b.n	8002a02 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	613b      	str	r3, [r7, #16]
        break;
 80029a2:	e02e      	b.n	8002a02 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3310      	adds	r3, #16
 80029aa:	613b      	str	r3, [r7, #16]
        break;
 80029ac:	e029      	b.n	8002a02 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <HAL_DAC_Start_DMA+0x178>)
 80029b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	4a38      	ldr	r2, [pc, #224]	; (8002a9c <HAL_DAC_Start_DMA+0x17c>)
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	4a37      	ldr	r2, [pc, #220]	; (8002aa0 <HAL_DAC_Start_DMA+0x180>)
 80029c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029d4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_DAC_Start_DMA+0xc4>
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d005      	beq.n	80029ee <HAL_DAC_Start_DMA+0xce>
 80029e2:	e009      	b.n	80029f8 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3314      	adds	r3, #20
 80029ea:	613b      	str	r3, [r7, #16]
        break;
 80029ec:	e009      	b.n	8002a02 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3318      	adds	r3, #24
 80029f4:	613b      	str	r3, [r7, #16]
        break;
 80029f6:	e004      	b.n	8002a02 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	331c      	adds	r3, #28
 80029fe:	613b      	str	r3, [r7, #16]
        break;
 8002a00:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d111      	bne.n	8002a2c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a16:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6898      	ldr	r0, [r3, #8]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	f000 f9ef 	bl	8002e04 <HAL_DMA_Start_IT>
 8002a26:	4603      	mov	r3, r0
 8002a28:	75fb      	strb	r3, [r7, #23]
 8002a2a:	e010      	b.n	8002a4e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	68d8      	ldr	r0, [r3, #12]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	f000 f9dd 	bl	8002e04 <HAL_DMA_Start_IT>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2201      	movs	r2, #1
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e005      	b.n	8002a80 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f043 0204 	orr.w	r2, r3, #4
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	08002b93 	.word	0x08002b93
 8002a90:	08002bb5 	.word	0x08002bb5
 8002a94:	08002bd1 	.word	0x08002bd1
 8002a98:	08002c3b 	.word	0x08002c3b
 8002a9c:	08002c5d 	.word	0x08002c5d
 8002aa0:	08002c79 	.word	0x08002c79

08002aa4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_DAC_ConfigChannel+0x1c>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e042      	b.n	8002b86 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	795b      	ldrb	r3, [r3, #5]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_DAC_ConfigChannel+0x2c>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e03c      	b.n	8002b86 <HAL_DAC_ConfigChannel+0xa6>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2202      	movs	r2, #2
 8002b16:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	22c0      	movs	r2, #192	; 0xc0
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	400a      	ands	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002b84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff ff7f 	bl	8002aa4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	711a      	strb	r2, [r3, #4]
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f7ff ff78 	bl	8002ab8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff ff6e 	bl	8002acc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	711a      	strb	r2, [r3, #4]
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff ffd8 	bl	8002bfe <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	711a      	strb	r2, [r3, #4]
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff ffd1 	bl	8002c12 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f043 0204 	orr.w	r2, r3, #4
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff ffc7 	bl	8002c26 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	711a      	strb	r2, [r3, #4]
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7fe ffc2 	bl	8001c3c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e099      	b.n	8002df8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce4:	e00f      	b.n	8002d06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ce6:	f7fe ffa9 	bl	8001c3c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d908      	bls.n	8002d06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e078      	b.n	8002df8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e8      	bne.n	8002ce6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <HAL_DMA_Init+0x158>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d107      	bne.n	8002d70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f023 0307 	bic.w	r3, r3, #7
 8002d86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d117      	bne.n	8002dca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00e      	beq.n	8002dca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fa6f 	bl	8003290 <DMA_CheckFifoParam>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e016      	b.n	8002df8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fa26 	bl	8003224 <DMA_CalcBaseAndBitshift>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	223f      	movs	r2, #63	; 0x3f
 8002de2:	409a      	lsls	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	f010803f 	.word	0xf010803f

08002e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_DMA_Start_IT+0x26>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e040      	b.n	8002eac <HAL_DMA_Start_IT+0xa8>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d12f      	bne.n	8002e9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f9b8 	bl	80031c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	223f      	movs	r2, #63	; 0x3f
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0216 	orr.w	r2, r2, #22
 8002e72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e005      	b.n	8002eaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec0:	4b8e      	ldr	r3, [pc, #568]	; (80030fc <HAL_DMA_IRQHandler+0x248>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a8e      	ldr	r2, [pc, #568]	; (8003100 <HAL_DMA_IRQHandler+0x24c>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0a9b      	lsrs	r3, r3, #10
 8002ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	2208      	movs	r2, #8
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01a      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d013      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0204 	bic.w	r2, r2, #4
 8002f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f24:	2201      	movs	r2, #1
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d012      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	2201      	movs	r2, #1
 8002f44:	409a      	lsls	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d012      	beq.n	8002f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	2204      	movs	r2, #4
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f84:	f043 0204 	orr.w	r2, r3, #4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	2210      	movs	r2, #16
 8002f92:	409a      	lsls	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d043      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d03c      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2210      	movs	r2, #16
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d018      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d108      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d024      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
 8002fe2:	e01f      	b.n	8003024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
 8002ff4:	e016      	b.n	8003024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0208 	bic.w	r2, r2, #8
 8003012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	2220      	movs	r2, #32
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 808f 	beq.w	8003154 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 8087 	beq.w	8003154 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	2220      	movs	r2, #32
 800304c:	409a      	lsls	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b05      	cmp	r3, #5
 800305c:	d136      	bne.n	80030cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0216 	bic.w	r2, r2, #22
 800306c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800307c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <HAL_DMA_IRQHandler+0x1da>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0208 	bic.w	r2, r2, #8
 800309c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	223f      	movs	r2, #63	; 0x3f
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d07e      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
        }
        return;
 80030ca:	e079      	b.n	80031c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01d      	beq.n	8003116 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10d      	bne.n	8003104 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d031      	beq.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
 80030f8:	e02c      	b.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
 80030fa:	bf00      	nop
 80030fc:	20000004 	.word	0x20000004
 8003100:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d023      	beq.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
 8003114:	e01e      	b.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10f      	bne.n	8003144 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0210 	bic.w	r2, r2, #16
 8003132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	2b00      	cmp	r3, #0
 800315a:	d032      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d022      	beq.n	80031ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2205      	movs	r2, #5
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	3301      	adds	r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d307      	bcc.n	800319c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f2      	bne.n	8003180 <HAL_DMA_IRQHandler+0x2cc>
 800319a:	e000      	b.n	800319e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800319c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
 80031be:	e000      	b.n	80031c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031c0:	bf00      	nop
    }
  }
}
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d108      	bne.n	8003208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003206:	e007      	b.n	8003218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3b10      	subs	r3, #16
 8003234:	4a14      	ldr	r2, [pc, #80]	; (8003288 <DMA_CalcBaseAndBitshift+0x64>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <DMA_CalcBaseAndBitshift+0x68>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d909      	bls.n	8003266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800325a:	f023 0303 	bic.w	r3, r3, #3
 800325e:	1d1a      	adds	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	659a      	str	r2, [r3, #88]	; 0x58
 8003264:	e007      	b.n	8003276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	aaaaaaab 	.word	0xaaaaaaab
 800328c:	08005bb0 	.word	0x08005bb0

08003290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d11f      	bne.n	80032ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d856      	bhi.n	800335e <DMA_CheckFifoParam+0xce>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <DMA_CheckFifoParam+0x28>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	080032db 	.word	0x080032db
 80032c0:	080032c9 	.word	0x080032c9
 80032c4:	0800335f 	.word	0x0800335f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d046      	beq.n	8003362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d8:	e043      	b.n	8003362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032e2:	d140      	bne.n	8003366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e8:	e03d      	b.n	8003366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032f2:	d121      	bne.n	8003338 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d837      	bhi.n	800336a <DMA_CheckFifoParam+0xda>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <DMA_CheckFifoParam+0x70>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003311 	.word	0x08003311
 8003304:	08003317 	.word	0x08003317
 8003308:	08003311 	.word	0x08003311
 800330c:	08003329 	.word	0x08003329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      break;
 8003314:	e030      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d025      	beq.n	800336e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003326:	e022      	b.n	800336e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003330:	d11f      	bne.n	8003372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003336:	e01c      	b.n	8003372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d903      	bls.n	8003346 <DMA_CheckFifoParam+0xb6>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d003      	beq.n	800334c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003344:	e018      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      break;
 800334a:	e015      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00e      	beq.n	8003376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e00b      	b.n	8003376 <DMA_CheckFifoParam+0xe6>
      break;
 800335e:	bf00      	nop
 8003360:	e00a      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e008      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e006      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e004      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;   
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <DMA_CheckFifoParam+0xe8>
      break;
 8003376:	bf00      	nop
    }
  } 
  
  return status; 
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e165      	b.n	8003670 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 8154 	bne.w	800366a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d005      	beq.n	80033da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b03      	cmp	r3, #3
 8003446:	d017      	beq.n	8003478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d123      	bne.n	80034cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80ae 	beq.w	800366a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b5d      	ldr	r3, [pc, #372]	; (8003688 <HAL_GPIO_Init+0x300>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4a5c      	ldr	r2, [pc, #368]	; (8003688 <HAL_GPIO_Init+0x300>)
 8003518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	4b5a      	ldr	r3, [pc, #360]	; (8003688 <HAL_GPIO_Init+0x300>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352a:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_GPIO_Init+0x304>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4f      	ldr	r2, [pc, #316]	; (8003690 <HAL_GPIO_Init+0x308>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d025      	beq.n	80035a2 <HAL_GPIO_Init+0x21a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_GPIO_Init+0x30c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01f      	beq.n	800359e <HAL_GPIO_Init+0x216>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4d      	ldr	r2, [pc, #308]	; (8003698 <HAL_GPIO_Init+0x310>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d019      	beq.n	800359a <HAL_GPIO_Init+0x212>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4c      	ldr	r2, [pc, #304]	; (800369c <HAL_GPIO_Init+0x314>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_GPIO_Init+0x20e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4b      	ldr	r2, [pc, #300]	; (80036a0 <HAL_GPIO_Init+0x318>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_GPIO_Init+0x20a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4a      	ldr	r2, [pc, #296]	; (80036a4 <HAL_GPIO_Init+0x31c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_GPIO_Init+0x206>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a49      	ldr	r2, [pc, #292]	; (80036a8 <HAL_GPIO_Init+0x320>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_GPIO_Init+0x202>
 8003586:	2306      	movs	r3, #6
 8003588:	e00c      	b.n	80035a4 <HAL_GPIO_Init+0x21c>
 800358a:	2307      	movs	r3, #7
 800358c:	e00a      	b.n	80035a4 <HAL_GPIO_Init+0x21c>
 800358e:	2305      	movs	r3, #5
 8003590:	e008      	b.n	80035a4 <HAL_GPIO_Init+0x21c>
 8003592:	2304      	movs	r3, #4
 8003594:	e006      	b.n	80035a4 <HAL_GPIO_Init+0x21c>
 8003596:	2303      	movs	r3, #3
 8003598:	e004      	b.n	80035a4 <HAL_GPIO_Init+0x21c>
 800359a:	2302      	movs	r3, #2
 800359c:	e002      	b.n	80035a4 <HAL_GPIO_Init+0x21c>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_GPIO_Init+0x21c>
 80035a2:	2300      	movs	r3, #0
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	f002 0203 	and.w	r2, r2, #3
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	4093      	lsls	r3, r2
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b4:	4935      	ldr	r1, [pc, #212]	; (800368c <HAL_GPIO_Init+0x304>)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035c2:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_GPIO_Init+0x324>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035e6:	4a31      	ldr	r2, [pc, #196]	; (80036ac <HAL_GPIO_Init+0x324>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035ec:	4b2f      	ldr	r3, [pc, #188]	; (80036ac <HAL_GPIO_Init+0x324>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003616:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_GPIO_Init+0x324>)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003640:	4b1a      	ldr	r3, [pc, #104]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003664:	4a11      	ldr	r2, [pc, #68]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3301      	adds	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	f67f ae96 	bls.w	80033a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	40013800 	.word	0x40013800
 8003690:	40020000 	.word	0x40020000
 8003694:	40020400 	.word	0x40020400
 8003698:	40020800 	.word	0x40020800
 800369c:	40020c00 	.word	0x40020c00
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40021400 	.word	0x40021400
 80036a8:	40021800 	.word	0x40021800
 80036ac:	40013c00 	.word	0x40013c00

080036b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
 80036bc:	4613      	mov	r3, r2
 80036be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c0:	787b      	ldrb	r3, [r7, #1]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036cc:	e003      	b.n	80036d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	041a      	lsls	r2, r3, #16
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	619a      	str	r2, [r3, #24]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0cc      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b68      	ldr	r3, [pc, #416]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d90c      	bls.n	8003720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b63      	ldr	r3, [pc, #396]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b8      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003750:	4b53      	ldr	r3, [pc, #332]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800375a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	494d      	ldr	r1, [pc, #308]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d044      	beq.n	8003804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d119      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e06f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e067      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4934      	ldr	r1, [pc, #208]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fe fa32 	bl	8001c3c <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fe fa2e 	bl	8001c3c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e04f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d20c      	bcs.n	800382c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e032      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4916      	ldr	r1, [pc, #88]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	490e      	ldr	r1, [pc, #56]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800386a:	f000 f855 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 800386e:	4602      	mov	r2, r0
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	490a      	ldr	r1, [pc, #40]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	5ccb      	ldrb	r3, [r1, r3]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe f992 	bl	8001bb4 <HAL_InitTick>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023c00 	.word	0x40023c00
 80038a0:	40023800 	.word	0x40023800
 80038a4:	08005b98 	.word	0x08005b98
 80038a8:	20000004 	.word	0x20000004
 80038ac:	20000008 	.word	0x20000008

080038b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000004 	.word	0x20000004

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	08005ba8 	.word	0x08005ba8

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffdc 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0b5b      	lsrs	r3, r3, #13
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	08005ba8 	.word	0x08005ba8

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b0ae      	sub	sp, #184	; 0xb8
 800391e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393e:	4bcb      	ldr	r3, [pc, #812]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b0c      	cmp	r3, #12
 8003948:	f200 8206 	bhi.w	8003d58 <HAL_RCC_GetSysClockFreq+0x440>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <HAL_RCC_GetSysClockFreq+0x3c>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003989 	.word	0x08003989
 8003958:	08003d59 	.word	0x08003d59
 800395c:	08003d59 	.word	0x08003d59
 8003960:	08003d59 	.word	0x08003d59
 8003964:	08003991 	.word	0x08003991
 8003968:	08003d59 	.word	0x08003d59
 800396c:	08003d59 	.word	0x08003d59
 8003970:	08003d59 	.word	0x08003d59
 8003974:	08003999 	.word	0x08003999
 8003978:	08003d59 	.word	0x08003d59
 800397c:	08003d59 	.word	0x08003d59
 8003980:	08003d59 	.word	0x08003d59
 8003984:	08003b89 	.word	0x08003b89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4bb9      	ldr	r3, [pc, #740]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x358>)
 800398a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800398e:	e1e7      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003990:	4bb8      	ldr	r3, [pc, #736]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003996:	e1e3      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4bb4      	ldr	r3, [pc, #720]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a4:	4bb1      	ldr	r3, [pc, #708]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d071      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b0:	4bae      	ldr	r3, [pc, #696]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039bc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	0159      	lsls	r1, r3, #5
 80039e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e8:	0150      	lsls	r0, r2, #5
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4621      	mov	r1, r4
 80039f0:	1a51      	subs	r1, r2, r1
 80039f2:	6439      	str	r1, [r7, #64]	; 0x40
 80039f4:	4629      	mov	r1, r5
 80039f6:	eb63 0301 	sbc.w	r3, r3, r1
 80039fa:	647b      	str	r3, [r7, #68]	; 0x44
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a08:	4649      	mov	r1, r9
 8003a0a:	018b      	lsls	r3, r1, #6
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a12:	4641      	mov	r1, r8
 8003a14:	018a      	lsls	r2, r1, #6
 8003a16:	4641      	mov	r1, r8
 8003a18:	1a51      	subs	r1, r2, r1
 8003a1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	f04f 0300 	mov.w	r3, #0
 8003a2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a30:	4649      	mov	r1, r9
 8003a32:	00cb      	lsls	r3, r1, #3
 8003a34:	4641      	mov	r1, r8
 8003a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a3a:	4641      	mov	r1, r8
 8003a3c:	00ca      	lsls	r2, r1, #3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	4622      	mov	r2, r4
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	460a      	mov	r2, r1
 8003a4e:	eb42 0303 	adc.w	r3, r2, r3
 8003a52:	637b      	str	r3, [r7, #52]	; 0x34
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a60:	4629      	mov	r1, r5
 8003a62:	024b      	lsls	r3, r1, #9
 8003a64:	4621      	mov	r1, r4
 8003a66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	024a      	lsls	r2, r1, #9
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a84:	f7fd f85a 	bl	8000b3c <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a92:	e067      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a94:	4b75      	ldr	r3, [pc, #468]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	099b      	lsrs	r3, r3, #6
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aa0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003aae:	2300      	movs	r3, #0
 8003ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ab2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	f04f 0000 	mov.w	r0, #0
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	0159      	lsls	r1, r3, #5
 8003ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac8:	0150      	lsls	r0, r2, #5
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4621      	mov	r1, r4
 8003ad0:	1a51      	subs	r1, r2, r1
 8003ad2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ae8:	4649      	mov	r1, r9
 8003aea:	018b      	lsls	r3, r1, #6
 8003aec:	4641      	mov	r1, r8
 8003aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af2:	4641      	mov	r1, r8
 8003af4:	018a      	lsls	r2, r1, #6
 8003af6:	4641      	mov	r1, r8
 8003af8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003afc:	4649      	mov	r1, r9
 8003afe:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b16:	4692      	mov	sl, r2
 8003b18:	469b      	mov	fp, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	eb1a 0303 	adds.w	r3, sl, r3
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	462b      	mov	r3, r5
 8003b24:	eb4b 0303 	adc.w	r3, fp, r3
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b36:	4629      	mov	r1, r5
 8003b38:	028b      	lsls	r3, r1, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b40:	4621      	mov	r1, r4
 8003b42:	028a      	lsls	r2, r1, #10
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b50:	677a      	str	r2, [r7, #116]	; 0x74
 8003b52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b56:	f7fc fff1 	bl	8000b3c <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4613      	mov	r3, r2
 8003b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b64:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b86:	e0eb      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b88:	4b38      	ldr	r3, [pc, #224]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b94:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d06b      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bb8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bbc:	4622      	mov	r2, r4
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0159      	lsls	r1, r3, #5
 8003bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bce:	0150      	lsls	r0, r2, #5
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	1a51      	subs	r1, r2, r1
 8003bd8:	61b9      	str	r1, [r7, #24]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bee:	4659      	mov	r1, fp
 8003bf0:	018b      	lsls	r3, r1, #6
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf8:	4651      	mov	r1, sl
 8003bfa:	018a      	lsls	r2, r1, #6
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ebb2 0801 	subs.w	r8, r2, r1
 8003c02:	4659      	mov	r1, fp
 8003c04:	eb63 0901 	sbc.w	r9, r3, r1
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c1c:	4690      	mov	r8, r2
 8003c1e:	4699      	mov	r9, r3
 8003c20:	4623      	mov	r3, r4
 8003c22:	eb18 0303 	adds.w	r3, r8, r3
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	462b      	mov	r3, r5
 8003c2a:	eb49 0303 	adc.w	r3, r9, r3
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	024b      	lsls	r3, r1, #9
 8003c40:	4621      	mov	r1, r4
 8003c42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c46:	4621      	mov	r1, r4
 8003c48:	024a      	lsls	r2, r1, #9
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c52:	2200      	movs	r2, #0
 8003c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c56:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c5c:	f7fc ff6e 	bl	8000b3c <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4613      	mov	r3, r2
 8003c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c6a:	e065      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x420>
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	00f42400 	.word	0x00f42400
 8003c74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	2200      	movs	r2, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	4611      	mov	r1, r2
 8003c84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c88:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c92:	4642      	mov	r2, r8
 8003c94:	464b      	mov	r3, r9
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	0159      	lsls	r1, r3, #5
 8003ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca4:	0150      	lsls	r0, r2, #5
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4641      	mov	r1, r8
 8003cac:	1a51      	subs	r1, r2, r1
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	4649      	mov	r1, r9
 8003cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	018b      	lsls	r3, r1, #6
 8003cc8:	4651      	mov	r1, sl
 8003cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cce:	4651      	mov	r1, sl
 8003cd0:	018a      	lsls	r2, r1, #6
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	1a54      	subs	r4, r2, r1
 8003cd6:	4659      	mov	r1, fp
 8003cd8:	eb63 0501 	sbc.w	r5, r3, r1
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	00eb      	lsls	r3, r5, #3
 8003ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cea:	00e2      	lsls	r2, r4, #3
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
 8003cf0:	4643      	mov	r3, r8
 8003cf2:	18e3      	adds	r3, r4, r3
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	eb45 0303 	adc.w	r3, r5, r3
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	028b      	lsls	r3, r1, #10
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d14:	4621      	mov	r1, r4
 8003d16:	028a      	lsls	r2, r1, #10
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d20:	2200      	movs	r2, #0
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d24:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d2a:	f7fc ff07 	bl	8000b3c <__aeabi_uldivmod>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4613      	mov	r3, r2
 8003d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d38:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0f1b      	lsrs	r3, r3, #28
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d56:	e003      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	37b8      	adds	r7, #184	; 0xb8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	00f42400 	.word	0x00f42400

08003d78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e28d      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8083 	beq.w	8003e9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d98:	4b94      	ldr	r3, [pc, #592]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d019      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003da4:	4b91      	ldr	r3, [pc, #580]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db0:	4b8e      	ldr	r3, [pc, #568]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dbc:	d00c      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dbe:	4b8b      	ldr	r3, [pc, #556]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dc6:	2b0c      	cmp	r3, #12
 8003dc8:	d112      	bne.n	8003df0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dca:	4b88      	ldr	r3, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dd6:	d10b      	bne.n	8003df0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd8:	4b84      	ldr	r3, [pc, #528]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05b      	beq.n	8003e9c <HAL_RCC_OscConfig+0x124>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d157      	bne.n	8003e9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e25a      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x90>
 8003dfa:	4b7c      	ldr	r3, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7b      	ldr	r2, [pc, #492]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e01d      	b.n	8003e44 <HAL_RCC_OscConfig+0xcc>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0xb4>
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a75      	ldr	r2, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b73      	ldr	r3, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a72      	ldr	r2, [pc, #456]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0xcc>
 8003e2c:	4b6f      	ldr	r3, [pc, #444]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b6c      	ldr	r3, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a6b      	ldr	r2, [pc, #428]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fd fef6 	bl	8001c3c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fd fef2 	bl	8001c3c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e21f      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	4b61      	ldr	r3, [pc, #388]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0xdc>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fd fee2 	bl	8001c3c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e7c:	f7fd fede 	bl	8001c3c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e20b      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	4b57      	ldr	r3, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x104>
 8003e9a:	e000      	b.n	8003e9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d06f      	beq.n	8003f8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eaa:	4b50      	ldr	r3, [pc, #320]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eb6:	4b4d      	ldr	r3, [pc, #308]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d105      	bne.n	8003ece <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ece:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d11c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b44      	ldr	r3, [pc, #272]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d116      	bne.n	8003f14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee6:	4b41      	ldr	r3, [pc, #260]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_RCC_OscConfig+0x186>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e1d3      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4937      	ldr	r1, [pc, #220]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f12:	e03a      	b.n	8003f8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f1c:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <HAL_RCC_OscConfig+0x278>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f22:	f7fd fe8b 	bl	8001c3c <HAL_GetTick>
 8003f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2a:	f7fd fe87 	bl	8001c3c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e1b4      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f48:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4925      	ldr	r1, [pc, #148]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
 8003f5c:	e015      	b.n	8003f8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_OscConfig+0x278>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f64:	f7fd fe6a 	bl	8001c3c <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f6c:	f7fd fe66 	bl	8001c3c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e193      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d036      	beq.n	8004004 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fd fe4a 	bl	8001c3c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fac:	f7fd fe46 	bl	8001c3c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e173      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCC_OscConfig+0x274>)
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x234>
 8003fca:	e01b      	b.n	8004004 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd fe33 	bl	8001c3c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd8:	e00e      	b.n	8003ff8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fd fe2f 	bl	8001c3c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d907      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e15c      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	42470000 	.word	0x42470000
 8003ff4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff8:	4b8a      	ldr	r3, [pc, #552]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1ea      	bne.n	8003fda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8097 	beq.w	8004140 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004016:	4b83      	ldr	r3, [pc, #524]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b7f      	ldr	r3, [pc, #508]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a7e      	ldr	r2, [pc, #504]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b7c      	ldr	r3, [pc, #496]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b79      	ldr	r3, [pc, #484]	; (8004228 <HAL_RCC_OscConfig+0x4b0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d118      	bne.n	8004080 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404e:	4b76      	ldr	r3, [pc, #472]	; (8004228 <HAL_RCC_OscConfig+0x4b0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a75      	ldr	r2, [pc, #468]	; (8004228 <HAL_RCC_OscConfig+0x4b0>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405a:	f7fd fdef 	bl	8001c3c <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004062:	f7fd fdeb 	bl	8001c3c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e118      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <HAL_RCC_OscConfig+0x4b0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x31e>
 8004088:	4b66      	ldr	r3, [pc, #408]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	4a65      	ldr	r2, [pc, #404]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	; 0x70
 8004094:	e01c      	b.n	80040d0 <HAL_RCC_OscConfig+0x358>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	2b05      	cmp	r3, #5
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x340>
 800409e:	4b61      	ldr	r3, [pc, #388]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	4a60      	ldr	r2, [pc, #384]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040a4:	f043 0304 	orr.w	r3, r3, #4
 80040a8:	6713      	str	r3, [r2, #112]	; 0x70
 80040aa:	4b5e      	ldr	r3, [pc, #376]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a5d      	ldr	r2, [pc, #372]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0x358>
 80040b8:	4b5a      	ldr	r3, [pc, #360]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a59      	ldr	r2, [pc, #356]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	4b57      	ldr	r3, [pc, #348]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4a56      	ldr	r2, [pc, #344]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	f023 0304 	bic.w	r3, r3, #4
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd fdb0 	bl	8001c3c <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040de:	e00a      	b.n	80040f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f7fd fdac 	bl	8001c3c <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e0d7      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f6:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0ee      	beq.n	80040e0 <HAL_RCC_OscConfig+0x368>
 8004102:	e014      	b.n	800412e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fd fd9a 	bl	8001c3c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fd fd96 	bl	8001c3c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0c1      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004122:	4b40      	ldr	r3, [pc, #256]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1ee      	bne.n	800410c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d105      	bne.n	8004140 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004134:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80ad 	beq.w	80042a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800414a:	4b36      	ldr	r3, [pc, #216]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	2b08      	cmp	r3, #8
 8004154:	d060      	beq.n	8004218 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d145      	bne.n	80041ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_RCC_OscConfig+0x4b4>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fd fd6a 	bl	8001c3c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd fd66 	bl	8001c3c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e093      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	019b      	lsls	r3, r3, #6
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	085b      	lsrs	r3, r3, #1
 80041a2:	3b01      	subs	r3, #1
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	061b      	lsls	r3, r3, #24
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	071b      	lsls	r3, r3, #28
 80041b6:	491b      	ldr	r1, [pc, #108]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_RCC_OscConfig+0x4b4>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fd3b 	bl	8001c3c <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fd fd37 	bl	8001c3c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e064      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f0      	beq.n	80041ca <HAL_RCC_OscConfig+0x452>
 80041e8:	e05c      	b.n	80042a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <HAL_RCC_OscConfig+0x4b4>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd fd24 	bl	8001c3c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd fd20 	bl	8001c3c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e04d      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_RCC_OscConfig+0x4ac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x480>
 8004216:	e045      	b.n	80042a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e040      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
 8004224:	40023800 	.word	0x40023800
 8004228:	40007000 	.word	0x40007000
 800422c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004230:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <HAL_RCC_OscConfig+0x538>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d030      	beq.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d129      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d122      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004260:	4013      	ands	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004268:	4293      	cmp	r3, r2
 800426a:	d119      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	3b01      	subs	r3, #1
 800427a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d10f      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800

080042b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e041      	b.n	800434a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fd fb76 	bl	80019cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f000 f95e 	bl	80045b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d001      	beq.n	800436c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e046      	b.n	80043fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <HAL_TIM_Base_Start+0xb4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d022      	beq.n	80043c4 <HAL_TIM_Base_Start+0x70>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d01d      	beq.n	80043c4 <HAL_TIM_Base_Start+0x70>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_TIM_Base_Start+0xb8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d018      	beq.n	80043c4 <HAL_TIM_Base_Start+0x70>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <HAL_TIM_Base_Start+0xbc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <HAL_TIM_Base_Start+0x70>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_TIM_Base_Start+0xc0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <HAL_TIM_Base_Start+0x70>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <HAL_TIM_Base_Start+0xc4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_TIM_Base_Start+0x70>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a19      	ldr	r2, [pc, #100]	; (800441c <HAL_TIM_Base_Start+0xc8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_TIM_Base_Start+0x70>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a18      	ldr	r2, [pc, #96]	; (8004420 <HAL_TIM_Base_Start+0xcc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d111      	bne.n	80043e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d010      	beq.n	80043f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	e007      	b.n	80043f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00
 8004418:	40010400 	.word	0x40010400
 800441c:	40014000 	.word	0x40014000
 8004420:	40001800 	.word	0x40001800

08004424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_TIM_ConfigClockSource+0x1c>
 800443c:	2302      	movs	r3, #2
 800443e:	e0b4      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x186>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800445e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004478:	d03e      	beq.n	80044f8 <HAL_TIM_ConfigClockSource+0xd4>
 800447a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447e:	f200 8087 	bhi.w	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	f000 8086 	beq.w	8004596 <HAL_TIM_ConfigClockSource+0x172>
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d87f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b70      	cmp	r3, #112	; 0x70
 8004492:	d01a      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0xa6>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d87b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b60      	cmp	r3, #96	; 0x60
 800449a:	d050      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x11a>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d877      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b50      	cmp	r3, #80	; 0x50
 80044a2:	d03c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0xfa>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d873      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b40      	cmp	r3, #64	; 0x40
 80044aa:	d058      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x13a>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d86f      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b30      	cmp	r3, #48	; 0x30
 80044b2:	d064      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d86b      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d060      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d867      	bhi.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05c      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d05a      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	e062      	b.n	8004590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044da:	f000 f991 	bl	8004800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	609a      	str	r2, [r3, #8]
      break;
 80044f6:	e04f      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004508:	f000 f97a 	bl	8004800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451a:	609a      	str	r2, [r3, #8]
      break;
 800451c:	e03c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	461a      	mov	r2, r3
 800452c:	f000 f8ee 	bl	800470c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2150      	movs	r1, #80	; 0x50
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f947 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 800453c:	e02c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800454a:	461a      	mov	r2, r3
 800454c:	f000 f90d 	bl	800476a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2160      	movs	r1, #96	; 0x60
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f937 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 800455c:	e01c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	461a      	mov	r2, r3
 800456c:	f000 f8ce 	bl	800470c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2140      	movs	r1, #64	; 0x40
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f927 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 800457c:	e00c      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f000 f91e 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 800458e:	e003      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e000      	b.n	8004598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a46      	ldr	r2, [pc, #280]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d00f      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a43      	ldr	r2, [pc, #268]	; (80046e4 <TIM_Base_SetConfig+0x130>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <TIM_Base_SetConfig+0x134>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a41      	ldr	r2, [pc, #260]	; (80046ec <TIM_Base_SetConfig+0x138>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a40      	ldr	r2, [pc, #256]	; (80046f0 <TIM_Base_SetConfig+0x13c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a35      	ldr	r2, [pc, #212]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d02b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d027      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a32      	ldr	r2, [pc, #200]	; (80046e4 <TIM_Base_SetConfig+0x130>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d023      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <TIM_Base_SetConfig+0x134>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d01f      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a30      	ldr	r2, [pc, #192]	; (80046ec <TIM_Base_SetConfig+0x138>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a2f      	ldr	r2, [pc, #188]	; (80046f0 <TIM_Base_SetConfig+0x13c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d017      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2e      	ldr	r2, [pc, #184]	; (80046f4 <TIM_Base_SetConfig+0x140>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d013      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2d      	ldr	r2, [pc, #180]	; (80046f8 <TIM_Base_SetConfig+0x144>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00f      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2c      	ldr	r2, [pc, #176]	; (80046fc <TIM_Base_SetConfig+0x148>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a2b      	ldr	r2, [pc, #172]	; (8004700 <TIM_Base_SetConfig+0x14c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d007      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2a      	ldr	r2, [pc, #168]	; (8004704 <TIM_Base_SetConfig+0x150>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a29      	ldr	r2, [pc, #164]	; (8004708 <TIM_Base_SetConfig+0x154>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d108      	bne.n	8004678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a10      	ldr	r2, [pc, #64]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0xf8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a12      	ldr	r2, [pc, #72]	; (80046f0 <TIM_Base_SetConfig+0x13c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d103      	bne.n	80046b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f023 0201 	bic.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	611a      	str	r2, [r3, #16]
  }
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40010400 	.word	0x40010400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800
 8004700:	40001800 	.word	0x40001800
 8004704:	40001c00 	.word	0x40001c00
 8004708:	40002000 	.word	0x40002000

0800470c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 030a 	bic.w	r3, r3, #10
 8004748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800476a:	b480      	push	{r7}
 800476c:	b087      	sub	sp, #28
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f023 0210 	bic.w	r2, r3, #16
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	031b      	lsls	r3, r3, #12
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f043 0307 	orr.w	r3, r3, #7
 80047ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	609a      	str	r2, [r3, #8]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800481a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	431a      	orrs	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	609a      	str	r2, [r3, #8]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e05a      	b.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a21      	ldr	r2, [pc, #132]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d022      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d01d      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d018      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1b      	ldr	r2, [pc, #108]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a17      	ldr	r2, [pc, #92]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10c      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40010400 	.word	0x40010400
 8004930:	40014000 	.word	0x40014000
 8004934:	40001800 	.word	0x40001800

08004938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e042      	b.n	80049d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd f894 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2224      	movs	r2, #36	; 0x24
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800497a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f973 	bl	8004c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d175      	bne.n	8004ae4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_UART_Transmit+0x2c>
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e06e      	b.n	8004ae6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2221      	movs	r2, #33	; 0x21
 8004a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a16:	f7fd f911 	bl	8001c3c <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a30:	d108      	bne.n	8004a44 <HAL_UART_Transmit+0x6c>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	e003      	b.n	8004a4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a4c:	e02e      	b.n	8004aac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	2180      	movs	r1, #128	; 0x80
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f848 	bl	8004aee <UART_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e03a      	b.n	8004ae6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	3302      	adds	r3, #2
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e007      	b.n	8004a9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1cb      	bne.n	8004a4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2140      	movs	r1, #64	; 0x40
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f814 	bl	8004aee <UART_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e006      	b.n	8004ae6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e000      	b.n	8004ae6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4613      	mov	r3, r2
 8004afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afe:	e03b      	b.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b06:	d037      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b08:	f7fd f898 	bl	8001c3c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	6a3a      	ldr	r2, [r7, #32]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d302      	bcc.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e03a      	b.n	8004b98 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d023      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b80      	cmp	r3, #128	; 0x80
 8004b34:	d020      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d01d      	beq.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d116      	bne.n	8004b78 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f81d 	bl	8004ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e00f      	b.n	8004b98 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d0b4      	beq.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b095      	sub	sp, #84	; 0x54
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bc8:	643a      	str	r2, [r7, #64]	; 0x40
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e5      	bne.n	8004ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3314      	adds	r3, #20
 8004be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e5      	bne.n	8004bdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d119      	bne.n	8004c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 0310 	bic.w	r3, r3, #16
 8004c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c38:	61ba      	str	r2, [r7, #24]
 8004c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6979      	ldr	r1, [r7, #20]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	613b      	str	r3, [r7, #16]
   return(result);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c5a:	bf00      	nop
 8004c5c:	3754      	adds	r7, #84	; 0x54
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c6c:	b0c0      	sub	sp, #256	; 0x100
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	68d9      	ldr	r1, [r3, #12]
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	ea40 0301 	orr.w	r3, r0, r1
 8004c90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cc0:	f021 010c 	bic.w	r1, r1, #12
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	6999      	ldr	r1, [r3, #24]
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	ea40 0301 	orr.w	r3, r0, r1
 8004cee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b8f      	ldr	r3, [pc, #572]	; (8004f34 <UART_SetConfig+0x2cc>)
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d005      	beq.n	8004d08 <UART_SetConfig+0xa0>
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b8d      	ldr	r3, [pc, #564]	; (8004f38 <UART_SetConfig+0x2d0>)
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d104      	bne.n	8004d12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7fe fdf2 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004d0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d10:	e003      	b.n	8004d1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d12:	f7fe fdd9 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8004d16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d24:	f040 810c 	bne.w	8004f40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	1891      	adds	r1, r2, r2
 8004d40:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d42:	415b      	adcs	r3, r3
 8004d44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	eb12 0801 	adds.w	r8, r2, r1
 8004d50:	4629      	mov	r1, r5
 8004d52:	eb43 0901 	adc.w	r9, r3, r1
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d6a:	4690      	mov	r8, r2
 8004d6c:	4699      	mov	r9, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	eb18 0303 	adds.w	r3, r8, r3
 8004d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d78:	462b      	mov	r3, r5
 8004d7a:	eb49 0303 	adc.w	r3, r9, r3
 8004d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d96:	460b      	mov	r3, r1
 8004d98:	18db      	adds	r3, r3, r3
 8004d9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	eb42 0303 	adc.w	r3, r2, r3
 8004da2:	657b      	str	r3, [r7, #84]	; 0x54
 8004da4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004da8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004dac:	f7fb fec6 	bl	8000b3c <__aeabi_uldivmod>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4b61      	ldr	r3, [pc, #388]	; (8004f3c <UART_SetConfig+0x2d4>)
 8004db6:	fba3 2302 	umull	r2, r3, r3, r2
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	011c      	lsls	r4, r3, #4
 8004dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004dcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004dd0:	4642      	mov	r2, r8
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	1891      	adds	r1, r2, r2
 8004dd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dd8:	415b      	adcs	r3, r3
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ddc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004de0:	4641      	mov	r1, r8
 8004de2:	eb12 0a01 	adds.w	sl, r2, r1
 8004de6:	4649      	mov	r1, r9
 8004de8:	eb43 0b01 	adc.w	fp, r3, r1
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004df8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e00:	4692      	mov	sl, r2
 8004e02:	469b      	mov	fp, r3
 8004e04:	4643      	mov	r3, r8
 8004e06:	eb1a 0303 	adds.w	r3, sl, r3
 8004e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	eb4b 0303 	adc.w	r3, fp, r3
 8004e14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	18db      	adds	r3, r3, r3
 8004e30:	643b      	str	r3, [r7, #64]	; 0x40
 8004e32:	4613      	mov	r3, r2
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e42:	f7fb fe7b 	bl	8000b3c <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <UART_SetConfig+0x2d4>)
 8004e4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	2264      	movs	r2, #100	; 0x64
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	1acb      	subs	r3, r1, r3
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e62:	4b36      	ldr	r3, [pc, #216]	; (8004f3c <UART_SetConfig+0x2d4>)
 8004e64:	fba3 2302 	umull	r2, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e70:	441c      	add	r4, r3
 8004e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e84:	4642      	mov	r2, r8
 8004e86:	464b      	mov	r3, r9
 8004e88:	1891      	adds	r1, r2, r2
 8004e8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e8c:	415b      	adcs	r3, r3
 8004e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e94:	4641      	mov	r1, r8
 8004e96:	1851      	adds	r1, r2, r1
 8004e98:	6339      	str	r1, [r7, #48]	; 0x30
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	414b      	adcs	r3, r1
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004eac:	4659      	mov	r1, fp
 8004eae:	00cb      	lsls	r3, r1, #3
 8004eb0:	4651      	mov	r1, sl
 8004eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eb6:	4651      	mov	r1, sl
 8004eb8:	00ca      	lsls	r2, r1, #3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	189b      	adds	r3, r3, r2
 8004ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ec8:	464b      	mov	r3, r9
 8004eca:	460a      	mov	r2, r1
 8004ecc:	eb42 0303 	adc.w	r3, r2, r3
 8004ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ee0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ee8:	460b      	mov	r3, r1
 8004eea:	18db      	adds	r3, r3, r3
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eee:	4613      	mov	r3, r2
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004efa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004efe:	f7fb fe1d 	bl	8000b3c <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <UART_SetConfig+0x2d4>)
 8004f08:	fba3 1302 	umull	r1, r3, r3, r2
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	2164      	movs	r1, #100	; 0x64
 8004f10:	fb01 f303 	mul.w	r3, r1, r3
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	3332      	adds	r3, #50	; 0x32
 8004f1a:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <UART_SetConfig+0x2d4>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	f003 0207 	and.w	r2, r3, #7
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4422      	add	r2, r4
 8004f2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f30:	e106      	b.n	8005140 <UART_SetConfig+0x4d8>
 8004f32:	bf00      	nop
 8004f34:	40011000 	.word	0x40011000
 8004f38:	40011400 	.word	0x40011400
 8004f3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f44:	2200      	movs	r2, #0
 8004f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f52:	4642      	mov	r2, r8
 8004f54:	464b      	mov	r3, r9
 8004f56:	1891      	adds	r1, r2, r2
 8004f58:	6239      	str	r1, [r7, #32]
 8004f5a:	415b      	adcs	r3, r3
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f62:	4641      	mov	r1, r8
 8004f64:	1854      	adds	r4, r2, r1
 8004f66:	4649      	mov	r1, r9
 8004f68:	eb43 0501 	adc.w	r5, r3, r1
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	00eb      	lsls	r3, r5, #3
 8004f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f7a:	00e2      	lsls	r2, r4, #3
 8004f7c:	4614      	mov	r4, r2
 8004f7e:	461d      	mov	r5, r3
 8004f80:	4643      	mov	r3, r8
 8004f82:	18e3      	adds	r3, r4, r3
 8004f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f88:	464b      	mov	r3, r9
 8004f8a:	eb45 0303 	adc.w	r3, r5, r3
 8004f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fae:	4629      	mov	r1, r5
 8004fb0:	008b      	lsls	r3, r1, #2
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb8:	4621      	mov	r1, r4
 8004fba:	008a      	lsls	r2, r1, #2
 8004fbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fc0:	f7fb fdbc 	bl	8000b3c <__aeabi_uldivmod>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4b60      	ldr	r3, [pc, #384]	; (800514c <UART_SetConfig+0x4e4>)
 8004fca:	fba3 2302 	umull	r2, r3, r3, r2
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	011c      	lsls	r4, r3, #4
 8004fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	1891      	adds	r1, r2, r2
 8004fea:	61b9      	str	r1, [r7, #24]
 8004fec:	415b      	adcs	r3, r3
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	1851      	adds	r1, r2, r1
 8004ff8:	6139      	str	r1, [r7, #16]
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	414b      	adcs	r3, r1
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800500c:	4659      	mov	r1, fp
 800500e:	00cb      	lsls	r3, r1, #3
 8005010:	4651      	mov	r1, sl
 8005012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005016:	4651      	mov	r1, sl
 8005018:	00ca      	lsls	r2, r1, #3
 800501a:	4610      	mov	r0, r2
 800501c:	4619      	mov	r1, r3
 800501e:	4603      	mov	r3, r0
 8005020:	4642      	mov	r2, r8
 8005022:	189b      	adds	r3, r3, r2
 8005024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005028:	464b      	mov	r3, r9
 800502a:	460a      	mov	r2, r1
 800502c:	eb42 0303 	adc.w	r3, r2, r3
 8005030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	67bb      	str	r3, [r7, #120]	; 0x78
 800503e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800504c:	4649      	mov	r1, r9
 800504e:	008b      	lsls	r3, r1, #2
 8005050:	4641      	mov	r1, r8
 8005052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005056:	4641      	mov	r1, r8
 8005058:	008a      	lsls	r2, r1, #2
 800505a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800505e:	f7fb fd6d 	bl	8000b3c <__aeabi_uldivmod>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4611      	mov	r1, r2
 8005068:	4b38      	ldr	r3, [pc, #224]	; (800514c <UART_SetConfig+0x4e4>)
 800506a:	fba3 2301 	umull	r2, r3, r3, r1
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2264      	movs	r2, #100	; 0x64
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	1acb      	subs	r3, r1, r3
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	3332      	adds	r3, #50	; 0x32
 800507c:	4a33      	ldr	r2, [pc, #204]	; (800514c <UART_SetConfig+0x4e4>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005088:	441c      	add	r4, r3
 800508a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800508e:	2200      	movs	r2, #0
 8005090:	673b      	str	r3, [r7, #112]	; 0x70
 8005092:	677a      	str	r2, [r7, #116]	; 0x74
 8005094:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005098:	4642      	mov	r2, r8
 800509a:	464b      	mov	r3, r9
 800509c:	1891      	adds	r1, r2, r2
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	415b      	adcs	r3, r3
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050a8:	4641      	mov	r1, r8
 80050aa:	1851      	adds	r1, r2, r1
 80050ac:	6039      	str	r1, [r7, #0]
 80050ae:	4649      	mov	r1, r9
 80050b0:	414b      	adcs	r3, r1
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050c0:	4659      	mov	r1, fp
 80050c2:	00cb      	lsls	r3, r1, #3
 80050c4:	4651      	mov	r1, sl
 80050c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ca:	4651      	mov	r1, sl
 80050cc:	00ca      	lsls	r2, r1, #3
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	4603      	mov	r3, r0
 80050d4:	4642      	mov	r2, r8
 80050d6:	189b      	adds	r3, r3, r2
 80050d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80050da:	464b      	mov	r3, r9
 80050dc:	460a      	mov	r2, r1
 80050de:	eb42 0303 	adc.w	r3, r2, r3
 80050e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	663b      	str	r3, [r7, #96]	; 0x60
 80050ee:	667a      	str	r2, [r7, #100]	; 0x64
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050fc:	4649      	mov	r1, r9
 80050fe:	008b      	lsls	r3, r1, #2
 8005100:	4641      	mov	r1, r8
 8005102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005106:	4641      	mov	r1, r8
 8005108:	008a      	lsls	r2, r1, #2
 800510a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800510e:	f7fb fd15 	bl	8000b3c <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <UART_SetConfig+0x4e4>)
 8005118:	fba3 1302 	umull	r1, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	2164      	movs	r1, #100	; 0x64
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	3332      	adds	r3, #50	; 0x32
 800512a:	4a08      	ldr	r2, [pc, #32]	; (800514c <UART_SetConfig+0x4e4>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	f003 020f 	and.w	r2, r3, #15
 8005136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4422      	add	r2, r4
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005146:	46bd      	mov	sp, r7
 8005148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800514c:	51eb851f 	.word	0x51eb851f

08005150 <siprintf>:
 8005150:	b40e      	push	{r1, r2, r3}
 8005152:	b500      	push	{lr}
 8005154:	b09c      	sub	sp, #112	; 0x70
 8005156:	ab1d      	add	r3, sp, #116	; 0x74
 8005158:	9002      	str	r0, [sp, #8]
 800515a:	9006      	str	r0, [sp, #24]
 800515c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005160:	4809      	ldr	r0, [pc, #36]	; (8005188 <siprintf+0x38>)
 8005162:	9107      	str	r1, [sp, #28]
 8005164:	9104      	str	r1, [sp, #16]
 8005166:	4909      	ldr	r1, [pc, #36]	; (800518c <siprintf+0x3c>)
 8005168:	f853 2b04 	ldr.w	r2, [r3], #4
 800516c:	9105      	str	r1, [sp, #20]
 800516e:	6800      	ldr	r0, [r0, #0]
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	a902      	add	r1, sp, #8
 8005174:	f000 f992 	bl	800549c <_svfiprintf_r>
 8005178:	9b02      	ldr	r3, [sp, #8]
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	b01c      	add	sp, #112	; 0x70
 8005180:	f85d eb04 	ldr.w	lr, [sp], #4
 8005184:	b003      	add	sp, #12
 8005186:	4770      	bx	lr
 8005188:	2000005c 	.word	0x2000005c
 800518c:	ffff0208 	.word	0xffff0208

08005190 <memset>:
 8005190:	4402      	add	r2, r0
 8005192:	4603      	mov	r3, r0
 8005194:	4293      	cmp	r3, r2
 8005196:	d100      	bne.n	800519a <memset+0xa>
 8005198:	4770      	bx	lr
 800519a:	f803 1b01 	strb.w	r1, [r3], #1
 800519e:	e7f9      	b.n	8005194 <memset+0x4>

080051a0 <__errno>:
 80051a0:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <__errno+0x8>)
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	2000005c 	.word	0x2000005c

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	4d0d      	ldr	r5, [pc, #52]	; (80051e4 <__libc_init_array+0x38>)
 80051b0:	4c0d      	ldr	r4, [pc, #52]	; (80051e8 <__libc_init_array+0x3c>)
 80051b2:	1b64      	subs	r4, r4, r5
 80051b4:	10a4      	asrs	r4, r4, #2
 80051b6:	2600      	movs	r6, #0
 80051b8:	42a6      	cmp	r6, r4
 80051ba:	d109      	bne.n	80051d0 <__libc_init_array+0x24>
 80051bc:	4d0b      	ldr	r5, [pc, #44]	; (80051ec <__libc_init_array+0x40>)
 80051be:	4c0c      	ldr	r4, [pc, #48]	; (80051f0 <__libc_init_array+0x44>)
 80051c0:	f000 fc6a 	bl	8005a98 <_init>
 80051c4:	1b64      	subs	r4, r4, r5
 80051c6:	10a4      	asrs	r4, r4, #2
 80051c8:	2600      	movs	r6, #0
 80051ca:	42a6      	cmp	r6, r4
 80051cc:	d105      	bne.n	80051da <__libc_init_array+0x2e>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d4:	4798      	blx	r3
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7ee      	b.n	80051b8 <__libc_init_array+0xc>
 80051da:	f855 3b04 	ldr.w	r3, [r5], #4
 80051de:	4798      	blx	r3
 80051e0:	3601      	adds	r6, #1
 80051e2:	e7f2      	b.n	80051ca <__libc_init_array+0x1e>
 80051e4:	08005bf4 	.word	0x08005bf4
 80051e8:	08005bf4 	.word	0x08005bf4
 80051ec:	08005bf4 	.word	0x08005bf4
 80051f0:	08005bf8 	.word	0x08005bf8

080051f4 <__retarget_lock_acquire_recursive>:
 80051f4:	4770      	bx	lr

080051f6 <__retarget_lock_release_recursive>:
 80051f6:	4770      	bx	lr

080051f8 <_free_r>:
 80051f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051fa:	2900      	cmp	r1, #0
 80051fc:	d044      	beq.n	8005288 <_free_r+0x90>
 80051fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005202:	9001      	str	r0, [sp, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f1a1 0404 	sub.w	r4, r1, #4
 800520a:	bfb8      	it	lt
 800520c:	18e4      	addlt	r4, r4, r3
 800520e:	f000 f8df 	bl	80053d0 <__malloc_lock>
 8005212:	4a1e      	ldr	r2, [pc, #120]	; (800528c <_free_r+0x94>)
 8005214:	9801      	ldr	r0, [sp, #4]
 8005216:	6813      	ldr	r3, [r2, #0]
 8005218:	b933      	cbnz	r3, 8005228 <_free_r+0x30>
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	6014      	str	r4, [r2, #0]
 800521e:	b003      	add	sp, #12
 8005220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005224:	f000 b8da 	b.w	80053dc <__malloc_unlock>
 8005228:	42a3      	cmp	r3, r4
 800522a:	d908      	bls.n	800523e <_free_r+0x46>
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	1961      	adds	r1, r4, r5
 8005230:	428b      	cmp	r3, r1
 8005232:	bf01      	itttt	eq
 8005234:	6819      	ldreq	r1, [r3, #0]
 8005236:	685b      	ldreq	r3, [r3, #4]
 8005238:	1949      	addeq	r1, r1, r5
 800523a:	6021      	streq	r1, [r4, #0]
 800523c:	e7ed      	b.n	800521a <_free_r+0x22>
 800523e:	461a      	mov	r2, r3
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	b10b      	cbz	r3, 8005248 <_free_r+0x50>
 8005244:	42a3      	cmp	r3, r4
 8005246:	d9fa      	bls.n	800523e <_free_r+0x46>
 8005248:	6811      	ldr	r1, [r2, #0]
 800524a:	1855      	adds	r5, r2, r1
 800524c:	42a5      	cmp	r5, r4
 800524e:	d10b      	bne.n	8005268 <_free_r+0x70>
 8005250:	6824      	ldr	r4, [r4, #0]
 8005252:	4421      	add	r1, r4
 8005254:	1854      	adds	r4, r2, r1
 8005256:	42a3      	cmp	r3, r4
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	d1e0      	bne.n	800521e <_free_r+0x26>
 800525c:	681c      	ldr	r4, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	6053      	str	r3, [r2, #4]
 8005262:	440c      	add	r4, r1
 8005264:	6014      	str	r4, [r2, #0]
 8005266:	e7da      	b.n	800521e <_free_r+0x26>
 8005268:	d902      	bls.n	8005270 <_free_r+0x78>
 800526a:	230c      	movs	r3, #12
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	e7d6      	b.n	800521e <_free_r+0x26>
 8005270:	6825      	ldr	r5, [r4, #0]
 8005272:	1961      	adds	r1, r4, r5
 8005274:	428b      	cmp	r3, r1
 8005276:	bf04      	itt	eq
 8005278:	6819      	ldreq	r1, [r3, #0]
 800527a:	685b      	ldreq	r3, [r3, #4]
 800527c:	6063      	str	r3, [r4, #4]
 800527e:	bf04      	itt	eq
 8005280:	1949      	addeq	r1, r1, r5
 8005282:	6021      	streq	r1, [r4, #0]
 8005284:	6054      	str	r4, [r2, #4]
 8005286:	e7ca      	b.n	800521e <_free_r+0x26>
 8005288:	b003      	add	sp, #12
 800528a:	bd30      	pop	{r4, r5, pc}
 800528c:	20000ad0 	.word	0x20000ad0

08005290 <sbrk_aligned>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4e0e      	ldr	r6, [pc, #56]	; (80052cc <sbrk_aligned+0x3c>)
 8005294:	460c      	mov	r4, r1
 8005296:	6831      	ldr	r1, [r6, #0]
 8005298:	4605      	mov	r5, r0
 800529a:	b911      	cbnz	r1, 80052a2 <sbrk_aligned+0x12>
 800529c:	f000 fba6 	bl	80059ec <_sbrk_r>
 80052a0:	6030      	str	r0, [r6, #0]
 80052a2:	4621      	mov	r1, r4
 80052a4:	4628      	mov	r0, r5
 80052a6:	f000 fba1 	bl	80059ec <_sbrk_r>
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	d00a      	beq.n	80052c4 <sbrk_aligned+0x34>
 80052ae:	1cc4      	adds	r4, r0, #3
 80052b0:	f024 0403 	bic.w	r4, r4, #3
 80052b4:	42a0      	cmp	r0, r4
 80052b6:	d007      	beq.n	80052c8 <sbrk_aligned+0x38>
 80052b8:	1a21      	subs	r1, r4, r0
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 fb96 	bl	80059ec <_sbrk_r>
 80052c0:	3001      	adds	r0, #1
 80052c2:	d101      	bne.n	80052c8 <sbrk_aligned+0x38>
 80052c4:	f04f 34ff 	mov.w	r4, #4294967295
 80052c8:	4620      	mov	r0, r4
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	20000ad4 	.word	0x20000ad4

080052d0 <_malloc_r>:
 80052d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d4:	1ccd      	adds	r5, r1, #3
 80052d6:	f025 0503 	bic.w	r5, r5, #3
 80052da:	3508      	adds	r5, #8
 80052dc:	2d0c      	cmp	r5, #12
 80052de:	bf38      	it	cc
 80052e0:	250c      	movcc	r5, #12
 80052e2:	2d00      	cmp	r5, #0
 80052e4:	4607      	mov	r7, r0
 80052e6:	db01      	blt.n	80052ec <_malloc_r+0x1c>
 80052e8:	42a9      	cmp	r1, r5
 80052ea:	d905      	bls.n	80052f8 <_malloc_r+0x28>
 80052ec:	230c      	movs	r3, #12
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	2600      	movs	r6, #0
 80052f2:	4630      	mov	r0, r6
 80052f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053cc <_malloc_r+0xfc>
 80052fc:	f000 f868 	bl	80053d0 <__malloc_lock>
 8005300:	f8d8 3000 	ldr.w	r3, [r8]
 8005304:	461c      	mov	r4, r3
 8005306:	bb5c      	cbnz	r4, 8005360 <_malloc_r+0x90>
 8005308:	4629      	mov	r1, r5
 800530a:	4638      	mov	r0, r7
 800530c:	f7ff ffc0 	bl	8005290 <sbrk_aligned>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	4604      	mov	r4, r0
 8005314:	d155      	bne.n	80053c2 <_malloc_r+0xf2>
 8005316:	f8d8 4000 	ldr.w	r4, [r8]
 800531a:	4626      	mov	r6, r4
 800531c:	2e00      	cmp	r6, #0
 800531e:	d145      	bne.n	80053ac <_malloc_r+0xdc>
 8005320:	2c00      	cmp	r4, #0
 8005322:	d048      	beq.n	80053b6 <_malloc_r+0xe6>
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	4631      	mov	r1, r6
 8005328:	4638      	mov	r0, r7
 800532a:	eb04 0903 	add.w	r9, r4, r3
 800532e:	f000 fb5d 	bl	80059ec <_sbrk_r>
 8005332:	4581      	cmp	r9, r0
 8005334:	d13f      	bne.n	80053b6 <_malloc_r+0xe6>
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	1a6d      	subs	r5, r5, r1
 800533a:	4629      	mov	r1, r5
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ffa7 	bl	8005290 <sbrk_aligned>
 8005342:	3001      	adds	r0, #1
 8005344:	d037      	beq.n	80053b6 <_malloc_r+0xe6>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	442b      	add	r3, r5
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	f8d8 3000 	ldr.w	r3, [r8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d038      	beq.n	80053c6 <_malloc_r+0xf6>
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	42a2      	cmp	r2, r4
 8005358:	d12b      	bne.n	80053b2 <_malloc_r+0xe2>
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	e00f      	b.n	8005380 <_malloc_r+0xb0>
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	1b52      	subs	r2, r2, r5
 8005364:	d41f      	bmi.n	80053a6 <_malloc_r+0xd6>
 8005366:	2a0b      	cmp	r2, #11
 8005368:	d917      	bls.n	800539a <_malloc_r+0xca>
 800536a:	1961      	adds	r1, r4, r5
 800536c:	42a3      	cmp	r3, r4
 800536e:	6025      	str	r5, [r4, #0]
 8005370:	bf18      	it	ne
 8005372:	6059      	strne	r1, [r3, #4]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	bf08      	it	eq
 8005378:	f8c8 1000 	streq.w	r1, [r8]
 800537c:	5162      	str	r2, [r4, r5]
 800537e:	604b      	str	r3, [r1, #4]
 8005380:	4638      	mov	r0, r7
 8005382:	f104 060b 	add.w	r6, r4, #11
 8005386:	f000 f829 	bl	80053dc <__malloc_unlock>
 800538a:	f026 0607 	bic.w	r6, r6, #7
 800538e:	1d23      	adds	r3, r4, #4
 8005390:	1af2      	subs	r2, r6, r3
 8005392:	d0ae      	beq.n	80052f2 <_malloc_r+0x22>
 8005394:	1b9b      	subs	r3, r3, r6
 8005396:	50a3      	str	r3, [r4, r2]
 8005398:	e7ab      	b.n	80052f2 <_malloc_r+0x22>
 800539a:	42a3      	cmp	r3, r4
 800539c:	6862      	ldr	r2, [r4, #4]
 800539e:	d1dd      	bne.n	800535c <_malloc_r+0x8c>
 80053a0:	f8c8 2000 	str.w	r2, [r8]
 80053a4:	e7ec      	b.n	8005380 <_malloc_r+0xb0>
 80053a6:	4623      	mov	r3, r4
 80053a8:	6864      	ldr	r4, [r4, #4]
 80053aa:	e7ac      	b.n	8005306 <_malloc_r+0x36>
 80053ac:	4634      	mov	r4, r6
 80053ae:	6876      	ldr	r6, [r6, #4]
 80053b0:	e7b4      	b.n	800531c <_malloc_r+0x4c>
 80053b2:	4613      	mov	r3, r2
 80053b4:	e7cc      	b.n	8005350 <_malloc_r+0x80>
 80053b6:	230c      	movs	r3, #12
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4638      	mov	r0, r7
 80053bc:	f000 f80e 	bl	80053dc <__malloc_unlock>
 80053c0:	e797      	b.n	80052f2 <_malloc_r+0x22>
 80053c2:	6025      	str	r5, [r4, #0]
 80053c4:	e7dc      	b.n	8005380 <_malloc_r+0xb0>
 80053c6:	605b      	str	r3, [r3, #4]
 80053c8:	deff      	udf	#255	; 0xff
 80053ca:	bf00      	nop
 80053cc:	20000ad0 	.word	0x20000ad0

080053d0 <__malloc_lock>:
 80053d0:	4801      	ldr	r0, [pc, #4]	; (80053d8 <__malloc_lock+0x8>)
 80053d2:	f7ff bf0f 	b.w	80051f4 <__retarget_lock_acquire_recursive>
 80053d6:	bf00      	nop
 80053d8:	20000acc 	.word	0x20000acc

080053dc <__malloc_unlock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_unlock+0x8>)
 80053de:	f7ff bf0a 	b.w	80051f6 <__retarget_lock_release_recursive>
 80053e2:	bf00      	nop
 80053e4:	20000acc 	.word	0x20000acc

080053e8 <__ssputs_r>:
 80053e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	688e      	ldr	r6, [r1, #8]
 80053ee:	461f      	mov	r7, r3
 80053f0:	42be      	cmp	r6, r7
 80053f2:	680b      	ldr	r3, [r1, #0]
 80053f4:	4682      	mov	sl, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	4690      	mov	r8, r2
 80053fa:	d82c      	bhi.n	8005456 <__ssputs_r+0x6e>
 80053fc:	898a      	ldrh	r2, [r1, #12]
 80053fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005402:	d026      	beq.n	8005452 <__ssputs_r+0x6a>
 8005404:	6965      	ldr	r5, [r4, #20]
 8005406:	6909      	ldr	r1, [r1, #16]
 8005408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800540c:	eba3 0901 	sub.w	r9, r3, r1
 8005410:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005414:	1c7b      	adds	r3, r7, #1
 8005416:	444b      	add	r3, r9
 8005418:	106d      	asrs	r5, r5, #1
 800541a:	429d      	cmp	r5, r3
 800541c:	bf38      	it	cc
 800541e:	461d      	movcc	r5, r3
 8005420:	0553      	lsls	r3, r2, #21
 8005422:	d527      	bpl.n	8005474 <__ssputs_r+0x8c>
 8005424:	4629      	mov	r1, r5
 8005426:	f7ff ff53 	bl	80052d0 <_malloc_r>
 800542a:	4606      	mov	r6, r0
 800542c:	b360      	cbz	r0, 8005488 <__ssputs_r+0xa0>
 800542e:	6921      	ldr	r1, [r4, #16]
 8005430:	464a      	mov	r2, r9
 8005432:	f000 faeb 	bl	8005a0c <memcpy>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	6126      	str	r6, [r4, #16]
 8005444:	6165      	str	r5, [r4, #20]
 8005446:	444e      	add	r6, r9
 8005448:	eba5 0509 	sub.w	r5, r5, r9
 800544c:	6026      	str	r6, [r4, #0]
 800544e:	60a5      	str	r5, [r4, #8]
 8005450:	463e      	mov	r6, r7
 8005452:	42be      	cmp	r6, r7
 8005454:	d900      	bls.n	8005458 <__ssputs_r+0x70>
 8005456:	463e      	mov	r6, r7
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	4632      	mov	r2, r6
 800545c:	4641      	mov	r1, r8
 800545e:	f000 faab 	bl	80059b8 <memmove>
 8005462:	68a3      	ldr	r3, [r4, #8]
 8005464:	1b9b      	subs	r3, r3, r6
 8005466:	60a3      	str	r3, [r4, #8]
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	4433      	add	r3, r6
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	2000      	movs	r0, #0
 8005470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005474:	462a      	mov	r2, r5
 8005476:	f000 fad7 	bl	8005a28 <_realloc_r>
 800547a:	4606      	mov	r6, r0
 800547c:	2800      	cmp	r0, #0
 800547e:	d1e0      	bne.n	8005442 <__ssputs_r+0x5a>
 8005480:	6921      	ldr	r1, [r4, #16]
 8005482:	4650      	mov	r0, sl
 8005484:	f7ff feb8 	bl	80051f8 <_free_r>
 8005488:	230c      	movs	r3, #12
 800548a:	f8ca 3000 	str.w	r3, [sl]
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005494:	81a3      	strh	r3, [r4, #12]
 8005496:	f04f 30ff 	mov.w	r0, #4294967295
 800549a:	e7e9      	b.n	8005470 <__ssputs_r+0x88>

0800549c <_svfiprintf_r>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	4698      	mov	r8, r3
 80054a2:	898b      	ldrh	r3, [r1, #12]
 80054a4:	061b      	lsls	r3, r3, #24
 80054a6:	b09d      	sub	sp, #116	; 0x74
 80054a8:	4607      	mov	r7, r0
 80054aa:	460d      	mov	r5, r1
 80054ac:	4614      	mov	r4, r2
 80054ae:	d50e      	bpl.n	80054ce <_svfiprintf_r+0x32>
 80054b0:	690b      	ldr	r3, [r1, #16]
 80054b2:	b963      	cbnz	r3, 80054ce <_svfiprintf_r+0x32>
 80054b4:	2140      	movs	r1, #64	; 0x40
 80054b6:	f7ff ff0b 	bl	80052d0 <_malloc_r>
 80054ba:	6028      	str	r0, [r5, #0]
 80054bc:	6128      	str	r0, [r5, #16]
 80054be:	b920      	cbnz	r0, 80054ca <_svfiprintf_r+0x2e>
 80054c0:	230c      	movs	r3, #12
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	e0d0      	b.n	800566c <_svfiprintf_r+0x1d0>
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	616b      	str	r3, [r5, #20]
 80054ce:	2300      	movs	r3, #0
 80054d0:	9309      	str	r3, [sp, #36]	; 0x24
 80054d2:	2320      	movs	r3, #32
 80054d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054dc:	2330      	movs	r3, #48	; 0x30
 80054de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005684 <_svfiprintf_r+0x1e8>
 80054e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054e6:	f04f 0901 	mov.w	r9, #1
 80054ea:	4623      	mov	r3, r4
 80054ec:	469a      	mov	sl, r3
 80054ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054f2:	b10a      	cbz	r2, 80054f8 <_svfiprintf_r+0x5c>
 80054f4:	2a25      	cmp	r2, #37	; 0x25
 80054f6:	d1f9      	bne.n	80054ec <_svfiprintf_r+0x50>
 80054f8:	ebba 0b04 	subs.w	fp, sl, r4
 80054fc:	d00b      	beq.n	8005516 <_svfiprintf_r+0x7a>
 80054fe:	465b      	mov	r3, fp
 8005500:	4622      	mov	r2, r4
 8005502:	4629      	mov	r1, r5
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ff6f 	bl	80053e8 <__ssputs_r>
 800550a:	3001      	adds	r0, #1
 800550c:	f000 80a9 	beq.w	8005662 <_svfiprintf_r+0x1c6>
 8005510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005512:	445a      	add	r2, fp
 8005514:	9209      	str	r2, [sp, #36]	; 0x24
 8005516:	f89a 3000 	ldrb.w	r3, [sl]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80a1 	beq.w	8005662 <_svfiprintf_r+0x1c6>
 8005520:	2300      	movs	r3, #0
 8005522:	f04f 32ff 	mov.w	r2, #4294967295
 8005526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800552a:	f10a 0a01 	add.w	sl, sl, #1
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	9307      	str	r3, [sp, #28]
 8005532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005536:	931a      	str	r3, [sp, #104]	; 0x68
 8005538:	4654      	mov	r4, sl
 800553a:	2205      	movs	r2, #5
 800553c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005540:	4850      	ldr	r0, [pc, #320]	; (8005684 <_svfiprintf_r+0x1e8>)
 8005542:	f7fa fe6d 	bl	8000220 <memchr>
 8005546:	9a04      	ldr	r2, [sp, #16]
 8005548:	b9d8      	cbnz	r0, 8005582 <_svfiprintf_r+0xe6>
 800554a:	06d0      	lsls	r0, r2, #27
 800554c:	bf44      	itt	mi
 800554e:	2320      	movmi	r3, #32
 8005550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005554:	0711      	lsls	r1, r2, #28
 8005556:	bf44      	itt	mi
 8005558:	232b      	movmi	r3, #43	; 0x2b
 800555a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800555e:	f89a 3000 	ldrb.w	r3, [sl]
 8005562:	2b2a      	cmp	r3, #42	; 0x2a
 8005564:	d015      	beq.n	8005592 <_svfiprintf_r+0xf6>
 8005566:	9a07      	ldr	r2, [sp, #28]
 8005568:	4654      	mov	r4, sl
 800556a:	2000      	movs	r0, #0
 800556c:	f04f 0c0a 	mov.w	ip, #10
 8005570:	4621      	mov	r1, r4
 8005572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005576:	3b30      	subs	r3, #48	; 0x30
 8005578:	2b09      	cmp	r3, #9
 800557a:	d94d      	bls.n	8005618 <_svfiprintf_r+0x17c>
 800557c:	b1b0      	cbz	r0, 80055ac <_svfiprintf_r+0x110>
 800557e:	9207      	str	r2, [sp, #28]
 8005580:	e014      	b.n	80055ac <_svfiprintf_r+0x110>
 8005582:	eba0 0308 	sub.w	r3, r0, r8
 8005586:	fa09 f303 	lsl.w	r3, r9, r3
 800558a:	4313      	orrs	r3, r2
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	46a2      	mov	sl, r4
 8005590:	e7d2      	b.n	8005538 <_svfiprintf_r+0x9c>
 8005592:	9b03      	ldr	r3, [sp, #12]
 8005594:	1d19      	adds	r1, r3, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	9103      	str	r1, [sp, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	bfbb      	ittet	lt
 800559e:	425b      	neglt	r3, r3
 80055a0:	f042 0202 	orrlt.w	r2, r2, #2
 80055a4:	9307      	strge	r3, [sp, #28]
 80055a6:	9307      	strlt	r3, [sp, #28]
 80055a8:	bfb8      	it	lt
 80055aa:	9204      	strlt	r2, [sp, #16]
 80055ac:	7823      	ldrb	r3, [r4, #0]
 80055ae:	2b2e      	cmp	r3, #46	; 0x2e
 80055b0:	d10c      	bne.n	80055cc <_svfiprintf_r+0x130>
 80055b2:	7863      	ldrb	r3, [r4, #1]
 80055b4:	2b2a      	cmp	r3, #42	; 0x2a
 80055b6:	d134      	bne.n	8005622 <_svfiprintf_r+0x186>
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	9203      	str	r2, [sp, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bfb8      	it	lt
 80055c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80055c8:	3402      	adds	r4, #2
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005694 <_svfiprintf_r+0x1f8>
 80055d0:	7821      	ldrb	r1, [r4, #0]
 80055d2:	2203      	movs	r2, #3
 80055d4:	4650      	mov	r0, sl
 80055d6:	f7fa fe23 	bl	8000220 <memchr>
 80055da:	b138      	cbz	r0, 80055ec <_svfiprintf_r+0x150>
 80055dc:	9b04      	ldr	r3, [sp, #16]
 80055de:	eba0 000a 	sub.w	r0, r0, sl
 80055e2:	2240      	movs	r2, #64	; 0x40
 80055e4:	4082      	lsls	r2, r0
 80055e6:	4313      	orrs	r3, r2
 80055e8:	3401      	adds	r4, #1
 80055ea:	9304      	str	r3, [sp, #16]
 80055ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f0:	4825      	ldr	r0, [pc, #148]	; (8005688 <_svfiprintf_r+0x1ec>)
 80055f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055f6:	2206      	movs	r2, #6
 80055f8:	f7fa fe12 	bl	8000220 <memchr>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d038      	beq.n	8005672 <_svfiprintf_r+0x1d6>
 8005600:	4b22      	ldr	r3, [pc, #136]	; (800568c <_svfiprintf_r+0x1f0>)
 8005602:	bb1b      	cbnz	r3, 800564c <_svfiprintf_r+0x1b0>
 8005604:	9b03      	ldr	r3, [sp, #12]
 8005606:	3307      	adds	r3, #7
 8005608:	f023 0307 	bic.w	r3, r3, #7
 800560c:	3308      	adds	r3, #8
 800560e:	9303      	str	r3, [sp, #12]
 8005610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005612:	4433      	add	r3, r6
 8005614:	9309      	str	r3, [sp, #36]	; 0x24
 8005616:	e768      	b.n	80054ea <_svfiprintf_r+0x4e>
 8005618:	fb0c 3202 	mla	r2, ip, r2, r3
 800561c:	460c      	mov	r4, r1
 800561e:	2001      	movs	r0, #1
 8005620:	e7a6      	b.n	8005570 <_svfiprintf_r+0xd4>
 8005622:	2300      	movs	r3, #0
 8005624:	3401      	adds	r4, #1
 8005626:	9305      	str	r3, [sp, #20]
 8005628:	4619      	mov	r1, r3
 800562a:	f04f 0c0a 	mov.w	ip, #10
 800562e:	4620      	mov	r0, r4
 8005630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005634:	3a30      	subs	r2, #48	; 0x30
 8005636:	2a09      	cmp	r2, #9
 8005638:	d903      	bls.n	8005642 <_svfiprintf_r+0x1a6>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0c6      	beq.n	80055cc <_svfiprintf_r+0x130>
 800563e:	9105      	str	r1, [sp, #20]
 8005640:	e7c4      	b.n	80055cc <_svfiprintf_r+0x130>
 8005642:	fb0c 2101 	mla	r1, ip, r1, r2
 8005646:	4604      	mov	r4, r0
 8005648:	2301      	movs	r3, #1
 800564a:	e7f0      	b.n	800562e <_svfiprintf_r+0x192>
 800564c:	ab03      	add	r3, sp, #12
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	462a      	mov	r2, r5
 8005652:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <_svfiprintf_r+0x1f4>)
 8005654:	a904      	add	r1, sp, #16
 8005656:	4638      	mov	r0, r7
 8005658:	f3af 8000 	nop.w
 800565c:	1c42      	adds	r2, r0, #1
 800565e:	4606      	mov	r6, r0
 8005660:	d1d6      	bne.n	8005610 <_svfiprintf_r+0x174>
 8005662:	89ab      	ldrh	r3, [r5, #12]
 8005664:	065b      	lsls	r3, r3, #25
 8005666:	f53f af2d 	bmi.w	80054c4 <_svfiprintf_r+0x28>
 800566a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800566c:	b01d      	add	sp, #116	; 0x74
 800566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005672:	ab03      	add	r3, sp, #12
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	462a      	mov	r2, r5
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <_svfiprintf_r+0x1f4>)
 800567a:	a904      	add	r1, sp, #16
 800567c:	4638      	mov	r0, r7
 800567e:	f000 f879 	bl	8005774 <_printf_i>
 8005682:	e7eb      	b.n	800565c <_svfiprintf_r+0x1c0>
 8005684:	08005bb8 	.word	0x08005bb8
 8005688:	08005bc2 	.word	0x08005bc2
 800568c:	00000000 	.word	0x00000000
 8005690:	080053e9 	.word	0x080053e9
 8005694:	08005bbe 	.word	0x08005bbe

08005698 <_printf_common>:
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	4616      	mov	r6, r2
 800569e:	4699      	mov	r9, r3
 80056a0:	688a      	ldr	r2, [r1, #8]
 80056a2:	690b      	ldr	r3, [r1, #16]
 80056a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfb8      	it	lt
 80056ac:	4613      	movlt	r3, r2
 80056ae:	6033      	str	r3, [r6, #0]
 80056b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056b4:	4607      	mov	r7, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	b10a      	cbz	r2, 80056be <_printf_common+0x26>
 80056ba:	3301      	adds	r3, #1
 80056bc:	6033      	str	r3, [r6, #0]
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	0699      	lsls	r1, r3, #26
 80056c2:	bf42      	ittt	mi
 80056c4:	6833      	ldrmi	r3, [r6, #0]
 80056c6:	3302      	addmi	r3, #2
 80056c8:	6033      	strmi	r3, [r6, #0]
 80056ca:	6825      	ldr	r5, [r4, #0]
 80056cc:	f015 0506 	ands.w	r5, r5, #6
 80056d0:	d106      	bne.n	80056e0 <_printf_common+0x48>
 80056d2:	f104 0a19 	add.w	sl, r4, #25
 80056d6:	68e3      	ldr	r3, [r4, #12]
 80056d8:	6832      	ldr	r2, [r6, #0]
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	42ab      	cmp	r3, r5
 80056de:	dc26      	bgt.n	800572e <_printf_common+0x96>
 80056e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056e4:	1e13      	subs	r3, r2, #0
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	bf18      	it	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	0692      	lsls	r2, r2, #26
 80056ee:	d42b      	bmi.n	8005748 <_printf_common+0xb0>
 80056f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056f4:	4649      	mov	r1, r9
 80056f6:	4638      	mov	r0, r7
 80056f8:	47c0      	blx	r8
 80056fa:	3001      	adds	r0, #1
 80056fc:	d01e      	beq.n	800573c <_printf_common+0xa4>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	6922      	ldr	r2, [r4, #16]
 8005702:	f003 0306 	and.w	r3, r3, #6
 8005706:	2b04      	cmp	r3, #4
 8005708:	bf02      	ittt	eq
 800570a:	68e5      	ldreq	r5, [r4, #12]
 800570c:	6833      	ldreq	r3, [r6, #0]
 800570e:	1aed      	subeq	r5, r5, r3
 8005710:	68a3      	ldr	r3, [r4, #8]
 8005712:	bf0c      	ite	eq
 8005714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005718:	2500      	movne	r5, #0
 800571a:	4293      	cmp	r3, r2
 800571c:	bfc4      	itt	gt
 800571e:	1a9b      	subgt	r3, r3, r2
 8005720:	18ed      	addgt	r5, r5, r3
 8005722:	2600      	movs	r6, #0
 8005724:	341a      	adds	r4, #26
 8005726:	42b5      	cmp	r5, r6
 8005728:	d11a      	bne.n	8005760 <_printf_common+0xc8>
 800572a:	2000      	movs	r0, #0
 800572c:	e008      	b.n	8005740 <_printf_common+0xa8>
 800572e:	2301      	movs	r3, #1
 8005730:	4652      	mov	r2, sl
 8005732:	4649      	mov	r1, r9
 8005734:	4638      	mov	r0, r7
 8005736:	47c0      	blx	r8
 8005738:	3001      	adds	r0, #1
 800573a:	d103      	bne.n	8005744 <_printf_common+0xac>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005744:	3501      	adds	r5, #1
 8005746:	e7c6      	b.n	80056d6 <_printf_common+0x3e>
 8005748:	18e1      	adds	r1, r4, r3
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	2030      	movs	r0, #48	; 0x30
 800574e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005752:	4422      	add	r2, r4
 8005754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800575c:	3302      	adds	r3, #2
 800575e:	e7c7      	b.n	80056f0 <_printf_common+0x58>
 8005760:	2301      	movs	r3, #1
 8005762:	4622      	mov	r2, r4
 8005764:	4649      	mov	r1, r9
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	3001      	adds	r0, #1
 800576c:	d0e6      	beq.n	800573c <_printf_common+0xa4>
 800576e:	3601      	adds	r6, #1
 8005770:	e7d9      	b.n	8005726 <_printf_common+0x8e>
	...

08005774 <_printf_i>:
 8005774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005778:	7e0f      	ldrb	r7, [r1, #24]
 800577a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800577c:	2f78      	cmp	r7, #120	; 0x78
 800577e:	4691      	mov	r9, r2
 8005780:	4680      	mov	r8, r0
 8005782:	460c      	mov	r4, r1
 8005784:	469a      	mov	sl, r3
 8005786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800578a:	d807      	bhi.n	800579c <_printf_i+0x28>
 800578c:	2f62      	cmp	r7, #98	; 0x62
 800578e:	d80a      	bhi.n	80057a6 <_printf_i+0x32>
 8005790:	2f00      	cmp	r7, #0
 8005792:	f000 80d4 	beq.w	800593e <_printf_i+0x1ca>
 8005796:	2f58      	cmp	r7, #88	; 0x58
 8005798:	f000 80c0 	beq.w	800591c <_printf_i+0x1a8>
 800579c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057a4:	e03a      	b.n	800581c <_printf_i+0xa8>
 80057a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057aa:	2b15      	cmp	r3, #21
 80057ac:	d8f6      	bhi.n	800579c <_printf_i+0x28>
 80057ae:	a101      	add	r1, pc, #4	; (adr r1, 80057b4 <_printf_i+0x40>)
 80057b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057b4:	0800580d 	.word	0x0800580d
 80057b8:	08005821 	.word	0x08005821
 80057bc:	0800579d 	.word	0x0800579d
 80057c0:	0800579d 	.word	0x0800579d
 80057c4:	0800579d 	.word	0x0800579d
 80057c8:	0800579d 	.word	0x0800579d
 80057cc:	08005821 	.word	0x08005821
 80057d0:	0800579d 	.word	0x0800579d
 80057d4:	0800579d 	.word	0x0800579d
 80057d8:	0800579d 	.word	0x0800579d
 80057dc:	0800579d 	.word	0x0800579d
 80057e0:	08005925 	.word	0x08005925
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	080058df 	.word	0x080058df
 80057ec:	0800579d 	.word	0x0800579d
 80057f0:	0800579d 	.word	0x0800579d
 80057f4:	08005947 	.word	0x08005947
 80057f8:	0800579d 	.word	0x0800579d
 80057fc:	0800584d 	.word	0x0800584d
 8005800:	0800579d 	.word	0x0800579d
 8005804:	0800579d 	.word	0x0800579d
 8005808:	080058e7 	.word	0x080058e7
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	602a      	str	r2, [r5, #0]
 8005814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800581c:	2301      	movs	r3, #1
 800581e:	e09f      	b.n	8005960 <_printf_i+0x1ec>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	682b      	ldr	r3, [r5, #0]
 8005824:	0607      	lsls	r7, r0, #24
 8005826:	f103 0104 	add.w	r1, r3, #4
 800582a:	6029      	str	r1, [r5, #0]
 800582c:	d501      	bpl.n	8005832 <_printf_i+0xbe>
 800582e:	681e      	ldr	r6, [r3, #0]
 8005830:	e003      	b.n	800583a <_printf_i+0xc6>
 8005832:	0646      	lsls	r6, r0, #25
 8005834:	d5fb      	bpl.n	800582e <_printf_i+0xba>
 8005836:	f9b3 6000 	ldrsh.w	r6, [r3]
 800583a:	2e00      	cmp	r6, #0
 800583c:	da03      	bge.n	8005846 <_printf_i+0xd2>
 800583e:	232d      	movs	r3, #45	; 0x2d
 8005840:	4276      	negs	r6, r6
 8005842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005846:	485a      	ldr	r0, [pc, #360]	; (80059b0 <_printf_i+0x23c>)
 8005848:	230a      	movs	r3, #10
 800584a:	e012      	b.n	8005872 <_printf_i+0xfe>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	6820      	ldr	r0, [r4, #0]
 8005850:	1d19      	adds	r1, r3, #4
 8005852:	6029      	str	r1, [r5, #0]
 8005854:	0605      	lsls	r5, r0, #24
 8005856:	d501      	bpl.n	800585c <_printf_i+0xe8>
 8005858:	681e      	ldr	r6, [r3, #0]
 800585a:	e002      	b.n	8005862 <_printf_i+0xee>
 800585c:	0641      	lsls	r1, r0, #25
 800585e:	d5fb      	bpl.n	8005858 <_printf_i+0xe4>
 8005860:	881e      	ldrh	r6, [r3, #0]
 8005862:	4853      	ldr	r0, [pc, #332]	; (80059b0 <_printf_i+0x23c>)
 8005864:	2f6f      	cmp	r7, #111	; 0x6f
 8005866:	bf0c      	ite	eq
 8005868:	2308      	moveq	r3, #8
 800586a:	230a      	movne	r3, #10
 800586c:	2100      	movs	r1, #0
 800586e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005872:	6865      	ldr	r5, [r4, #4]
 8005874:	60a5      	str	r5, [r4, #8]
 8005876:	2d00      	cmp	r5, #0
 8005878:	bfa2      	ittt	ge
 800587a:	6821      	ldrge	r1, [r4, #0]
 800587c:	f021 0104 	bicge.w	r1, r1, #4
 8005880:	6021      	strge	r1, [r4, #0]
 8005882:	b90e      	cbnz	r6, 8005888 <_printf_i+0x114>
 8005884:	2d00      	cmp	r5, #0
 8005886:	d04b      	beq.n	8005920 <_printf_i+0x1ac>
 8005888:	4615      	mov	r5, r2
 800588a:	fbb6 f1f3 	udiv	r1, r6, r3
 800588e:	fb03 6711 	mls	r7, r3, r1, r6
 8005892:	5dc7      	ldrb	r7, [r0, r7]
 8005894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005898:	4637      	mov	r7, r6
 800589a:	42bb      	cmp	r3, r7
 800589c:	460e      	mov	r6, r1
 800589e:	d9f4      	bls.n	800588a <_printf_i+0x116>
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d10b      	bne.n	80058bc <_printf_i+0x148>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	07de      	lsls	r6, r3, #31
 80058a8:	d508      	bpl.n	80058bc <_printf_i+0x148>
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	6861      	ldr	r1, [r4, #4]
 80058ae:	4299      	cmp	r1, r3
 80058b0:	bfde      	ittt	le
 80058b2:	2330      	movle	r3, #48	; 0x30
 80058b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058bc:	1b52      	subs	r2, r2, r5
 80058be:	6122      	str	r2, [r4, #16]
 80058c0:	f8cd a000 	str.w	sl, [sp]
 80058c4:	464b      	mov	r3, r9
 80058c6:	aa03      	add	r2, sp, #12
 80058c8:	4621      	mov	r1, r4
 80058ca:	4640      	mov	r0, r8
 80058cc:	f7ff fee4 	bl	8005698 <_printf_common>
 80058d0:	3001      	adds	r0, #1
 80058d2:	d14a      	bne.n	800596a <_printf_i+0x1f6>
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	b004      	add	sp, #16
 80058da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	f043 0320 	orr.w	r3, r3, #32
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	4833      	ldr	r0, [pc, #204]	; (80059b4 <_printf_i+0x240>)
 80058e8:	2778      	movs	r7, #120	; 0x78
 80058ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	6829      	ldr	r1, [r5, #0]
 80058f2:	061f      	lsls	r7, r3, #24
 80058f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058f8:	d402      	bmi.n	8005900 <_printf_i+0x18c>
 80058fa:	065f      	lsls	r7, r3, #25
 80058fc:	bf48      	it	mi
 80058fe:	b2b6      	uxthmi	r6, r6
 8005900:	07df      	lsls	r7, r3, #31
 8005902:	bf48      	it	mi
 8005904:	f043 0320 	orrmi.w	r3, r3, #32
 8005908:	6029      	str	r1, [r5, #0]
 800590a:	bf48      	it	mi
 800590c:	6023      	strmi	r3, [r4, #0]
 800590e:	b91e      	cbnz	r6, 8005918 <_printf_i+0x1a4>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	f023 0320 	bic.w	r3, r3, #32
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	2310      	movs	r3, #16
 800591a:	e7a7      	b.n	800586c <_printf_i+0xf8>
 800591c:	4824      	ldr	r0, [pc, #144]	; (80059b0 <_printf_i+0x23c>)
 800591e:	e7e4      	b.n	80058ea <_printf_i+0x176>
 8005920:	4615      	mov	r5, r2
 8005922:	e7bd      	b.n	80058a0 <_printf_i+0x12c>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	6826      	ldr	r6, [r4, #0]
 8005928:	6961      	ldr	r1, [r4, #20]
 800592a:	1d18      	adds	r0, r3, #4
 800592c:	6028      	str	r0, [r5, #0]
 800592e:	0635      	lsls	r5, r6, #24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	d501      	bpl.n	8005938 <_printf_i+0x1c4>
 8005934:	6019      	str	r1, [r3, #0]
 8005936:	e002      	b.n	800593e <_printf_i+0x1ca>
 8005938:	0670      	lsls	r0, r6, #25
 800593a:	d5fb      	bpl.n	8005934 <_printf_i+0x1c0>
 800593c:	8019      	strh	r1, [r3, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	4615      	mov	r5, r2
 8005944:	e7bc      	b.n	80058c0 <_printf_i+0x14c>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	1d1a      	adds	r2, r3, #4
 800594a:	602a      	str	r2, [r5, #0]
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	2100      	movs	r1, #0
 8005952:	4628      	mov	r0, r5
 8005954:	f7fa fc64 	bl	8000220 <memchr>
 8005958:	b108      	cbz	r0, 800595e <_printf_i+0x1ea>
 800595a:	1b40      	subs	r0, r0, r5
 800595c:	6060      	str	r0, [r4, #4]
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005968:	e7aa      	b.n	80058c0 <_printf_i+0x14c>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	462a      	mov	r2, r5
 800596e:	4649      	mov	r1, r9
 8005970:	4640      	mov	r0, r8
 8005972:	47d0      	blx	sl
 8005974:	3001      	adds	r0, #1
 8005976:	d0ad      	beq.n	80058d4 <_printf_i+0x160>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	079b      	lsls	r3, r3, #30
 800597c:	d413      	bmi.n	80059a6 <_printf_i+0x232>
 800597e:	68e0      	ldr	r0, [r4, #12]
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	4298      	cmp	r0, r3
 8005984:	bfb8      	it	lt
 8005986:	4618      	movlt	r0, r3
 8005988:	e7a6      	b.n	80058d8 <_printf_i+0x164>
 800598a:	2301      	movs	r3, #1
 800598c:	4632      	mov	r2, r6
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d09d      	beq.n	80058d4 <_printf_i+0x160>
 8005998:	3501      	adds	r5, #1
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	9903      	ldr	r1, [sp, #12]
 800599e:	1a5b      	subs	r3, r3, r1
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dcf2      	bgt.n	800598a <_printf_i+0x216>
 80059a4:	e7eb      	b.n	800597e <_printf_i+0x20a>
 80059a6:	2500      	movs	r5, #0
 80059a8:	f104 0619 	add.w	r6, r4, #25
 80059ac:	e7f5      	b.n	800599a <_printf_i+0x226>
 80059ae:	bf00      	nop
 80059b0:	08005bc9 	.word	0x08005bc9
 80059b4:	08005bda 	.word	0x08005bda

080059b8 <memmove>:
 80059b8:	4288      	cmp	r0, r1
 80059ba:	b510      	push	{r4, lr}
 80059bc:	eb01 0402 	add.w	r4, r1, r2
 80059c0:	d902      	bls.n	80059c8 <memmove+0x10>
 80059c2:	4284      	cmp	r4, r0
 80059c4:	4623      	mov	r3, r4
 80059c6:	d807      	bhi.n	80059d8 <memmove+0x20>
 80059c8:	1e43      	subs	r3, r0, #1
 80059ca:	42a1      	cmp	r1, r4
 80059cc:	d008      	beq.n	80059e0 <memmove+0x28>
 80059ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059d6:	e7f8      	b.n	80059ca <memmove+0x12>
 80059d8:	4402      	add	r2, r0
 80059da:	4601      	mov	r1, r0
 80059dc:	428a      	cmp	r2, r1
 80059de:	d100      	bne.n	80059e2 <memmove+0x2a>
 80059e0:	bd10      	pop	{r4, pc}
 80059e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059ea:	e7f7      	b.n	80059dc <memmove+0x24>

080059ec <_sbrk_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4d06      	ldr	r5, [pc, #24]	; (8005a08 <_sbrk_r+0x1c>)
 80059f0:	2300      	movs	r3, #0
 80059f2:	4604      	mov	r4, r0
 80059f4:	4608      	mov	r0, r1
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	f7fb ff08 	bl	800180c <_sbrk>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_sbrk_r+0x1a>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_sbrk_r+0x1a>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	20000ac8 	.word	0x20000ac8

08005a0c <memcpy>:
 8005a0c:	440a      	add	r2, r1
 8005a0e:	4291      	cmp	r1, r2
 8005a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a14:	d100      	bne.n	8005a18 <memcpy+0xc>
 8005a16:	4770      	bx	lr
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a22:	4291      	cmp	r1, r2
 8005a24:	d1f9      	bne.n	8005a1a <memcpy+0xe>
 8005a26:	bd10      	pop	{r4, pc}

08005a28 <_realloc_r>:
 8005a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4614      	mov	r4, r2
 8005a30:	460e      	mov	r6, r1
 8005a32:	b921      	cbnz	r1, 8005a3e <_realloc_r+0x16>
 8005a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	4611      	mov	r1, r2
 8005a3a:	f7ff bc49 	b.w	80052d0 <_malloc_r>
 8005a3e:	b92a      	cbnz	r2, 8005a4c <_realloc_r+0x24>
 8005a40:	f7ff fbda 	bl	80051f8 <_free_r>
 8005a44:	4625      	mov	r5, r4
 8005a46:	4628      	mov	r0, r5
 8005a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a4c:	f000 f81b 	bl	8005a86 <_malloc_usable_size_r>
 8005a50:	4284      	cmp	r4, r0
 8005a52:	4607      	mov	r7, r0
 8005a54:	d802      	bhi.n	8005a5c <_realloc_r+0x34>
 8005a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a5a:	d812      	bhi.n	8005a82 <_realloc_r+0x5a>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4640      	mov	r0, r8
 8005a60:	f7ff fc36 	bl	80052d0 <_malloc_r>
 8005a64:	4605      	mov	r5, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0ed      	beq.n	8005a46 <_realloc_r+0x1e>
 8005a6a:	42bc      	cmp	r4, r7
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	4631      	mov	r1, r6
 8005a70:	bf28      	it	cs
 8005a72:	463a      	movcs	r2, r7
 8005a74:	f7ff ffca 	bl	8005a0c <memcpy>
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	f7ff fbbc 	bl	80051f8 <_free_r>
 8005a80:	e7e1      	b.n	8005a46 <_realloc_r+0x1e>
 8005a82:	4635      	mov	r5, r6
 8005a84:	e7df      	b.n	8005a46 <_realloc_r+0x1e>

08005a86 <_malloc_usable_size_r>:
 8005a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8a:	1f18      	subs	r0, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bfbc      	itt	lt
 8005a90:	580b      	ldrlt	r3, [r1, r0]
 8005a92:	18c0      	addlt	r0, r0, r3
 8005a94:	4770      	bx	lr
	...

08005a98 <_init>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr

08005aa4 <_fini>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr
